import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.681fc4ae.js";const d=JSON.parse('{"title":"异步任务","description":"","frontmatter":{},"headers":[],"relativePath":"bash/archives/async.md","filePath":"bash/archives/async.md"}'),p={name:"bash/archives/async.md"},o=l(`<h1 id="异步任务" tabindex="-1">异步任务 <a class="header-anchor" href="#异步任务" aria-label="Permalink to &quot;异步任务&quot;">​</a></h1><p>Bash脚本有时候需要同时执行多个任务。通常这涉及到启动一个脚本，依次，启动一个或多个子脚本来执行额外的任务，而父脚本继续运行。然而，当一系列脚本 以这种方式运行时，要保持父子脚本之间协调工作，会有一些问题。也就是说，若父脚本或子脚本依赖于另一方，并且 一个脚本必须等待另一个脚本结束任务之后，才能完成它自己的任务，这应该怎么办？</p><p>bash 有一个内置命令，能帮助管理诸如此类的异步执行的任务。wait 命令导致一个父脚本暂停运行，直到一个 特定的进程（例如，子脚本）运行结束。</p><p>首先我们将演示一下 wait 命令的用法。为此，我们需要两个脚本，一个父脚本：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="color:#6A737D;"># async-parent : Asynchronous execution demo (parent)</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Parent: starting...&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Parent: launching child script...&quot;</span></span>
<span class="line"><span style="color:#B392F0;">async-child</span><span style="color:#E1E4E8;"> &amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">pid</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">$!</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Parent: child (PID= </span><span style="color:#E1E4E8;">$pid</span><span style="color:#9ECBFF;">) launched.&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Parent: continuing...&quot;</span></span>
<span class="line"><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Parent: pausing to wait for child to finish...&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">wait</span><span style="color:#E1E4E8;"> $pid</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Parent: child is finished. Continuing...&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Parent: parent is done. Exiting.&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="color:#6A737D;"># async-parent : Asynchronous execution demo (parent)</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Parent: starting...&quot;</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Parent: launching child script...&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">async-child</span><span style="color:#24292E;"> &amp;</span></span>
<span class="line"><span style="color:#24292E;">pid</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">$!</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Parent: child (PID= </span><span style="color:#24292E;">$pid</span><span style="color:#032F62;">) launched.&quot;</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Parent: continuing...&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Parent: pausing to wait for child to finish...&quot;</span></span>
<span class="line"><span style="color:#005CC5;">wait</span><span style="color:#24292E;"> $pid</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Parent: child is finished. Continuing...&quot;</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Parent: parent is done. Exiting.&quot;</span></span></code></pre></div><p>和一个子脚本：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="color:#6A737D;"># async-child : Asynchronous execution demo (child)</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Child: child is running...&quot;</span></span>
<span class="line"><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Child: child is done. Exiting.&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="color:#6A737D;"># async-child : Asynchronous execution demo (child)</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Child: child is running...&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Child: child is done. Exiting.&quot;</span></span></code></pre></div><p>在这个例子中，我们看到该子脚本是非常简单的。真正的操作通过父脚本完成。在父脚本中，子脚本被启动， 并被放置到后台运行。子脚本的进程 ID 记录在 pid 变量中，这个变量的值是 $! shell 参数的值，它总是 包含放到后台执行的最后一个任务的进程 ID 号。</p><p>父脚本继续，然后执行一个以子进程 PID 为参数的 wait 命令。这就导致父脚本暂停运行，直到子脚本退出， 意味着父脚本结束。</p><p>当执行后，父子脚本产生如下输出：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">async-parent</span></span>
<span class="line"><span style="color:#B392F0;">Parent:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starting...</span></span>
<span class="line"><span style="color:#B392F0;">Parent:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">launching</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">child</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">script...</span></span>
<span class="line"><span style="color:#B392F0;">Parent:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">child</span><span style="color:#E1E4E8;"> (PID= </span><span style="color:#79B8FF;">6741</span><span style="color:#E1E4E8;">) launched.</span></span>
<span class="line"><span style="color:#B392F0;">Parent:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">continuing...</span></span>
<span class="line"><span style="color:#B392F0;">Child:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">child</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">running...</span></span>
<span class="line"><span style="color:#B392F0;">Parent:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pausing</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">wait</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">child</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">finish...</span></span>
<span class="line"><span style="color:#B392F0;">Child:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">child</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">done.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Exiting.</span></span>
<span class="line"><span style="color:#B392F0;">Parent:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">child</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">finished.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Continuing...</span></span>
<span class="line"><span style="color:#B392F0;">Parent:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">parent</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">done.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Exiting.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">async-parent</span></span>
<span class="line"><span style="color:#6F42C1;">Parent:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starting...</span></span>
<span class="line"><span style="color:#6F42C1;">Parent:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">launching</span><span style="color:#24292E;"> </span><span style="color:#032F62;">child</span><span style="color:#24292E;"> </span><span style="color:#032F62;">script...</span></span>
<span class="line"><span style="color:#6F42C1;">Parent:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">child</span><span style="color:#24292E;"> (PID= </span><span style="color:#005CC5;">6741</span><span style="color:#24292E;">) launched.</span></span>
<span class="line"><span style="color:#6F42C1;">Parent:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">continuing...</span></span>
<span class="line"><span style="color:#6F42C1;">Child:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">child</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">running...</span></span>
<span class="line"><span style="color:#6F42C1;">Parent:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pausing</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">wait</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">child</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">finish...</span></span>
<span class="line"><span style="color:#6F42C1;">Child:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">child</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">done.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Exiting.</span></span>
<span class="line"><span style="color:#6F42C1;">Parent:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">child</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">finished.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Continuing...</span></span>
<span class="line"><span style="color:#6F42C1;">Parent:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">parent</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">done.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Exiting.</span></span></code></pre></div>`,11),e=[o];function c(t,r,i,y,E,F){return n(),a("div",null,e)}const C=s(p,[["render",c]]);export{d as __pageData,C as default};
