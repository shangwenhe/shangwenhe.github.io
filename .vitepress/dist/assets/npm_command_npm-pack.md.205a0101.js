import{_ as a,o as e,c as o,Q as l}from"./chunks/framework.681fc4ae.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"npm/command/npm-pack.md","filePath":"npm/command/npm-pack.md"}'),n={name:"npm/command/npm-pack.md"},s=l('<h2 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pack</span><span style="color:#E1E4E8;"> [[&lt;@scope&gt;/]</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">pkg</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">...] [--dry-run] [--json]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pack</span><span style="color:#24292E;"> [[&lt;@scope&gt;/]</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">pkg</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">...] [--dry-run] [--json]</span></span></code></pre></div><h2 id="configuration" tabindex="-1"><code>configuration</code> <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;`configuration`&quot;">​</a></h2><h2 id="dry-run" tabindex="-1"><code>dry-run</code> <a class="header-anchor" href="#dry-run" aria-label="Permalink to &quot;`dry-run`&quot;">​</a></h2><ul><li>Default: false</li><li>Type: Boolean</li></ul><p>表示您不希望 npm 进行任何更改，并且它应该只报告它会执行的操作。这可以传递到任何修改本地安装的命令中，例如<code>install</code>、<code>update</code>、<code>dedupe</code>、<code>uninstall</code>以及<code>pack</code>和<code>publish</code>。</p><p>注意：其他网络相关命令不支持这一点，例如<code>dist-tags</code>、<code>owner</code>等。</p><h2 id="json" tabindex="-1"><code>json</code> <a class="header-anchor" href="#json" aria-label="Permalink to &quot;`json`&quot;">​</a></h2><ul><li>Default: false</li><li>Type: Boolean</li></ul><p>是否输出JSON数据，而不是正常输出。</p><ul><li>它允许在<code>npm pkg set</code>将设置值保存到您的<code>package.json</code>.</li></ul><p>并非所有 npm 命令都支持。</p><h2 id="pack-destination" tabindex="-1"><code>pack-destination</code> <a class="header-anchor" href="#pack-destination" aria-label="Permalink to &quot;`pack-destination`&quot;">​</a></h2><ul><li>Default: &quot;.&quot;</li><li>Type: String</li></ul><p>将保存 tarball 的目录<code>npm pack</code>。</p><h2 id="workspace" tabindex="-1"><code>workspace</code> <a class="header-anchor" href="#workspace" aria-label="Permalink to &quot;`workspace`&quot;">​</a></h2><ul><li>默认：</li><li>类型：String（可设置多次）</li></ul><p>允许在当前项目的已配置工作区上下文中运行命令，同时通过仅运行此配置选项定义的工作区进行过滤。</p><p>配置的有效值为<code>workspace</code>：</p><ul><li>工作区名称</li><li>工作区目录的路径</li><li>父工作区目录的路径（将导致选择所有嵌套工作区）</li></ul><p>当设置该<code>npm init</code>命令时，可以将其设置为尚不存在的工作空间的文件夹，以创建该文件夹并将其设置为项目中的全新工作空间。</p><p>该值不会导出到子进程的环境中。</p><h2 id="workspaces" tabindex="-1"><code>workspaces</code> <a class="header-anchor" href="#workspaces" aria-label="Permalink to &quot;`workspaces`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p><strong>允许在所有</strong>已配置工作区的上下文中运行命令。</p><p>该值不会导出到子进程的环境中。</p><h2 id="描述" tabindex="-1">描述 <a class="header-anchor" href="#描述" aria-label="Permalink to &quot;描述&quot;">​</a></h2><p>对于任何可安装的内容（即包文件夹、tarball、tarball url、git url、name@tag、name@version、name 或作用域名称），此命令会将其提取到缓存，将 tarball 复制到当前工作目录为<code>&lt;name&gt;-&lt;version&gt;.tgz</code>，然后将文件名写入 stdout。</p><p>如果多次指定同一个包，则第二次将覆盖该文件。</p><p>如果未提供参数，则 npm 会打包当前包文件夹。</p>',30),t=[s];function c(p,r,i,d,u,h){return e(),o("div",null,t)}const g=a(n,[["render",c]]);export{k as __pageData,g as default};
