import{_ as e,o,c as a,Q as l}from"./chunks/framework.681fc4ae.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"npm/command/npm-ls.md","filePath":"npm/command/npm-ls.md"}'),s={name:"npm/command/npm-ls.md"},n=l('<h2 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls</span><span style="color:#E1E4E8;"> [[&lt;@scope&gt;/]</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">pkg</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> ...]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">aliases:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">list,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">la,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ll</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span><span style="color:#24292E;"> [[&lt;@scope&gt;/]</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">pkg</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> ...]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6F42C1;">aliases:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">la,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ll</span></span></code></pre></div><h2 id="描述" tabindex="-1">描述 <a class="header-anchor" href="#描述" aria-label="Permalink to &quot;描述&quot;">​</a></h2><p><code>--all</code>此命令将以树结构的形式将已安装的所有软件包版本以及指定的依赖项打印到标准输出。</p><p>注意：要“自下而上”地了解为什么给定包包含在树中，请使用<code>npm explain</code>。</p><p>位置参数是<code>name@version-range</code>标识符，它将结果限制为仅指定包的路径。请注意，嵌套包还将<em>显示</em>指定包的路径。例如，<code>npm ls promzard</code>在 npm 的源代码树中运行将显示：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm@7.24.2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/path/to/npm</span></span>\n<span class="line"><span style="color:#B392F0;">└─┬</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init-package-json@0.0.4</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">└──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">promzard@0.1.5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm@7.24.2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/path/to/npm</span></span>\n<span class="line"><span style="color:#6F42C1;">└─┬</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init-package-json@0.0.4</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">promzard@0.1.5</span></span></code></pre></div><p>它将打印出无关的、丢失的和无效的包。</p><p>如果项目为依赖项指定了 git url，这些依赖项将显示在 name@version 后面的括号中，以便用户更容易识别项目的潜在分支。</p><p>显示的树是逻辑依赖关系树，基于包依赖关系，而不是<code>node_modules</code>文件夹的物理布局。</p><p>当作为<code>ll</code>或运行时<code>la</code>，它默认显示扩展信息。</p><h2 id="note-design-changes-pending" tabindex="-1"><code>note-design-changes-pending</code> <a class="header-anchor" href="#note-design-changes-pending" aria-label="Permalink to &quot;`note-design-changes-pending`&quot;">​</a></h2><p>当 npm 创建一个天真地嵌套每个依赖项的文件夹时，该<code>npm ls</code>命令的输出和行为变得非常<em>有意义</em>。<code>node_modules</code>在这种情况下，磁盘上包的逻辑依赖图和物理树将大致相同。</p><p>随着 npm v3 中自动安装时依赖项重复数据删除的出现，<code>ls</code>输出被修改为将逻辑依赖关系图显示为树结构，因为这对大多数用户来说更有用。然而，如果不使用，很多时候<code>npm ls -l</code>就无法显示<em>软件包的实际安装位置！</em></p><p>随着 npm v7 自动安装的出现<code>peerDependencies</code>，这变得更加奇怪，因为<code>peerDependencies</code>逻辑上它们在依赖关系图中位于它们的依赖项“下方”，但物理上始终位于它们在磁盘上的位置或上方。</p><p>此外，自从 npm 有了<code>ls</code>命令（0.0.2 版本！）以来，依赖关系图作为一般规则已经变得更大了。因此，为了避免向终端转储过多的内容，<code>npm ls</code>现在仅显示<em>顶级</em>依赖项，除非<code>--all</code>提供。</p><p>目前正在对该命令的用例、意图、行为和输出进行彻底的重新检查。<code>npm ls</code>预计npm v8 中的默认人类可读输出至少会发生重大变化。</p><h2 id="configuration" tabindex="-1"><code>configuration</code> <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;`configuration`&quot;">​</a></h2><h2 id="all" tabindex="-1"><code>all</code> <a class="header-anchor" href="#all" aria-label="Permalink to &quot;`all`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>运行<code>npm outdated</code>和时<code>npm ls</code>，设置<code>--all</code>将显示所有过时或已安装的软件包，而不仅仅是当前项目直接依赖的软件包。</p><h2 id="json" tabindex="-1"><code>json</code> <a class="header-anchor" href="#json" aria-label="Permalink to &quot;`json`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>是否输出JSON数据，而不是正常输出。</p><ul><li>它允许在<code>npm pkg set</code>将设置值保存到您的<code>package.json</code>.</li></ul><p>并非所有 npm 命令都支持。</p><h2 id="long" tabindex="-1"><code>long</code> <a class="header-anchor" href="#long" aria-label="Permalink to &quot;`long`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>显示<code>ls</code>、<code>search</code>、 和中的扩展信息<code>help-search</code>。</p><h2 id="parseable" tabindex="-1"><code>parseable</code> <a class="header-anchor" href="#parseable" aria-label="Permalink to &quot;`parseable`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>写入标准输出的命令输出可解析的结果。对于<code>npm search</code>，这将是制表符分隔的表格格式。</p><h2 id="global" tabindex="-1"><code>global</code> <a class="header-anchor" href="#global" aria-label="Permalink to &quot;`global`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>在“全局”模式下运行，以便将包安装到该<code>prefix</code>文件夹而不是当前工作目录中。有关行为差异的更多信息，请参阅<a href="https://docs.npmjs.com/cli/v7/configuring-npm/folders" target="_blank" rel="noreferrer">文件夹。</a></p><ul><li>软件包将安装到该<code>{prefix}/lib/node_modules</code>文件夹中，而不是当前工作目录中。</li><li>bin 文件链接到<code>{prefix}/bin</code></li><li>手册页链接到<code>{prefix}/share/man</code></li></ul><h2 id="depth" tabindex="-1"><code>depth</code> <a class="header-anchor" href="#depth" aria-label="Permalink to &quot;`depth`&quot;">​</a></h2><ul><li>默认值：<code>Infinity</code>如果<code>--all</code>设置，否则<code>1</code></li><li>类型：空或数字</li></ul><p>递归包时的深度<code>npm ls</code>。</p><p>如果未设置，<code>npm ls</code>将仅显示根项目的直接依赖项。如果<code>--all</code>设置了，npm 将默认显示所有依赖项。</p><h2 id="omit" tabindex="-1"><code>omit</code> <a class="header-anchor" href="#omit" aria-label="Permalink to &quot;`omit`&quot;">​</a></h2><ul><li>默认值：如果<code>NODE_ENV</code>环境变量设置为“生产”，则为“dev”，否则为空。</li><li>类型：“dev”、“可选”或“peer”（可以设置多次）</li></ul><p>要从磁盘上的安装树中省略的依赖项类型。</p><p>请注意，这些依赖项<em>仍会被</em>解析并添加到<code>package-lock.json</code>或<code>npm-shrinkwrap.json</code>文件中。它们只是没有物理安装在磁盘上。</p><p>如果包类型同时出现在<code>--include</code>和<code>--omit</code>列表中，那么它将被包含在内。</p><p>如果生成的省略列表包含<code>&#39;dev&#39;</code>，则所有生命周期脚本的<code>NODE_ENV</code>环境变量将设置为。<code>&#39;production&#39;</code></p><h2 id="link" tabindex="-1"><code>link</code> <a class="header-anchor" href="#link" aria-label="Permalink to &quot;`link`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>与 一起使用<code>npm ls</code>，将输出限制为仅那些链接的包。</p><h2 id="package-lock-only" tabindex="-1"><code>package-lock-only</code> <a class="header-anchor" href="#package-lock-only" aria-label="Permalink to &quot;`package-lock-only`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>如果设置为 true，则当前操作将仅使用<code>package-lock.json</code>, 忽略<code>node_modules</code>.</p><p>这<code>update</code>意味着仅<code>package-lock.json</code>会更新，而不是检查<code>node_modules</code>和下载依赖项。</p><p>这意味着<code>list</code>输出将基于 描述的树<code>package-lock.json</code>，而不是 的内容<code>node_modules</code>。</p><h2 id="unicode" tabindex="-1"><code>unicode</code> <a class="header-anchor" href="#unicode" aria-label="Permalink to &quot;`unicode`&quot;">​</a></h2><ul><li><code>LC_ALL</code>默认值：在 Windows 上为 false，在具有 unicode 语言环境的 mac/unix 系统上为 true，由、<code>LC_CTYPE</code>或环境变量定义<code>LANG</code>。</li><li>类型：布尔值</li></ul><p>当设置为 true 时，npm 在树输出中使用 unicode 字符。当为 false 时，它使用 ascii 字符而不是 unicode 字形。</p><h2 id="workspace" tabindex="-1"><code>workspace</code> <a class="header-anchor" href="#workspace" aria-label="Permalink to &quot;`workspace`&quot;">​</a></h2><ul><li>默认：</li><li>类型：String（可设置多次）</li></ul><p>允许在当前项目的已配置工作区上下文中运行命令，同时通过仅运行此配置选项定义的工作区进行过滤。</p><p>配置的有效值为<code>workspace</code>：</p><ul><li>工作区名称</li><li>工作区目录的路径</li><li>父工作区目录的路径（将导致选择所有嵌套工作区）</li></ul><p>当设置该<code>npm init</code>命令时，可以将其设置为尚不存在的工作空间的文件夹，以创建该文件夹并将其设置为项目中的全新工作空间。</p><p>该值不会导出到子进程的环境中。</p><h2 id="workspaces" tabindex="-1"><code>workspaces</code> <a class="header-anchor" href="#workspaces" aria-label="Permalink to &quot;`workspaces`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p><strong>允许在所有</strong>已配置工作区的上下文中运行命令。</p><p>该值不会导出到子进程的环境中。</p>',68),c=[n];function p(d,i,t,r,h,u){return o(),a("div",null,c)}const k=e(s,[["render",p]]);export{g as __pageData,k as default};
