import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.681fc4ae.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"bash/archives/commands/xargs.md","filePath":"bash/archives/commands/xargs.md"}'),p={name:"bash/archives/commands/xargs.md"},l=n(`<h2 id="xargs" tabindex="-1">xargs <a class="header-anchor" href="#xargs" aria-label="Permalink to &quot;xargs&quot;">​</a></h2><p>xargs（英文全拼： eXtended ARGuments）是给命令传递参数的一个过滤器，也是组合多个命令的一个工具。</p><p>xargs 可以将管道或标准输入（stdin）数据转换成命令行参数，也能够从文件的输出中读取数据。</p><p>xargs 也可以将单行或多行文本输入转换为其他格式，例如多行变单行，单行变多行。</p><p>xargs 默认的命令是 echo，这意味着通过管道传递给 xargs 的输入将会包含换行和空白，不过通过 xargs 的处理，换行和空白将被空格取代。</p><p>xargs 是一个强有力的命令，它能够捕获一个命令的输出，然后传递给另外一个命令。</p><p>之所以能用到这个命令，关键是由于很多命令不支持|管道来传递参数，而日常工作中有有这个必要，所以就有了 xargs 命令，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">find /sbin -perm +700 |ls -l       #这个命令是错误的</span></span>
<span class="line"><span style="color:#e1e4e8;">find /sbin -perm +700 |xargs ls -l   #这样才是正确的</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">find /sbin -perm +700 |ls -l       #这个命令是错误的</span></span>
<span class="line"><span style="color:#24292e;">find /sbin -perm +700 |xargs ls -l   #这样才是正确的</span></span></code></pre></div><p>xargs 一般是和管道一起使用。</p><p><strong>命令格式：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">somecommand |xargs -item  command</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">somecommand |xargs -item  command</span></span></code></pre></div><p><strong>参数：</strong></p><ul><li>-a file 从文件中读入作为 stdin</li><li>-e flag ，注意有的时候可能会是-E，flag必须是一个以空格分隔的标志，当xargs分析到含有flag这个标志的时候就停止。</li><li>-p 当每次执行一个argument的时候询问一次用户。</li><li>-n num 后面加次数，表示命令在执行的时候一次用的argument的个数，默认是用所有的。</li><li>-t 表示先打印命令，然后再执行。</li><li>-i 或者是-I，这得看linux支持了，将xargs的每项名称，一般是一行一行赋值给 {}，可以用 {} 代替。</li><li>-r no-run-if-empty 当xargs的输入为空的时候则停止xargs，不用再去执行了。</li><li>-s num 命令行的最大字符数，指的是 xargs 后面那个命令的最大命令行字符数。</li><li>-L num 从标准输入一次读取 num 行送给 command 命令。</li><li>-l 同 -L。</li><li>-d delim 分隔符，默认的xargs分隔符是回车，argument的分隔符是空格，这里修改的是xargs的分隔符。</li><li>-x exit的意思，主要是配合-s使用。。</li><li>-P 修改最大的进程数，默认是1，为0时候为as many as it can ，这个例子我没有想到，应该平时都用不到的吧。</li></ul><h3 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h3><p>xargs 用作替换工具，读取输入数据重新格式化后输出。</p><p>定义一个测试文件，内有多行文本数据：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># cat test.txt</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">a b c d e f g</span></span>
<span class="line"><span style="color:#e1e4e8;">h i j k l m n</span></span>
<span class="line"><span style="color:#e1e4e8;">o p q</span></span>
<span class="line"><span style="color:#e1e4e8;">r s t</span></span>
<span class="line"><span style="color:#e1e4e8;">u v w x y z</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># cat test.txt</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">a b c d e f g</span></span>
<span class="line"><span style="color:#24292e;">h i j k l m n</span></span>
<span class="line"><span style="color:#24292e;">o p q</span></span>
<span class="line"><span style="color:#24292e;">r s t</span></span>
<span class="line"><span style="color:#24292e;">u v w x y z</span></span></code></pre></div><p>多行输入单行输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># cat test.txt | xargs</span></span>
<span class="line"><span style="color:#e1e4e8;">a b c d e f g h i j k l m n o p q r s t u v w x y z</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># cat test.txt | xargs</span></span>
<span class="line"><span style="color:#24292e;">a b c d e f g h i j k l m n o p q r s t u v w x y z</span></span></code></pre></div><p>-n 选项多行输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># cat test.txt | xargs -n3</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">a b c</span></span>
<span class="line"><span style="color:#e1e4e8;">d e f</span></span>
<span class="line"><span style="color:#e1e4e8;">g h i</span></span>
<span class="line"><span style="color:#e1e4e8;">j k l</span></span>
<span class="line"><span style="color:#e1e4e8;">m n o</span></span>
<span class="line"><span style="color:#e1e4e8;">p q r</span></span>
<span class="line"><span style="color:#e1e4e8;">s t u</span></span>
<span class="line"><span style="color:#e1e4e8;">v w x</span></span>
<span class="line"><span style="color:#e1e4e8;">y z</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># cat test.txt | xargs -n3</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">a b c</span></span>
<span class="line"><span style="color:#24292e;">d e f</span></span>
<span class="line"><span style="color:#24292e;">g h i</span></span>
<span class="line"><span style="color:#24292e;">j k l</span></span>
<span class="line"><span style="color:#24292e;">m n o</span></span>
<span class="line"><span style="color:#24292e;">p q r</span></span>
<span class="line"><span style="color:#24292e;">s t u</span></span>
<span class="line"><span style="color:#24292e;">v w x</span></span>
<span class="line"><span style="color:#24292e;">y z</span></span></code></pre></div><p>-d 选项可以自定义一个定界符：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># echo &quot;nameXnameXnameXname&quot; | xargs -dX</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">name name name name</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># echo &quot;nameXnameXnameXname&quot; | xargs -dX</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">name name name name</span></span></code></pre></div><p>结合 -n 选项使用：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># echo &quot;nameXnameXnameXname&quot; | xargs -dX -n2</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">name name</span></span>
<span class="line"><span style="color:#e1e4e8;">name name</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># echo &quot;nameXnameXnameXname&quot; | xargs -dX -n2</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">name name</span></span>
<span class="line"><span style="color:#24292e;">name name</span></span></code></pre></div><p>读取 stdin，将格式化后的参数传递给命令</p><p>假设一个命令为 sk.sh 和一个保存参数的文件 arg.txt：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">#!/bin/bash</span></span>
<span class="line"><span style="color:#e1e4e8;">#sk.sh命令内容，打印出所有参数。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">echo $*</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">#!/bin/bash</span></span>
<span class="line"><span style="color:#24292e;">#sk.sh命令内容，打印出所有参数。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">echo $*</span></span></code></pre></div><p>arg.txt文件内容：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># cat arg.txt</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">aaa</span></span>
<span class="line"><span style="color:#e1e4e8;">bbb</span></span>
<span class="line"><span style="color:#e1e4e8;">ccc</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># cat arg.txt</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">aaa</span></span>
<span class="line"><span style="color:#24292e;">bbb</span></span>
<span class="line"><span style="color:#24292e;">ccc</span></span></code></pre></div><p>xargs 的一个选项 -I，使用 -I 指定一个替换字符串 {}，这个字符串在 xargs 扩展时会被替换掉，当 -I 与 xargs 结合使用，每一个参数命令都会被执行一次：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># cat arg.txt | xargs -I {} ./sk.sh -p {} -l</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">-p aaa -l</span></span>
<span class="line"><span style="color:#e1e4e8;">-p bbb -l</span></span>
<span class="line"><span style="color:#e1e4e8;">-p ccc -l</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># cat arg.txt | xargs -I {} ./sk.sh -p {} -l</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">-p aaa -l</span></span>
<span class="line"><span style="color:#24292e;">-p bbb -l</span></span>
<span class="line"><span style="color:#24292e;">-p ccc -l</span></span></code></pre></div><p>复制所有图片文件到 /data/images 目录下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ls *.jpg | xargs -n1 -I {} cp {} /data/images</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ls *.jpg | xargs -n1 -I {} cp {} /data/images</span></span></code></pre></div><p>xargs 结合 find 使用</p><p>用 rm 删除太多的文件时候，可能得到一个错误信息：<strong>/bin/rm Argument list too long.</strong> 用 xargs 去避免这个问题：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">find . -type f -name &quot;*.log&quot; -print0 | xargs -0 rm -f</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">find . -type f -name &quot;*.log&quot; -print0 | xargs -0 rm -f</span></span></code></pre></div><p>xargs -0 将 \\0 作为定界符。</p><p>统计一个源代码目录中所有 php 文件的行数：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">find . -type f -name &quot;*.php&quot; -print0 | xargs -0 wc -l</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">find . -type f -name &quot;*.php&quot; -print0 | xargs -0 wc -l</span></span></code></pre></div><p>查找所有的 jpg 文件，并且压缩它们：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">find . -type f -name &quot;*.jpg&quot; -print | xargs tar -czvf images.tar.gz</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">find . -type f -name &quot;*.jpg&quot; -print | xargs tar -czvf images.tar.gz</span></span></code></pre></div><p>xargs 其他应用</p><p>假如你有一个文件包含了很多你希望下载的 URL，你能够使用 xargs下载所有链接：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># cat url-list.txt | xargs wget -c</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># cat url-list.txt | xargs wget -c</span></span></code></pre></div><h4 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">find .vitepress/dist -name &#39;*.html&#39; | xargs -p -I {} sh -c &quot;sed -i &#39;&#39; &#39;s/ inert //g&#39; {} &quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">find .vitepress/dist -name &#39;*.html&#39; | xargs -p -I {} sh -c &quot;sed -i &#39;&#39; &#39;s/ inert //g&#39; {} &quot;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">find . -type f  | xargs -I {} sed -i &#39;&#39; &#39;s/\\n^\\s*$\\n/\\r/g&#39; {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">find . -type f  | xargs -I {} sed -i &#39;&#39; &#39;s/\\n^\\s*$\\n/\\r/g&#39; {}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ls | xargs -I {} echo \\{text:\\&quot;{}\\&quot;, link:\\&quot;/npm/using/{}.html\\&quot;\\},</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ls | xargs -I {} echo \\{text:\\&quot;{}\\&quot;, link:\\&quot;/npm/using/{}.html\\&quot;\\},</span></span></code></pre></div>`,49),t=[l];function c(o,i,r,d,g,h){return a(),e("div",null,t)}const m=s(p,[["render",c]]);export{y as __pageData,m as default};
