import{_ as s,o as e,c as o,Q as a}from"./chunks/framework.681fc4ae.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"npm/using/Scripts.md","filePath":"npm/using/Scripts.md"}'),l={name:"npm/using/Scripts.md"},n=a('<h2 id="描述" tabindex="-1">描述 <a class="header-anchor" href="#描述" aria-label="Permalink to &quot;描述&quot;">​</a></h2><p><code>&quot;scripts&quot;</code>文件的属性支持<code>package.json</code>许多内置脚本及其预设生命周期事件以及任意脚本。这些都可以通过运行<code>npm run-script &lt;stage&gt;</code>或者<code>npm run &lt;stage&gt;</code>简短的方式来执行。<em>具有匹配名称的前置</em>和<em>后置</em>命令也将针对这些命令运行（例如<code>premyscript</code>、<code>myscript</code>、<code>postmyscript</code>）。依赖项中的脚本可以使用<code>npm explore &lt;pkg&gt; -- npm run &lt;stage&gt;</code>.</p><h2 id="pre-post-scripts" tabindex="-1"><code>pre--post-scripts</code> <a class="header-anchor" href="#pre-post-scripts" aria-label="Permalink to &quot;`pre--post-scripts`&quot;">​</a></h2><p><code>&quot;scripts&quot;</code>要为部分中定义的任何脚本创建“pre”或“post”脚本<code>package.json</code>，只需创建另一个<em>具有匹配名称的</em>脚本并将“pre”或“post”添加到它们的开头即可。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;precompress&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;{{ executes BEFORE the `compress` script }}&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;compress&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;{{ run command to compress files }}&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;postcompress&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;{{ executes AFTER `compress` script }}&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;precompress&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;{{ executes BEFORE the `compress` script }}&quot;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;compress&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;{{ run command to compress files }}&quot;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;postcompress&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;{{ executes AFTER `compress` script }}&quot;</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在此示例中<code>npm run compress</code>，将按照描述执行这些脚本。</p><h2 id="life-cycle-scripts" tabindex="-1"><code>life-cycle-scripts</code> <a class="header-anchor" href="#life-cycle-scripts" aria-label="Permalink to &quot;`life-cycle-scripts`&quot;">​</a></h2><p>有一些特殊的生命周期脚本仅在某些情况下发生。<code>pre&lt;event&gt;</code>这些脚本是在、<code>post&lt;event&gt;</code>、 和脚本之外发生的<code>&lt;event&gt;</code>。</p><ul><li><code>prepare</code>, <code>prepublish</code>, <code>prepublishOnly</code>, <code>prepack</code>,<code>postpack</code></li></ul><p><strong>prepare</strong>（自<code>npm@4.0.0</code>）</p><ul><li>在包装包装之前的任何时间运行，即包装期间<code>npm publish</code>和包装期间<code>npm pack</code></li><li>在打包之前运行</li><li>在发布包之前运行</li><li>在本地运行，<code>npm install</code>无需任何参数</li><li><code>prepublish</code>在之后但之前运行<code>prepublishOnly</code></li><li>注意：如果通过 git 安装的包包含<code>prepare</code>脚本，则在打包和安装包之前，将安装其<code>dependencies</code>和<code>devDependencies</code>，并运行准备脚本。</li><li>这些<code>npm@7</code>脚本在后台运行。要查看输出，请运行<code>--foreground-scripts</code>：</li></ul><p><strong>prepublish</strong>（已弃用）</p><ul><li>不在 期间运行，但在和<code>npm publish</code>期间运行。请参阅下文了解更多信息。<code>npm ci``npm install</code></li></ul><p><strong>prepublishOnly</strong></p><ul><li>在准备和打包包之前运行，仅在<code>npm publish</code>.</li></ul><p><strong>prepack</strong></p><ul><li>在打包 tarball 之前运行（在“ <code>npm pack</code>”、“ <code>npm publish</code>”以及安装 git 依赖项时）。</li><li>注意：“ <code>npm run pack</code>”与“ ”不同<code>npm pack</code>。“ <code>npm run pack</code>”是任意用户定义的脚本名称，其中“ <code>npm pack</code>”是 CLI 定义的命令。</li></ul><p><strong>postpack</strong></p><ul><li>在生成 tarball 之后但在将其移动到最终目的地之前运行（如果有的话，发布不会在本地保存 tarball）</li></ul><h2 id="prepare-and-prepublish" tabindex="-1"><code>prepare-and-prepublish</code> <a class="header-anchor" href="#prepare-and-prepublish" aria-label="Permalink to &quot;`prepare-and-prepublish`&quot;">​</a></h2><p><strong>弃用说明：预发布</strong></p><p>从 开始<code>npm@1.1.71</code>，npm CLI 已为和运行<code>prepublish</code>脚本，因为这是准备使用包的便捷方法（一些常见用例将在下面的部分中描述）。在实践中，它也被证明是<a href="https://github.com/npm/npm/issues/10074" target="_blank" rel="noreferrer">非常令人困惑的</a>。从 开始，引入了一个新事件 ，该事件保留了现有的行为。添加了一个<em>新</em>事件作为过渡策略，以允许用户避免现有 npm 版本的令人困惑的行为，并且只运行（例如，最后一次运行测试以确保它们处于良好状态）。<code>npm publish``npm install``npm@4.0.0``prepare``prepublishOnly``npm publish</code></p><p>请参阅<a href="https://github.com/npm/npm/issues/10074%E4%BA%86%E8%A7%A3%E6%AD%A4%E6%9B%B4%E6%94%B9%E7%9A%84%E6%9B%B4%E8%AF%A6%E7%BB%86%E7%9A%84%E7%90%86%E7%94%B1%EF%BC%8C%E5%B9%B6%E8%BF%9B%E4%B8%80%E6%AD%A5%E9%98%85%E8%AF%BB%E3%80%82" target="_blank" rel="noreferrer">https://github.com/npm/npm/issues/10074了解此更改的更详细的理由，并进一步阅读。</a></p><p><strong>用例</strong></p><p>如果您需要在使用包之前以不依赖于目标系统的操作系统或体系结构的方式对其执行操作，请使用脚本<code>prepublish</code>。这包括以下任务：</p><ul><li>将 CoffeeScript 源代码编译为 JavaScript。</li><li>创建 JavaScript 源代码的精简版本。</li><li>获取您的包将使用的远程资源。</li></ul><p>一次性完成这些事情的优点<code>prepublish</code>是它们可以在一个地方一次性完成，从而降低了复杂性和可变性。此外，这意味着：</p><ul><li>您可以将<code>coffee-script</code>其作为依赖<code>devDependency</code>，因此您的用户不需要安装它。</li><li>您不需要在包中包含缩小器，从而为用户减小大小。</li><li>您不需要依赖您的用户在目标计算机上拥有<code>curl</code>或或其他系统工具。<code>wget</code></li></ul><h2 id="life-cycle-operation-order" tabindex="-1"><code>life-cycle-operation-order</code> <a class="header-anchor" href="#life-cycle-operation-order" aria-label="Permalink to &quot;`life-cycle-operation-order`&quot;">​</a></h2><h2 id="npm-cache-add" tabindex="-1"><code>npm cache add</code> <a class="header-anchor" href="#npm-cache-add" aria-label="Permalink to &quot;`npm cache add`&quot;">​</a></h2><ul><li><code>prepare</code></li></ul><h2 id="npm-ci" tabindex="-1"><code>npm ci</code> <a class="header-anchor" href="#npm-ci" aria-label="Permalink to &quot;`npm ci`&quot;">​</a></h2><ul><li><code>preinstall</code></li><li><code>install</code></li><li><code>postinstall</code></li><li><code>prepublish</code></li><li><code>preprepare</code></li><li><code>prepare</code></li><li><code>postprepare</code></li></ul><p>这些都是在模块实际安装到 后<code>node_modules</code>按顺序运行的，中间没有发生任何内部操作</p><h2 id="npm-diff" tabindex="-1"><code>npm diff</code> <a class="header-anchor" href="#npm-diff" aria-label="Permalink to &quot;`npm diff`&quot;">​</a></h2><ul><li><code>prepare</code></li></ul><h2 id="npm-install" tabindex="-1"><code>npm install</code> <a class="header-anchor" href="#npm-install" aria-label="Permalink to &quot;`npm install`&quot;">​</a></h2><p>当你跑步时这些也会运行<code>npm install -g &lt;pkg-name&gt;</code></p><ul><li><code>preinstall</code></li><li><code>install</code></li><li><code>postinstall</code></li><li><code>prepublish</code></li><li><code>preprepare</code></li><li><code>prepare</code></li><li><code>postprepare</code></li></ul><p>如果你的包的根目录中有一个<code>binding.gyp</code>文件，并且你没有定义自己的文件<code>install</code>或<code>preinstall</code>脚本，npm将默认<code>install</code>使用node-gyp进行编译的命令通过<code>node-gyp rebuild</code></p><p>这些是从脚本运行的<code>&lt;pkg-name&gt;</code></p><h2 id="npm-pack" tabindex="-1"><code>npm pack</code> <a class="header-anchor" href="#npm-pack" aria-label="Permalink to &quot;`npm pack`&quot;">​</a></h2><ul><li><code>prepack</code></li><li><code>prepare</code></li><li><code>postpack</code></li></ul><h2 id="npm-publish" tabindex="-1"><code>npm publish</code> <a class="header-anchor" href="#npm-publish" aria-label="Permalink to &quot;`npm publish`&quot;">​</a></h2><ul><li><code>prepublishOnly</code></li><li><code>prepack</code></li><li><code>prepare</code></li><li><code>postpack</code></li><li><code>publish</code></li><li><code>postpublish</code></li></ul><p><code>prepare</code>期间不会运行`--dry-run</p><h2 id="npm-rebuild" tabindex="-1"><code>npm rebuild</code> <a class="header-anchor" href="#npm-rebuild" aria-label="Permalink to &quot;`npm rebuild`&quot;">​</a></h2><ul><li><code>preinstall</code></li><li><code>install</code></li><li><code>postinstall</code></li><li><code>prepare</code></li></ul><p><code>prepare</code>仅当当前目录是符号链接（例如带有链接的包）时才运行</p><h2 id="npm-restart" tabindex="-1"><code>npm restart</code> <a class="header-anchor" href="#npm-restart" aria-label="Permalink to &quot;`npm restart`&quot;">​</a></h2><p>如果<code>restart</code>定义了脚本，则运行这些事件，否则，如果存在，<code>stop</code>则<code>start</code>运行这些事件，包括它们的<code>pre</code>和<code>post</code>迭代）</p><ul><li><code>prerestart</code></li><li><code>restart</code></li><li><code>postrestart</code></li></ul><h2 id="npm-run" tabindex="-1"><code>npm run </code> <a class="header-anchor" href="#npm-run" aria-label="Permalink to &quot;`npm run `&quot;">​</a></h2><ul><li><code>pre&lt;user-defined&gt;</code></li><li><code>&lt;user-defined&gt;</code></li><li><code>post&lt;user-defined&gt;</code></li></ul><h2 id="npm-start" tabindex="-1"><code>npm start</code> <a class="header-anchor" href="#npm-start" aria-label="Permalink to &quot;`npm start`&quot;">​</a></h2><ul><li><code>prestart</code></li><li><code>start</code></li><li><code>poststart</code></li></ul><p>如果你的包的根目录中有一个<code>server.js</code>文件，那么 npm 将默认命令<code>start</code>为<code>node server.js</code>. 在这种情况下仍然会运行<code>prestart</code>。<code>poststart</code></p><h2 id="npm-stop" tabindex="-1"><code>npm stop</code> <a class="header-anchor" href="#npm-stop" aria-label="Permalink to &quot;`npm stop`&quot;">​</a></h2><ul><li><code>prestop</code></li><li><code>stop</code></li><li><code>poststop</code></li></ul><h2 id="npm-test" tabindex="-1"><code>npm test</code> <a class="header-anchor" href="#npm-test" aria-label="Permalink to &quot;`npm test`&quot;">​</a></h2><ul><li><code>pretest</code></li><li><code>test</code></li><li><code>posttest</code></li></ul><h2 id="npm-uninstall关于缺少脚本的说明" tabindex="-1"><code>npm uninstall</code>关于缺少脚本的说明 <a class="header-anchor" href="#npm-uninstall关于缺少脚本的说明" aria-label="Permalink to &quot;`npm uninstall`关于缺少脚本的说明&quot;">​</a></h2><p>虽然 npm v6 有<code>uninstall</code>生命周期脚本，但 npm v7 没有。删除包的原因可能有多种，并且目前没有明确的方法可以为脚本提供足够的上下文以使其有用。</p><p>删除软件包的原因包括：</p><ul><li>用户直接卸载了这个包</li><li>用户卸载了依赖包，因此正在卸载该依赖项</li><li>用户卸载了依赖包，但另一个包也依赖于该版本</li><li>该版本已与另一个版本合并为副本</li><li>ETC。</li></ul><p>由于缺乏必要的上下文，<code>uninstall</code>生命周期脚本未实现并且无法运行。</p><h2 id="user" tabindex="-1"><code>user</code> <a class="header-anchor" href="#user" aria-label="Permalink to &quot;`user`&quot;">​</a></h2><p>当 npm 以 root 身份运行时，脚本始终使用工作目录所有者的有效 uid 和 gid 运行。</p><h2 id="environment" tabindex="-1"><code>environment</code> <a class="header-anchor" href="#environment" aria-label="Permalink to &quot;`environment`&quot;">​</a></h2><p>包脚本在一个环境中运行，其中提供了有关 npm 设置和进程当前状态的许多信息。</p><h2 id="path" tabindex="-1"><code>path</code> <a class="header-anchor" href="#path" aria-label="Permalink to &quot;`path`&quot;">​</a></h2><p>如果您依赖于定义可执行脚本的模块（例如测试套件），那么这些可执行文件将被添加到<code>PATH</code>执行脚本中。所以，如果你的 package.json 有这个：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;dependencies&quot;</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;bar&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0.1.x&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;start&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;bar ./test&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;dependencies&quot;</span><span style="color:#24292E;">: {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;bar&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;0.1.x&quot;</span></span>\n<span class="line"><span style="color:#24292E;">  },</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;start&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;bar ./test&quot;</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后您可以运行<code>npm start</code>来执行该<code>bar</code>脚本，该脚本将导出到<code>node_modules/.bin</code>上的目录中<code>npm install</code>。</p><h2 id="packagejson-vars" tabindex="-1"><code>packagejson-vars</code> <a class="header-anchor" href="#packagejson-vars" aria-label="Permalink to &quot;`packagejson-vars`&quot;">​</a></h2><p>package.json 字段附加到<code>npm_package_</code>前缀上。因此，例如，如果您<code>{&quot;name&quot;:&quot;foo&quot;, &quot;version&quot;:&quot;1.2.5&quot;}</code>的 package.json 文件中有，那么您的包脚本会将<code>npm_package_name</code>环境变量设置为“foo”，并将环境变量设置<code>npm_package_version</code>为“1.2.5”。您可以在代码中使用<code>p<wbr>rocess.env.npm_package_name</code>和访问这些变量<code>p<wbr>rocess.env.npm_package_version</code>，对于其他字段，依此类推。</p><p><code>package-json.md</code>有关包配置的更多信息，请参阅参考资料。</p><h2 id="current-lifecycle-event" tabindex="-1"><code>current-lifecycle-event</code> <a class="header-anchor" href="#current-lifecycle-event" aria-label="Permalink to &quot;`current-lifecycle-event`&quot;">​</a></h2><p>最后，<code>npm_lifecycle_event</code>环境变量设置为正在执行的循环的哪个阶段。因此，您可以将单个脚本用于流程的不同部分，该脚本根据当前发生的情况进行切换。</p><p>对象按照这种格式进行扁平化，因此如果您<code>{&quot;scripts&quot;:{&quot;install&quot;:&quot;foo.js&quot;}}</code>的 package.json 中有这样的内容，那么您会在脚本中看到以下内容：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">p<wbr>rocess.env.npm_package_scripts_install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;foo.js&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">p<wbr>rocess.env.npm_package_scripts_install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;foo.js&quot;</span></span></code></pre></div><h2 id="examples" tabindex="-1"><code>examples</code> <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;`examples`&quot;">​</a></h2><p>例如，如果您的 package.json 包含以下内容：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;install&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;scripts/install.js&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;postinstall&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;scripts/install.js&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;uninstall&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;scripts/uninstall.js&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;install&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;scripts/install.js&quot;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;postinstall&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;scripts/install.js&quot;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;uninstall&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;scripts/uninstall.js&quot;</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>then<code>scripts/install.js</code>将在生命周期的安装和安装后阶段被调用，并且<code>scripts/uninstall.js</code>将在卸载包时被调用。由于<code>scripts/install.js</code>正在运行两个不同的阶段，因此在这种情况下查看<code>npm_lifecycle_event</code>环境变量是明智的。</p><p>如果你想运行 make 命令，你可以这样做。这工作得很好：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;preinstall&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./configure&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;install&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;make &amp;&amp; make install&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;test&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;make test&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;preinstall&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./configure&quot;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;install&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;make &amp;&amp; make install&quot;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;test&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;make test&quot;</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="exiting" tabindex="-1"><code>exiting</code> <a class="header-anchor" href="#exiting" aria-label="Permalink to &quot;`exiting`&quot;">​</a></h2><p>通过将该行作为脚本参数传递给 来运行脚本<code>sh</code>。</p><p>如果脚本以 0 以外的代码退出，那么这将中止该进程。</p><p>请注意，这些脚本文件不必是 Node.js 甚至 JavaScript 程序。它们只需是某种可执行文件即可。</p><h2 id="best-practices" tabindex="-1"><code>best-practices</code> <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;`best-practices`&quot;">​</a></h2><ul><li><em>除非您确实</em>这么想，否则不要以非零错误代码退出。除了卸载脚本之外，这将导致 npm 操作失败，并可能被回滚。如果故障很小或者只会阻止某些可选功能，那么最好只打印一条警告并成功退出。</li><li>尽量不要使用脚本来做 npm 能为你做的事情。通读<code>package.json</code>以了解您可以通过简单地适当描述您的包来指定和启用的所有内容。一般来说，这将导致更稳健和一致的状态。</li><li>检查环境以确定将东西放在哪里。例如，如果<code>npm_config_binroot</code>环境变量设置为<code>/home/user/bin</code>，则不要尝试将可执行文件安装到<code>/usr/local/bin</code>。用户这样设置可能是有原因的。</li><li>不要在脚本命令前加上“sudo”前缀。如果由于某种原因需要 root 权限，那么它将因该错误而失败，并且用户将 sudo 相关的 npm 命令。</li><li>不要使用<code>install</code>. 使用<code>.gyp</code>文件进行编译以及<code>prepublish</code>其他任何操作。您几乎不需要显式设置预安装或安装脚本。如果您正在这样做，请考虑是否还有其他选择。<code>install</code>或脚本的唯一有效用途<code>preinstall</code>是编译，必须在目标体系结构上完成。</li></ul>',93),p=[n];function c(t,r,i,d,u,E){return e(),o("div",null,p)}const m=s(l,[["render",c]]);export{y as __pageData,m as default};
