import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.681fc4ae.js";const u=JSON.parse('{"title":"Location 对象，URL 对象，URLSearchParams 对象","description":"","frontmatter":{},"headers":[],"relativePath":"js/bom/location.md","filePath":"js/bom/location.md"}'),o={name:"js/bom/location.md"},l=p(`<h1 id="location-对象-url-对象-urlsearchparams-对象" tabindex="-1">Location 对象，URL 对象，URLSearchParams 对象 <a class="header-anchor" href="#location-对象-url-对象-urlsearchparams-对象" aria-label="Permalink to &quot;Location 对象，URL 对象，URLSearchParams 对象&quot;">​</a></h1><p>URL 是互联网的基础设施之一。浏览器提供了一些原生对象，用来管理 URL。</p><h2 id="location-对象" tabindex="-1">Location 对象 <a class="header-anchor" href="#location-对象" aria-label="Permalink to &quot;Location 对象&quot;">​</a></h2><p><code>Location</code>对象是浏览器提供的原生对象，提供 URL 相关的信息和操作方法。通过<code>window.location</code>和<code>document.location</code>属性，可以拿到这个对象。</p><h3 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h3><p><code>Location</code>对象提供以下属性。</p><ul><li><code>Location.href</code>：整个 URL。</li><li><code>Location.protocol</code>：当前 URL 的协议，包括冒号（<code>:</code>）。</li><li><code>Location.host</code>：主机。如果端口不是协议默认的<code>80</code>和<code>433</code>，则还会包括冒号（<code>:</code>）和端口。</li><li><code>Location.hostname</code>：主机名，不包括端口。</li><li><code>Location.port</code>：端口号。</li><li><code>Location.pathname</code>：URL 的路径部分，从根路径<code>/</code>开始。</li><li><code>Location.search</code>：查询字符串部分，从问号<code>?</code>开始。</li><li><code>Location.hash</code>：片段字符串部分，从<code>#</code>开始。</li><li><code>Location.username</code>：域名前面的用户名。</li><li><code>Location.password</code>：域名前面的密码。</li><li><code>Location.origin</code>：URL 的协议、主机名和端口。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 当前网址为</span></span>
<span class="line"><span style="color:#6A737D;">// http://user:passwd@www.example.com:4097/path/a.html?x=111#part1</span></span>
<span class="line"><span style="color:#E1E4E8;">document.location.href</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http://user:passwd@www.example.com:4097/path/a.html?x=111#part1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">document.location.protocol</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http:&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">document.location.host</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;www.example.com:4097&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">document.location.hostname</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;www.example.com&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">document.location.port</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;4097&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">document.location.pathname</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;/path/a.html&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">document.location.search</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;?x=111&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">document.location.hash</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;#part1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">document.location.username</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;user&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">document.location.password</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;passwd&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">document.location.origin</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http://user:passwd@www.example.com:4097&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 当前网址为</span></span>
<span class="line"><span style="color:#6A737D;">// http://user:passwd@www.example.com:4097/path/a.html?x=111#part1</span></span>
<span class="line"><span style="color:#24292E;">document.location.href</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http://user:passwd@www.example.com:4097/path/a.html?x=111#part1&quot;</span></span>
<span class="line"><span style="color:#24292E;">document.location.protocol</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http:&quot;</span></span>
<span class="line"><span style="color:#24292E;">document.location.host</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;www.example.com:4097&quot;</span></span>
<span class="line"><span style="color:#24292E;">document.location.hostname</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;www.example.com&quot;</span></span>
<span class="line"><span style="color:#24292E;">document.location.port</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;4097&quot;</span></span>
<span class="line"><span style="color:#24292E;">document.location.pathname</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;/path/a.html&quot;</span></span>
<span class="line"><span style="color:#24292E;">document.location.search</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;?x=111&quot;</span></span>
<span class="line"><span style="color:#24292E;">document.location.hash</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;#part1&quot;</span></span>
<span class="line"><span style="color:#24292E;">document.location.username</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;user&quot;</span></span>
<span class="line"><span style="color:#24292E;">document.location.password</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;passwd&quot;</span></span>
<span class="line"><span style="color:#24292E;">document.location.origin</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http://user:passwd@www.example.com:4097&quot;</span></span></code></pre></div><p>这些属性里面，只有<code>origin</code>属性是只读的，其他属性都可写。</p><p>注意，如果对<code>Location.href</code>写入新的 URL 地址，浏览器会立刻跳转到这个新地址。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 跳转到新网址</span></span>
<span class="line"><span style="color:#E1E4E8;">document.location.href </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://www.example.com&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 跳转到新网址</span></span>
<span class="line"><span style="color:#24292E;">document.location.href </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://www.example.com&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>这个特性常常用于让网页自动滚动到新的锚点。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">document.location.href </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;#top&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#E1E4E8;">document.location.hash </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;#top&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">document.location.href </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;#top&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#24292E;">document.location.hash </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;#top&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>直接改写<code>location</code>，相当于写入<code>href</code>属性。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">document.location </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://www.example.com&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#E1E4E8;">document.location.href </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://www.example.com&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">document.location </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://www.example.com&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#24292E;">document.location.href </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://www.example.com&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>另外，<code>Location.href</code>属性是浏览器唯一允许跨域写入的属性，即非同源的窗口可以改写另一个窗口（比如子窗口与父窗口）的<code>Location.href</code>属性，导致后者的网址跳转。<code>Location</code>的其他属性都不允许跨域写入。</p><h3 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h3><p><strong>（1）Location.assign()</strong></p><p><code>assign</code>方法接受一个 URL 字符串作为参数，使得浏览器立刻跳转到新的 URL。如果参数不是有效的 URL 字符串，则会报错。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 跳转到新的网址</span></span>
<span class="line"><span style="color:#E1E4E8;">document.location.</span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://www.example.com&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 跳转到新的网址</span></span>
<span class="line"><span style="color:#24292E;">document.location.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http://www.example.com&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p><strong>（2）Location.replace()</strong></p><p><code>replace</code>方法接受一个 URL 字符串作为参数，使得浏览器立刻跳转到新的 URL。如果参数不是有效的 URL 字符串，则会报错。</p><p>它与<code>assign</code>方法的差异在于，<code>replace</code>会在浏览器的浏览历史<code>History</code>里面删除当前网址，也就是说，一旦使用了该方法，后退按钮就无法回到当前网页了，相当于在浏览历史里面，使用新的 URL 替换了老的 URL。它的一个应用是，当脚本发现当前是移动设备时，就立刻跳转到移动版网页。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 跳转到新的网址</span></span>
<span class="line"><span style="color:#E1E4E8;">document.location.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://www.example.com&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 跳转到新的网址</span></span>
<span class="line"><span style="color:#24292E;">document.location.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http://www.example.com&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p><strong>（3）Location.reload()</strong></p><p><code>reload</code>方法使得浏览器重新加载当前网址，相当于按下浏览器的刷新按钮。</p><p>它接受一个布尔值作为参数。如果参数为<code>true</code>，浏览器将向服务器重新请求这个网页，并且重新加载后，网页将滚动到头部（即<code>scrollTop === 0</code>）。如果参数是<code>false</code>或为空，浏览器将从本地缓存重新加载该网页，并且重新加载后，网页的视口位置是重新加载前的位置。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 向服务器重新请求当前网址</span></span>
<span class="line"><span style="color:#E1E4E8;">window.location.</span><span style="color:#B392F0;">reload</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 向服务器重新请求当前网址</span></span>
<span class="line"><span style="color:#24292E;">window.location.</span><span style="color:#6F42C1;">reload</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span></code></pre></div><p><strong>（4）Location.toString()</strong></p><p><code>toString</code>方法返回整个 URL 字符串，相当于读取<code>Location.href</code>属性。</p><h2 id="url-的编码和解码" tabindex="-1">URL 的编码和解码 <a class="header-anchor" href="#url-的编码和解码" aria-label="Permalink to &quot;URL 的编码和解码&quot;">​</a></h2><p>网页的 URL 只能包含合法的字符。合法字符分成两类。</p><ul><li>URL 元字符：分号（<code>;</code>），逗号（<code>,</code>），斜杠（<code>/</code>），问号（<code>?</code>），冒号（<code>:</code>），at（<code>@</code>），<code>&amp;</code>，等号（<code>=</code>），加号（<code>+</code>），美元符号（<code>$</code>），井号（<code>#</code>）</li><li>语义字符：<code>a-z</code>，<code>A-Z</code>，<code>0-9</code>，连词号（<code>-</code>），下划线（<code>_</code>），点（<code>.</code>），感叹号（<code>!</code>），波浪线（<code>~</code>），星号（<code>*</code>），单引号（<code>&#39;</code>），圆括号（<code>()</code>）</li></ul><p>除了以上字符，其他字符出现在 URL 之中都必须转义，规则是根据操作系统的默认编码，将每个字节转为百分号（<code>%</code>）加上两个大写的十六进制字母。</p><p>比如，UTF-8 的操作系统上，<code>http://www.example.com/q=春节</code>这个 URL 之中，汉字“春节”不是 URL 的合法字符，所以被浏览器自动转成<code>http://www.example.com/q=%E6%98%A5%E8%8A%82</code>。其中，“春”转成了<code>%E6%98%A5</code>，“节”转成了<code>%E8%8A%82</code>。这是因为“春”和“节”的 UTF-8 编码分别是<code>E6 98 A5</code>和<code>E8 8A 82</code>，将每个字节前面加上百分号，就构成了 URL 编码。</p><p>JavaScript 提供四个 URL 的编码/解码方法。</p><ul><li><code>encodeURI()</code></li><li><code>encodeURIComponent()</code></li><li><code>decodeURI()</code></li><li><code>decodeURIComponent()</code></li></ul><h3 id="encodeuri" tabindex="-1">encodeURI() <a class="header-anchor" href="#encodeuri" aria-label="Permalink to &quot;encodeURI()&quot;">​</a></h3><p><code>encodeURI()</code>方法用于转码整个 URL。它的参数是一个字符串，代表整个 URL。它会将元字符和语义字符之外的字符，都进行转义。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">encodeURI</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://www.example.com/q=春节&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http://www.example.com/q=%E6%98%A5%E8%8A%82&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">encodeURI</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http://www.example.com/q=春节&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http://www.example.com/q=%E6%98%A5%E8%8A%82&quot;</span></span></code></pre></div><h3 id="encodeuricomponent" tabindex="-1">encodeURIComponent() <a class="header-anchor" href="#encodeuricomponent" aria-label="Permalink to &quot;encodeURIComponent()&quot;">​</a></h3><p><code>encodeURIComponent()</code>方法用于转码 URL 的组成部分，会转码除了语义字符之外的所有字符，即元字符也会被转码。所以，它不能用于转码整个 URL。它接受一个参数，就是 URL 的片段。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">encodeURIComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;春节&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;%E6%98%A5%E8%8A%82&quot;</span></span>
<span class="line"><span style="color:#B392F0;">encodeURIComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://www.example.com/q=春节&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http%3A%2F%2Fwww.example.com%2Fq%3D%E6%98%A5%E8%8A%82&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">encodeURIComponent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;春节&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;%E6%98%A5%E8%8A%82&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">encodeURIComponent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http://www.example.com/q=春节&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http%3A%2F%2Fwww.example.com%2Fq%3D%E6%98%A5%E8%8A%82&quot;</span></span></code></pre></div><p>上面代码中，<code>encodeURIComponent()</code>会连 URL 元字符一起转义，所以如果转码整个 URL 就会出错。</p><h3 id="decodeuri" tabindex="-1">decodeURI() <a class="header-anchor" href="#decodeuri" aria-label="Permalink to &quot;decodeURI()&quot;">​</a></h3><p><code>decodeURI()</code>方法用于整个 URL 的解码。它是<code>encodeURI()</code>方法的逆运算。它接受一个参数，就是转码后的 URL。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">decodeURI</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://www.example.com/q=%E6%98%A5%E8%8A%82&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http://www.example.com/q=春节&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">decodeURI</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http://www.example.com/q=%E6%98%A5%E8%8A%82&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http://www.example.com/q=春节&quot;</span></span></code></pre></div><h3 id="decodeuricomponent" tabindex="-1">decodeURIComponent() <a class="header-anchor" href="#decodeuricomponent" aria-label="Permalink to &quot;decodeURIComponent()&quot;">​</a></h3><p><code>decodeURIComponent()</code>用于URL 片段的解码。它是<code>encodeURIComponent()</code>方法的逆运算。它接受一个参数，就是转码后的 URL 片段。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">decodeURIComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;%E6%98%A5%E8%8A%82&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;春节&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">decodeURIComponent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;%E6%98%A5%E8%8A%82&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;春节&quot;</span></span></code></pre></div><h2 id="url-接口" tabindex="-1">URL 接口 <a class="header-anchor" href="#url-接口" aria-label="Permalink to &quot;URL 接口&quot;">​</a></h2><p>浏览器原生提供<code>URL()</code>接口，它是一个构造函数，用来构造、解析和编码 URL。一般情况下，通过<code>window.URL</code>可以拿到这个构造函数。</p><h3 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h3><p><code>URL()</code>作为构造函数，可以生成 URL 实例。它接受一个表示 URL 的字符串作为参数。如果参数不是合法的 URL，会报错。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://www.example.com/index.html&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">url.href</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http://www.example.com/index.html&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http://www.example.com/index.html&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">url.href</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http://www.example.com/index.html&quot;</span></span></code></pre></div><p>上面示例生成了一个 URL 实例，用来代表指定的网址。</p><p>除了字符串，<code>URL()</code>的参数也可以是另一个 URL 实例。这时，<code>URL()</code>会自动读取该实例的<code>href</code>属性，作为实际参数。</p><p>如果 URL 字符串是一个相对路径，那么需要表示绝对路径的第二个参数，作为计算基准。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> url1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;index.html&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;http://example.com&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">url1.href</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http://example.com/index.html&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> url2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;page2.html&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;http://example.com/page1.html&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">url2.href</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http://example.com/page2.html&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> url3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;..&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;http://example.com/a/b.html&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">url3.href</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http://example.com/&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> url1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;index.html&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;http://example.com&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">url1.href</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http://example.com/index.html&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> url2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;page2.html&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;http://example.com/page1.html&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">url2.href</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http://example.com/page2.html&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> url3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;..&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;http://example.com/a/b.html&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">url3.href</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http://example.com/&quot;</span></span></code></pre></div><p>上面代码中，返回的 URL 实例的路径都是在第二个参数的基础上，切换到第一个参数得到的。最后一个例子里面，第一个参数是<code>..</code>，表示上层路径。</p><h3 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h3><p>URL 实例的属性与<code>Location</code>对象的属性基本一致，返回当前 URL 的信息。</p><ul><li>URL.href：返回整个 URL</li><li>URL.protocol：返回协议，以冒号<code>:</code>结尾</li><li>URL.hostname：返回域名</li><li>URL.host：返回域名与端口，包含<code>:</code>号，默认的80和443端口会省略</li><li>URL.port：返回端口</li><li>URL.origin：返回协议、域名和端口</li><li>URL.pathname：返回路径，以斜杠<code>/</code>开头</li><li>URL.search：返回查询字符串，以问号<code>?</code>开头</li><li>URL.searchParams：返回一个<code>URLSearchParams</code>实例，该属性是<code>Location</code>对象没有的</li><li>URL.hash：返回片段识别符，以井号<code>#</code>开头</li><li>URL.password：返回域名前面的密码</li><li>URL.username：返回域名前面的用户名</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://user:passwd@www.example.com:4097/path/a.html?x=111#part1&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">url.href</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http://user:passwd@www.example.com:4097/path/a.html?x=111#part1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">url.protocol</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http:&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">url.hostname</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;www.example.com&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">url.host</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;www.example.com:4097&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">url.port</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;4097&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">url.origin</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http://www.example.com:4097&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">url.pathname</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;/path/a.html&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">url.search</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;?x=111&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">url.searchParams</span></span>
<span class="line"><span style="color:#6A737D;">// URLSearchParams {}</span></span>
<span class="line"><span style="color:#E1E4E8;">url.hash</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;#part1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">url.password</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;passwd&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">url.username</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;user&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http://user:passwd@www.example.com:4097/path/a.html?x=111#part1&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">url.href</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http://user:passwd@www.example.com:4097/path/a.html?x=111#part1&quot;</span></span>
<span class="line"><span style="color:#24292E;">url.protocol</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http:&quot;</span></span>
<span class="line"><span style="color:#24292E;">url.hostname</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;www.example.com&quot;</span></span>
<span class="line"><span style="color:#24292E;">url.host</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;www.example.com:4097&quot;</span></span>
<span class="line"><span style="color:#24292E;">url.port</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;4097&quot;</span></span>
<span class="line"><span style="color:#24292E;">url.origin</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;http://www.example.com:4097&quot;</span></span>
<span class="line"><span style="color:#24292E;">url.pathname</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;/path/a.html&quot;</span></span>
<span class="line"><span style="color:#24292E;">url.search</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;?x=111&quot;</span></span>
<span class="line"><span style="color:#24292E;">url.searchParams</span></span>
<span class="line"><span style="color:#6A737D;">// URLSearchParams {}</span></span>
<span class="line"><span style="color:#24292E;">url.hash</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;#part1&quot;</span></span>
<span class="line"><span style="color:#24292E;">url.password</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;passwd&quot;</span></span>
<span class="line"><span style="color:#24292E;">url.username</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;user&quot;</span></span></code></pre></div><p>这些属性里面，只有<code>origin</code>属性是只读的，其他属性都可写，并且会立即生效。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://example.com/index.html#part1&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">url.pathname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;index2.html&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">url.href </span><span style="color:#6A737D;">// &quot;http://example.com/index2.html#part1&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">url.hash </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;#part2&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">url.href </span><span style="color:#6A737D;">// &quot;http://example.com/index2.html#part2&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http://example.com/index.html#part1&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">url.pathname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;index2.html&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">url.href </span><span style="color:#6A737D;">// &quot;http://example.com/index2.html#part1&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">url.hash </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;#part2&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">url.href </span><span style="color:#6A737D;">// &quot;http://example.com/index2.html#part2&quot;</span></span></code></pre></div><p>上面代码中，改变 URL 实例的<code>pathname</code>属性和<code>hash</code>属性，都会实时反映在 URL 实例当中。</p><h3 id="静态方法" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法" aria-label="Permalink to &quot;静态方法&quot;">​</a></h3><p><strong>（1）URL.createObjectURL()</strong></p><p><code>URL.createObjectURL()</code>方法用来为上传/下载的文件、流媒体文件生成一个 URL 字符串。这个字符串代表了<code>File</code>对象或<code>Blob</code>对象的 URL。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// HTML 代码如下</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;display&quot;/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;input</span></span>
<span class="line"><span style="color:#6A737D;">//   type=&quot;file&quot;</span></span>
<span class="line"><span style="color:#6A737D;">//   id=&quot;fileElem&quot;</span></span>
<span class="line"><span style="color:#6A737D;">//   multiple</span></span>
<span class="line"><span style="color:#6A737D;">//   accept=&quot;image/*&quot;</span></span>
<span class="line"><span style="color:#6A737D;">//   onchange=&quot;handleFiles(this.files)&quot;</span></span>
<span class="line"><span style="color:#6A737D;">//  &gt;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> div </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;display&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleFiles</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">files</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> files.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> img </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;img&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    img.src </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.</span><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createObjectURL</span><span style="color:#E1E4E8;">(files[i]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    div.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(img);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// HTML 代码如下</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;display&quot;/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;input</span></span>
<span class="line"><span style="color:#6A737D;">//   type=&quot;file&quot;</span></span>
<span class="line"><span style="color:#6A737D;">//   id=&quot;fileElem&quot;</span></span>
<span class="line"><span style="color:#6A737D;">//   multiple</span></span>
<span class="line"><span style="color:#6A737D;">//   accept=&quot;image/*&quot;</span></span>
<span class="line"><span style="color:#6A737D;">//   onchange=&quot;handleFiles(this.files)&quot;</span></span>
<span class="line"><span style="color:#6A737D;">//  &gt;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> div </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;display&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleFiles</span><span style="color:#24292E;">(</span><span style="color:#E36209;">files</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> files.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> img </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;img&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    img.src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.</span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">createObjectURL</span><span style="color:#24292E;">(files[i]);</span></span>
<span class="line"><span style="color:#24292E;">    div.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(img);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面代码中，<code>URL.createObjectURL()</code>方法用来为上传的文件生成一个 URL 字符串，作为<code>&lt;img&gt;</code>元素的图片来源。</p><p>该方法生成的 URL 就像下面的样子。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">blob</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">http</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//localhost/c745ef73-ece9-46da-8f66-ebes574789b1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">blob</span><span style="color:#24292E;">:</span><span style="color:#6F42C1;">http</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//localhost/c745ef73-ece9-46da-8f66-ebes574789b1</span></span></code></pre></div><p>注意，每次使用<code>URL.createObjectURL()</code>方法，都会在内存里面生成一个 URL 实例。如果不再需要该方法生成的 URL 字符串，为了节省内存，可以使用<code>URL.revokeObjectURL()</code>方法释放这个实例。</p><p><strong>（2）URL.revokeObjectURL()</strong></p><p><code>URL.revokeObjectURL()</code>方法用来释放<code>URL.createObjectURL()</code>方法生成的 URL 实例。它的参数就是<code>URL.createObjectURL()</code>方法返回的 URL 字符串。</p><p>下面为上一段的示例加上<code>URL.revokeObjectURL()</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> div </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;display&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleFiles</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">files</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> files.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> img </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;img&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    img.src </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.</span><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createObjectURL</span><span style="color:#E1E4E8;">(files[i]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    div.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(img);</span></span>
<span class="line"><span style="color:#E1E4E8;">    img.</span><span style="color:#B392F0;">onload</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      window.</span><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">revokeObjectURL</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.src);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> div </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;display&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleFiles</span><span style="color:#24292E;">(</span><span style="color:#E36209;">files</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> files.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> img </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;img&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    img.src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.</span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">createObjectURL</span><span style="color:#24292E;">(files[i]);</span></span>
<span class="line"><span style="color:#24292E;">    div.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(img);</span></span>
<span class="line"><span style="color:#24292E;">    img.</span><span style="color:#6F42C1;">onload</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      window.</span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">revokeObjectURL</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.src);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面代码中，一旦图片加载成功以后，为本地文件生成的 URL 字符串就没用了，于是可以在<code>img.onload</code>回调函数里面，通过<code>URL.revokeObjectURL()</code>方法卸载这个 URL 实例。</p><h2 id="urlsearchparams-对象" tabindex="-1">URLSearchParams 对象 <a class="header-anchor" href="#urlsearchparams-对象" aria-label="Permalink to &quot;URLSearchParams 对象&quot;">​</a></h2><h3 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h3><p><code>URLSearchParams</code>对象是浏览器的原生对象，用来构造、解析和处理 URL 的查询字符串（即 URL 问号后面的部分）。</p><p>它本身也是一个构造函数，可以生成实例。参数可以为查询字符串，起首的问号<code>?</code>有没有都行，也可以是对应查询字符串的数组或对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 方法一：传入字符串</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;?foo=1&amp;bar=2&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLSearchParams</span><span style="color:#E1E4E8;">(document.location.search);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 方法二：传入数组</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLSearchParams</span><span style="color:#E1E4E8;">([[</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], [</span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 方法三：传入对象</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLSearchParams</span><span style="color:#E1E4E8;">({</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;"> : </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> , </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;"> : </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 方法一：传入字符串</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;?foo=1&amp;bar=2&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">(document.location.search);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 方法二：传入数组</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">([[</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], [</span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 方法三：传入对象</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">({</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;"> : </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> , </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;"> : </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">});</span></span></code></pre></div><p><code>URLSearchParams</code>会对查询字符串自动编码。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLSearchParams</span><span style="color:#E1E4E8;">({</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;你好&#39;</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &quot;foo=%E4%BD%A0%E5%A5%BD&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">({</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;你好&#39;</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// &quot;foo=%E4%BD%A0%E5%A5%BD&quot;</span></span></code></pre></div><p>上面代码中，<code>foo</code>的值是汉字，<code>URLSearchParams</code>对其自动进行 URL 编码。</p><p>浏览器向服务器发送表单数据时，可以直接使用<code>URLSearchParams</code>实例作为表单数据。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">params</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLSearchParams</span><span style="color:#E1E4E8;">({foo: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, bar: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com/api&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  method: </span><span style="color:#9ECBFF;">&#39;POST&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  body: params</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">params</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">({foo: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, bar: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://example.com/api&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  method: </span><span style="color:#032F62;">&#39;POST&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  body: params</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">)</span></span></code></pre></div><p>上面代码中，<code>fetch</code>命令向服务器发送命令时，可以直接使用<code>URLSearchParams</code>实例。</p><p><code>URLSearchParams</code>可以与<code>URL()</code>接口结合使用。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(window.location);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> foo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.searchParams.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;somedefault&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(window.location);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.searchParams.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;somedefault&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>上面代码中，URL 实例的<code>searchParams</code>属性就是一个<code>URLSearchParams</code>实例，所以可以使用<code>URLSearchParams</code>接口的<code>get</code>方法。</p><p><code>URLSearchParams</code>实例有遍历器接口，可以用<code>for...of</code>循环遍历（详见《ES6 标准入门》的《Iterator》一章）。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLSearchParams</span><span style="color:#E1E4E8;">({</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> , </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> params) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(p[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;: &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> p[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// foo: 1</span></span>
<span class="line"><span style="color:#6A737D;">// bar: 2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">({</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> , </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> params) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(p[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;: &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> p[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// foo: 1</span></span>
<span class="line"><span style="color:#6A737D;">// bar: 2</span></span></code></pre></div><p><code>URLSearchParams</code>没有实例属性，只有实例方法。</p><h3 id="urlsearchparams-tostring" tabindex="-1">URLSearchParams.toString() <a class="header-anchor" href="#urlsearchparams-tostring" aria-label="Permalink to &quot;URLSearchParams.toString()&quot;">​</a></h3><p><code>toString</code>方法返回实例的字符串形式。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://example.com?foo=1&amp;bar=2&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLSearchParams</span><span style="color:#E1E4E8;">(url.search);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &quot;foo=1&amp;bar=2&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://example.com?foo=1&amp;bar=2&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">(url.search);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// &quot;foo=1&amp;bar=2&#39;</span></span></code></pre></div><p>那么需要字符串的场合，会自动调用<code>toString</code>方法。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLSearchParams</span><span style="color:#E1E4E8;">({version: </span><span style="color:#79B8FF;">2.0</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">window.location.href </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> location.pathname </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;?&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> params;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">({version: </span><span style="color:#005CC5;">2.0</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">window.location.href </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> location.pathname </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;?&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> params;</span></span></code></pre></div><p>上面代码中，<code>location.href</code>赋值时，可以直接使用<code>params</code>对象。这时就会自动调用<code>toString</code>方法。</p><h3 id="urlsearchparams-append" tabindex="-1">URLSearchParams.append() <a class="header-anchor" href="#urlsearchparams-append" aria-label="Permalink to &quot;URLSearchParams.append()&quot;">​</a></h3><p><code>append()</code>方法用来追加一个查询参数。它接受两个参数，第一个为键名，第二个为键值，没有返回值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLSearchParams</span><span style="color:#E1E4E8;">({</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> , </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;baz&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &quot;foo=1&amp;bar=2&amp;baz=3&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">({</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> , </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;baz&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// &quot;foo=1&amp;bar=2&amp;baz=3&quot;</span></span></code></pre></div><p><code>append()</code>方法不会识别是否键名已经存在。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLSearchParams</span><span style="color:#E1E4E8;">({</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> , </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &quot;foo=1&amp;bar=2&amp;foo=3&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">({</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> , </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// &quot;foo=1&amp;bar=2&amp;foo=3&quot;</span></span></code></pre></div><p>上面代码中，查询字符串里面<code>foo</code>已经存在了，但是<code>append</code>依然会追加一个同名键。</p><h3 id="urlsearchparams-delete" tabindex="-1">URLSearchParams.delete() <a class="header-anchor" href="#urlsearchparams-delete" aria-label="Permalink to &quot;URLSearchParams.delete()&quot;">​</a></h3><p><code>delete()</code>方法用来删除指定的查询参数。它接受键名作为参数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLSearchParams</span><span style="color:#E1E4E8;">({</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> , </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &quot;foo=1&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">({</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> , </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// &quot;foo=1&quot;</span></span></code></pre></div><h3 id="urlsearchparams-has" tabindex="-1">URLSearchParams.has() <a class="header-anchor" href="#urlsearchparams-has" aria-label="Permalink to &quot;URLSearchParams.has()&quot;">​</a></h3><p><code>has()</code>方法返回一个布尔值，表示查询字符串是否包含指定的键名。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLSearchParams</span><span style="color:#E1E4E8;">({</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> , </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;baz&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">({</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> , </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;baz&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span></code></pre></div><h3 id="urlsearchparams-set" tabindex="-1">URLSearchParams.set() <a class="header-anchor" href="#urlsearchparams-set" aria-label="Permalink to &quot;URLSearchParams.set()&quot;">​</a></h3><p><code>set()</code>方法用来设置查询字符串的键值。</p><p>它接受两个参数，第一个是键名，第二个是键值。如果是已经存在的键，键值会被改写，否则会被追加。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;?foo=1&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &quot;foo=2&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &quot;foo=2&amp;bar=3&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;?foo=1&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// &quot;foo=2&quot;</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// &quot;foo=2&amp;bar=3&quot;</span></span></code></pre></div><p>上面代码中，<code>foo</code>是已经存在的键，<code>bar</code>是还不存在的键。</p><p>如果有多个的同名键，<code>set</code>会移除现存所有的键。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;?foo=1&amp;foo=2&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &quot;foo=3&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;?foo=1&amp;foo=2&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// &quot;foo=3&quot;</span></span></code></pre></div><p>下面是一个替换当前 URL 的例子。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// URL: https://example.com?version=1.0</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLSearchParams</span><span style="color:#E1E4E8;">(location.search.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;version&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2.0&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">window.history.</span><span style="color:#B392F0;">replaceState</span><span style="color:#E1E4E8;">({}, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, location.pathname </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`?\`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> params);</span></span>
<span class="line"><span style="color:#6A737D;">// URL: https://example.com?version=2.0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// URL: https://example.com?version=1.0</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">(location.search.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;version&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;2.0&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">window.history.</span><span style="color:#6F42C1;">replaceState</span><span style="color:#24292E;">({}, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, location.pathname </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`?\`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> params);</span></span>
<span class="line"><span style="color:#6A737D;">// URL: https://example.com?version=2.0</span></span></code></pre></div><h3 id="urlsearchparams-get-urlsearchparams-getall" tabindex="-1">URLSearchParams.get()，URLSearchParams.getAll() <a class="header-anchor" href="#urlsearchparams-get-urlsearchparams-getall" aria-label="Permalink to &quot;URLSearchParams.get()，URLSearchParams.getAll()&quot;">​</a></h3><p><code>get()</code>方法用来读取查询字符串里面的指定键。它接受键名作为参数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;?foo=1&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// null</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;?foo=1&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;1&quot;</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// null</span></span></code></pre></div><p>两个地方需要注意。第一，它返回的是字符串，如果原始值是数值，需要转一下类型；第二，如果指定的键名不存在，返回值是<code>null</code>。</p><p>如果有多个的同名键，<code>get</code>返回位置最前面的那个键值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;?foo=3&amp;foo=2&amp;foo=1&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;3&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;?foo=3&amp;foo=2&amp;foo=1&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;3&quot;</span></span></code></pre></div><p>上面代码中，查询字符串有三个<code>foo</code>键，<code>get</code>方法返回最前面的键值<code>3</code>。</p><p><code>getAll()</code>方法返回一个数组，成员是指定键的所有键值。它接受键名作为参数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;?foo=1&amp;foo=2&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">getAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// [&quot;1&quot;, &quot;2&quot;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;?foo=1&amp;foo=2&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">getAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// [&quot;1&quot;, &quot;2&quot;]</span></span></code></pre></div><p>上面代码中，查询字符串有两个<code>foo</code>键，<code>getAll</code>返回的数组就有两个成员。</p><h3 id="urlsearchparams-sort" tabindex="-1">URLSearchParams.sort() <a class="header-anchor" href="#urlsearchparams-sort" aria-label="Permalink to &quot;URLSearchParams.sort()&quot;">​</a></h3><p><code>sort()</code>方法对查询字符串里面的键进行排序，规则是按照 Unicode 码点从小到大排列。</p><p>该方法没有返回值，或者说返回值是<code>undefined</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;c=4&amp;a=2&amp;b=3&amp;a=1&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">params.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &quot;a=2&amp;a=1&amp;b=3&amp;c=4&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;c=4&amp;a=2&amp;b=3&amp;a=1&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">params.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// &quot;a=2&amp;a=1&amp;b=3&amp;c=4&quot;</span></span></code></pre></div><p>上面代码中，如果有两个同名的键<code>a</code>，它们之间不会排序，而是保留原始的顺序。</p><h3 id="urlsearchparams-keys-urlsearchparams-values-urlsearchparams-entries" tabindex="-1">URLSearchParams.keys()，URLSearchParams.values()，URLSearchParams.entries() <a class="header-anchor" href="#urlsearchparams-keys-urlsearchparams-values-urlsearchparams-entries" aria-label="Permalink to &quot;URLSearchParams.keys()，URLSearchParams.values()，URLSearchParams.entries()&quot;">​</a></h3><p>这三个方法都返回一个遍历器对象，供<code>for...of</code>循环遍历。它们的区别在于，<code>keys</code>方法返回的是键名的遍历器，<code>values</code>方法返回的是键值的遍历器，<code>entries</code>返回的是键值对的遍历器。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URLSearchParams</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a=1&amp;b=2&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> params.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(p);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// a</span></span>
<span class="line"><span style="color:#6A737D;">// b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> params.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(p);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#6A737D;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> params.</span><span style="color:#B392F0;">entries</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(p);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// [&quot;a&quot;, &quot;1&quot;]</span></span>
<span class="line"><span style="color:#6A737D;">// [&quot;b&quot;, &quot;2&quot;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a=1&amp;b=2&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> params.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(p);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// a</span></span>
<span class="line"><span style="color:#6A737D;">// b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> params.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(p);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#6A737D;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> params.</span><span style="color:#6F42C1;">entries</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(p);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// [&quot;a&quot;, &quot;1&quot;]</span></span>
<span class="line"><span style="color:#6A737D;">// [&quot;b&quot;, &quot;2&quot;]</span></span></code></pre></div><p>如果直接对<code>URLSearchParams</code>进行遍历，其实内部调用的就是<code>entries</code>接口。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> params) {}</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> params.</span><span style="color:#B392F0;">entries</span><span style="color:#E1E4E8;">()) {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> params) {}</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> params.</span><span style="color:#6F42C1;">entries</span><span style="color:#24292E;">()) {}</span></span></code></pre></div><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Location" target="_blank" rel="noreferrer">Location</a>, by MDN</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/URL" target="_blank" rel="noreferrer">URL</a>, by MDN</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams" target="_blank" rel="noreferrer">URLSearchParams</a>, by MDN</li><li><a href="https://developers.google.com/web/updates/2016/01/urlsearchparams?hl=en" target="_blank" rel="noreferrer">Easy URL Manipulation with URLSearchParams</a>, by Eric Bidelman</li></ul>`,146),e=[l];function c(t,r,E,y,i,d){return a(),n("div",null,e)}const m=s(o,[["render",c]]);export{u as __pageData,m as default};
