import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.681fc4ae.js";const h=JSON.parse('{"title":"CSS 操作","description":"","frontmatter":{},"headers":[],"relativePath":"js/dom/css.md","filePath":"js/dom/css.md"}'),p={name:"js/dom/css.md"},e=l(`<h1 id="css-操作" tabindex="-1">CSS 操作 <a class="header-anchor" href="#css-操作" aria-label="Permalink to &quot;CSS 操作&quot;">​</a></h1><p>CSS 与 JavaScript 是两个有着明确分工的领域，前者负责页面的视觉效果，后者负责与用户的行为互动。但是，它们毕竟同属网页开发的前端，因此不可避免有着交叉和互相配合。本章介绍如何通过 JavaScript 操作 CSS。</p><h2 id="html-元素的-style-属性" tabindex="-1">HTML 元素的 style 属性 <a class="header-anchor" href="#html-元素的-style-属性" aria-label="Permalink to &quot;HTML 元素的 style 属性&quot;">​</a></h2><p>操作 CSS 样式最简单的方法，就是使用网页元素节点的<code>getAttribute()</code>方法、<code>setAttribute()</code>方法和<code>removeAttribute()</code>方法，直接读写或删除网页元素的<code>style</code>属性。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">div.</span><span style="color:#B392F0;">setAttribute</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;style&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;background-color:red;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;border:1px solid black;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">div.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;style&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;background-color:red;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;border:1px solid black;&#39;</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>上面的代码相当于下面的 HTML 代码。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;background-color:red; border:1px solid black;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">/</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;background-color:red; border:1px solid black;&quot;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">/</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p><code>style</code>不仅可以使用字符串读写，它本身还是一个对象，部署了 CSSStyleDeclaration 接口（详见下面的介绍），可以直接读写个别属性。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">e.style.fontSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;18px&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">e.style.color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;black&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">e.style.fontSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;18px&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">e.style.color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;black&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="cssstyledeclaration-接口" tabindex="-1">CSSStyleDeclaration 接口 <a class="header-anchor" href="#cssstyledeclaration-接口" aria-label="Permalink to &quot;CSSStyleDeclaration 接口&quot;">​</a></h2><h3 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h3><p>CSSStyleDeclaration 接口用来操作元素的样式。三个地方部署了这个接口。</p><ul><li>元素节点的<code>style</code>属性（<code>Element.style</code>）</li><li><code>CSSStyle</code>实例的<code>style</code>属性</li><li><code>window.getComputedStyle()</code>的返回值</li></ul><p>CSSStyleDeclaration 接口可以直接读写 CSS 的样式属性，不过，连词号需要变成骆驼拼写法。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> divStyle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">).style;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">divStyle.backgroundColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;red&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">divStyle.border </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;1px solid black&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">divStyle.width </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;100px&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">divStyle.height </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;100px&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">divStyle.fontSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;10em&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">divStyle.backgroundColor </span><span style="color:#6A737D;">// red</span></span>
<span class="line"><span style="color:#E1E4E8;">divStyle.border </span><span style="color:#6A737D;">// 1px solid black</span></span>
<span class="line"><span style="color:#E1E4E8;">divStyle.height </span><span style="color:#6A737D;">// 100px</span></span>
<span class="line"><span style="color:#E1E4E8;">divStyle.width </span><span style="color:#6A737D;">// 100px</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> divStyle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">).style;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">divStyle.backgroundColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;red&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">divStyle.border </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;1px solid black&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">divStyle.width </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;100px&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">divStyle.height </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;100px&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">divStyle.fontSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;10em&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">divStyle.backgroundColor </span><span style="color:#6A737D;">// red</span></span>
<span class="line"><span style="color:#24292E;">divStyle.border </span><span style="color:#6A737D;">// 1px solid black</span></span>
<span class="line"><span style="color:#24292E;">divStyle.height </span><span style="color:#6A737D;">// 100px</span></span>
<span class="line"><span style="color:#24292E;">divStyle.width </span><span style="color:#6A737D;">// 100px</span></span></code></pre></div><p>上面代码中，<code>style</code>属性的值是一个 CSSStyleDeclaration 实例。这个对象所包含的属性与 CSS 规则一一对应，但是名字需要改写，比如<code>background-color</code>写成<code>backgroundColor</code>。改写的规则是将横杠从 CSS 属性名中去除，然后将横杠后的第一个字母大写。如果 CSS 属性名是 JavaScript 保留字，则规则名之前需要加上字符串<code>css</code>，比如<code>float</code>写成<code>cssFloat</code>。</p><p>注意，该对象的属性值都是字符串，设置时必须包括单位，但是不含规则结尾的分号。比如，<code>divStyle.width</code>不能写为<code>100</code>，而要写为<code>100px</code>。</p><p>另外，<code>Element.style</code>返回的只是行内样式，并不是该元素的全部样式。通过样式表设置的样式，或者从父元素继承的样式，无法通过这个属性得到。元素的全部样式要通过<code>window.getComputedStyle()</code>得到。</p><h3 id="cssstyledeclaration-实例属性" tabindex="-1">CSSStyleDeclaration 实例属性 <a class="header-anchor" href="#cssstyledeclaration-实例属性" aria-label="Permalink to &quot;CSSStyleDeclaration 实例属性&quot;">​</a></h3><p><strong>（1）CSSStyleDeclaration.cssText</strong></p><p><code>CSSStyleDeclaration.cssText</code>属性用来读写当前规则的所有样式声明文本。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> divStyle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">).style;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">divStyle.cssText </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;background-color: red;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;border: 1px solid black;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;height: 100px;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;width: 100px;&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> divStyle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">).style;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">divStyle.cssText </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;background-color: red;&#39;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;border: 1px solid black;&#39;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;height: 100px;&#39;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;width: 100px;&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>注意，<code>cssText</code>的属性值不用改写 CSS 属性名。</p><p>删除一个元素的所有行内样式，最简便的方法就是设置<code>cssText</code>为空字符串。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">divStyle.cssText </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">divStyle.cssText </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p><strong>（2）CSSStyleDeclaration.length</strong></p><p><code>CSSStyleDeclaration.length</code>属性返回一个整数值，表示当前规则包含多少条样式声明。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// HTML 代码如下</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;myDiv&quot;</span></span>
<span class="line"><span style="color:#6A737D;">//   style=&quot;height: 1px;width: 100%;background-color: #CA1;&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> myDiv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myDiv&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> divStyle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> myDiv.style;</span></span>
<span class="line"><span style="color:#E1E4E8;">divStyle.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// HTML 代码如下</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;myDiv&quot;</span></span>
<span class="line"><span style="color:#6A737D;">//   style=&quot;height: 1px;width: 100%;background-color: #CA1;&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> myDiv </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;myDiv&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> divStyle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> myDiv.style;</span></span>
<span class="line"><span style="color:#24292E;">divStyle.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 3</span></span></code></pre></div><p>上面代码中，<code>myDiv</code>元素的行内样式共包含3条样式规则。</p><p><strong>（3）CSSStyleDeclaration.parentRule</strong></p><p><code>CSSStyleDeclaration.parentRule</code>属性返回当前规则所属的那个样式块（CSSRule 实例）。如果不存在所属的样式块，该属性返回<code>null</code>。</p><p>该属性只读，且只在使用 CSSRule 接口时有意义。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> declaration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.styleSheets[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].rules[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].style;</span></span>
<span class="line"><span style="color:#E1E4E8;">declaration.parentRule </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> document.styleSheets[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].rules[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> declaration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.styleSheets[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].rules[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].style;</span></span>
<span class="line"><span style="color:#24292E;">declaration.parentRule </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> document.styleSheets[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].rules[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre></div><h3 id="cssstyledeclaration-实例方法" tabindex="-1">CSSStyleDeclaration 实例方法 <a class="header-anchor" href="#cssstyledeclaration-实例方法" aria-label="Permalink to &quot;CSSStyleDeclaration 实例方法&quot;">​</a></h3><p><strong>（1）CSSStyleDeclaration.getPropertyPriority()</strong></p><p><code>CSSStyleDeclaration.getPropertyPriority</code>方法接受 CSS 样式的属性名作为参数，返回一个字符串，表示有没有设置<code>important</code>优先级。如果有就返回<code>important</code>，否则返回空字符串。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// HTML 代码为</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;myDiv&quot; style=&quot;margin: 10px!important; color: red;&quot;/&gt;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> style </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myDiv&#39;</span><span style="color:#E1E4E8;">).style;</span></span>
<span class="line"><span style="color:#E1E4E8;">style.margin </span><span style="color:#6A737D;">// &quot;10px&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">style.</span><span style="color:#B392F0;">getPropertyPriority</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;margin&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;important&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">style.</span><span style="color:#B392F0;">getPropertyPriority</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;color&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// HTML 代码为</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;myDiv&quot; style=&quot;margin: 10px!important; color: red;&quot;/&gt;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> style </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;myDiv&#39;</span><span style="color:#24292E;">).style;</span></span>
<span class="line"><span style="color:#24292E;">style.margin </span><span style="color:#6A737D;">// &quot;10px&quot;</span></span>
<span class="line"><span style="color:#24292E;">style.</span><span style="color:#6F42C1;">getPropertyPriority</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;margin&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;important&quot;</span></span>
<span class="line"><span style="color:#24292E;">style.</span><span style="color:#6F42C1;">getPropertyPriority</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;color&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;&quot;</span></span></code></pre></div><p>上面代码中，<code>margin</code>属性有<code>important</code>优先级，<code>color</code>属性没有。</p><p><strong>（2）CSSStyleDeclaration.getPropertyValue()</strong></p><p><code>CSSStyleDeclaration.getPropertyValue</code>方法接受 CSS 样式属性名作为参数，返回一个字符串，表示该属性的属性值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// HTML 代码为</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;myDiv&quot; style=&quot;margin: 10px!important; color: red;&quot;/&gt;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> style </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myDiv&#39;</span><span style="color:#E1E4E8;">).style;</span></span>
<span class="line"><span style="color:#E1E4E8;">style.margin </span><span style="color:#6A737D;">// &quot;10px&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">style.</span><span style="color:#B392F0;">getPropertyValue</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;margin&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;10px&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// HTML 代码为</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;myDiv&quot; style=&quot;margin: 10px!important; color: red;&quot;/&gt;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> style </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;myDiv&#39;</span><span style="color:#24292E;">).style;</span></span>
<span class="line"><span style="color:#24292E;">style.margin </span><span style="color:#6A737D;">// &quot;10px&quot;</span></span>
<span class="line"><span style="color:#24292E;">style.</span><span style="color:#6F42C1;">getPropertyValue</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;margin&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;10px&quot;</span></span></code></pre></div><p><strong>（3）CSSStyleDeclaration.item()</strong></p><p><code>CSSStyleDeclaration.item</code>方法接受一个整数值作为参数，返回该位置的 CSS 属性名。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// HTML 代码为</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;myDiv&quot; style=&quot;color: red; background-color: white;&quot;/&gt;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> style </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myDiv&#39;</span><span style="color:#E1E4E8;">).style;</span></span>
<span class="line"><span style="color:#E1E4E8;">style.</span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;color&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">style.</span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;background-color&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// HTML 代码为</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;myDiv&quot; style=&quot;color: red; background-color: white;&quot;/&gt;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> style </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;myDiv&#39;</span><span style="color:#24292E;">).style;</span></span>
<span class="line"><span style="color:#24292E;">style.</span><span style="color:#6F42C1;">item</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;color&quot;</span></span>
<span class="line"><span style="color:#24292E;">style.</span><span style="color:#6F42C1;">item</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;background-color&quot;</span></span></code></pre></div><p>上面代码中，<code>0</code>号位置的 CSS 属性名是<code>color</code>，<code>1</code>号位置的 CSS 属性名是<code>background-color</code>。</p><p>如果没有提供参数，这个方法会报错。如果参数值超过实际的属性数目，这个方法返回一个空字符值。</p><p><strong>（4）CSSStyleDeclaration.removeProperty()</strong></p><p><code>CSSStyleDeclaration.removeProperty</code>方法接受一个属性名作为参数，在 CSS 规则里面移除这个属性，返回这个属性原来的值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// HTML 代码为</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;myDiv&quot; style=&quot;color: red; background-color: white;&quot;&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   111</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;/div&gt;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> style </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myDiv&#39;</span><span style="color:#E1E4E8;">).style;</span></span>
<span class="line"><span style="color:#E1E4E8;">style.</span><span style="color:#B392F0;">removeProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;color&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &#39;red&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// HTML 代码变为</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;myDiv&quot; style=&quot;background-color: white;&quot;&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// HTML 代码为</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;myDiv&quot; style=&quot;color: red; background-color: white;&quot;&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   111</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;/div&gt;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> style </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;myDiv&#39;</span><span style="color:#24292E;">).style;</span></span>
<span class="line"><span style="color:#24292E;">style.</span><span style="color:#6F42C1;">removeProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;color&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &#39;red&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// HTML 代码变为</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;myDiv&quot; style=&quot;background-color: white;&quot;&gt;</span></span></code></pre></div><p>上面代码中，删除<code>color</code>属性以后，字体颜色从红色变成默认颜色。</p><p><strong>（5）CSSStyleDeclaration.setProperty()</strong></p><p><code>CSSStyleDeclaration.setProperty</code>方法用来设置新的 CSS 属性。该方法没有返回值。</p><p>该方法可以接受三个参数。</p><ul><li>第一个参数：属性名，该参数是必需的。</li><li>第二个参数：属性值，该参数可选。如果省略，则参数值默认为空字符串。</li><li>第三个参数：优先级，该参数可选。如果设置，唯一的合法值是<code>important</code>，表示 CSS 规则里面的<code>!important</code>。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// HTML 代码为</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;myDiv&quot; style=&quot;color: red; background-color: white;&quot;&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   111</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;/div&gt;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> style </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myDiv&#39;</span><span style="color:#E1E4E8;">).style;</span></span>
<span class="line"><span style="color:#E1E4E8;">style.</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;border&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;1px solid blue&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// HTML 代码为</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;myDiv&quot; style=&quot;color: red; background-color: white;&quot;&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   111</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;/div&gt;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> style </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;myDiv&#39;</span><span style="color:#24292E;">).style;</span></span>
<span class="line"><span style="color:#24292E;">style.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;border&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;1px solid blue&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>上面代码执行后，<code>myDiv</code>元素就会出现蓝色的边框。</p><h2 id="css-模块的侦测" tabindex="-1">CSS 模块的侦测 <a class="header-anchor" href="#css-模块的侦测" aria-label="Permalink to &quot;CSS 模块的侦测&quot;">​</a></h2><p>CSS 的规格发展太快，新的模块层出不穷。不同浏览器的不同版本，对 CSS 模块的支持情况都不一样。有时候，需要知道当前浏览器是否支持某个模块，这就叫做“CSS模块的侦测”。</p><p>一个比较普遍适用的方法是，判断元素的<code>style</code>对象的某个属性值是否为字符串。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> element.style.animationName </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> element.style.transform </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> element.style.animationName </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> element.style.transform </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>如果该 CSS 属性确实存在，会返回一个字符串。即使该属性实际上并未设置，也会返回一个空字符串。如果该属性不存在，则会返回<code>undefined</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">document.body.style[</span><span style="color:#9ECBFF;">&#39;maxWidth&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">document.body.style[</span><span style="color:#9ECBFF;">&#39;maximumWidth&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">document.body.style[</span><span style="color:#032F62;">&#39;maxWidth&#39;</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">document.body.style[</span><span style="color:#032F62;">&#39;maximumWidth&#39;</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">// undefined</span></span></code></pre></div><p>上面代码说明，这个浏览器支持<code>max-width</code>属性，但是不支持<code>maximum-width</code>属性。</p><p>注意，不管 CSS 属性名的写法带不带连词线，<code>style</code>属性上都能反映出该属性是否存在。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">document.body.style[</span><span style="color:#9ECBFF;">&#39;backgroundColor&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">document.body.style[</span><span style="color:#9ECBFF;">&#39;background-color&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// &quot;&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">document.body.style[</span><span style="color:#032F62;">&#39;backgroundColor&#39;</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">document.body.style[</span><span style="color:#032F62;">&#39;background-color&#39;</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">// &quot;&quot;</span></span></code></pre></div><p>另外，使用的时候，需要把不同浏览器的 CSS 前缀也考虑进去。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;content&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> content.style[</span><span style="color:#9ECBFF;">&#39;webkitAnimation&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;string&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;content&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> content.style[</span><span style="color:#032F62;">&#39;webkitAnimation&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;string&#39;</span></span></code></pre></div><p>这种侦测方法可以写成一个函数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isPropertySupported</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">property</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (property </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> document.body.style) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> prefixes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;Moz&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Webkit&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;O&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;ms&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Khtml&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> prefProperty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> property.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toUpperCase</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> property.</span><span style="color:#B392F0;">substr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> prefixes.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">((prefixes[i] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> prefProperty) </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> document.body.style) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">isPropertySupported</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;background-clip&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isPropertySupported</span><span style="color:#24292E;">(</span><span style="color:#E36209;">property</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (property </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> document.body.style) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> prefixes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;Moz&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Webkit&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;O&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;ms&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Khtml&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> prefProperty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> property.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> property.</span><span style="color:#6F42C1;">substr</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> prefixes.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">((prefixes[i] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> prefProperty) </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> document.body.style) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">isPropertySupported</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;background-clip&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre></div><h2 id="css-对象" tabindex="-1">CSS 对象 <a class="header-anchor" href="#css-对象" aria-label="Permalink to &quot;CSS 对象&quot;">​</a></h2><p>浏览器原生提供 CSS 对象，为 JavaScript 操作 CSS 提供一些工具方法。</p><p>这个对象目前有两个静态方法。</p><h3 id="css-escape" tabindex="-1">CSS.escape() <a class="header-anchor" href="#css-escape" aria-label="Permalink to &quot;CSS.escape()&quot;">​</a></h3><p><code>CSS.escape</code>方法用于转义 CSS 选择器里面的特殊字符。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;foo#bar&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;foo#bar&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>上面代码中，该元素的<code>id</code>属性包含一个<code>#</code>号，该字符在 CSS 选择器里面有特殊含义。不能直接写成<code>document.querySelector(&#39;#foo#bar&#39;)</code>，只能写成<code>document.querySelector(&#39;#foo\\\\#bar&#39;)</code>。这里必须使用双斜杠的原因是，单引号字符串本身会转义一次斜杠。</p><p><code>CSS.escape</code>方法就用来转义那些特殊字符。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CSS</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">escape</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo#bar&#39;</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CSS</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">escape</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo#bar&#39;</span><span style="color:#24292E;">))</span></span></code></pre></div><h3 id="css-supports" tabindex="-1">CSS.supports() <a class="header-anchor" href="#css-supports" aria-label="Permalink to &quot;CSS.supports()&quot;">​</a></h3><p><code>CSS.supports</code>方法返回一个布尔值，表示当前环境是否支持某一句 CSS 规则。</p><p>它的参数有两种写法，一种是第一个参数是属性名，第二个参数是属性值；另一种是整个参数就是一行完整的 CSS 语句。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 第一种写法</span></span>
<span class="line"><span style="color:#79B8FF;">CSS</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">supports</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;transform-origin&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;5px&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第二种写法</span></span>
<span class="line"><span style="color:#79B8FF;">CSS</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">supports</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;display: table-cell&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 第一种写法</span></span>
<span class="line"><span style="color:#005CC5;">CSS</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">supports</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;transform-origin&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;5px&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第二种写法</span></span>
<span class="line"><span style="color:#005CC5;">CSS</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">supports</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;display: table-cell&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>注意，第二种写法的参数结尾不能带有分号，否则结果不准确。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">CSS</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">supports</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;display: table-cell;&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">CSS</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">supports</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;display: table-cell;&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span></code></pre></div><h2 id="window-getcomputedstyle" tabindex="-1">window.getComputedStyle() <a class="header-anchor" href="#window-getcomputedstyle" aria-label="Permalink to &quot;window.getComputedStyle()&quot;">​</a></h2><p>行内样式（inline style）具有最高的优先级，改变行内样式，通常会立即反映出来。但是，网页元素最终的样式是综合各种规则计算出来的。因此，如果想得到元素实际的样式，只读取行内样式是不够的，需要得到浏览器最终计算出来的样式规则。</p><p><code>window.getComputedStyle</code>方法，就用来返回浏览器计算后得到的最终规则。它接受一个节点对象作为参数，返回一个 CSSStyleDeclaration 实例，包含了指定节点的最终样式信息。所谓“最终样式信息”，指的是各种 CSS 规则叠加后的结果。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> div </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> styleObj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.</span><span style="color:#B392F0;">getComputedStyle</span><span style="color:#E1E4E8;">(div);</span></span>
<span class="line"><span style="color:#E1E4E8;">styleObj.backgroundColor</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> div </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> styleObj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">getComputedStyle</span><span style="color:#24292E;">(div);</span></span>
<span class="line"><span style="color:#24292E;">styleObj.backgroundColor</span></span></code></pre></div><p>上面代码中，得到的背景色就是<code>div</code>元素真正的背景色。</p><p>注意，CSSStyleDeclaration 实例是一个活的对象，任何对于样式的修改，会实时反映到这个实例上面。另外，这个实例是只读的。</p><p><code>getComputedStyle</code>方法还可以接受第二个参数，表示当前元素的伪元素（比如<code>:before</code>、<code>:after</code>、<code>:first-line</code>、<code>:first-letter</code>等）。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.</span><span style="color:#B392F0;">getComputedStyle</span><span style="color:#E1E4E8;">(div, </span><span style="color:#9ECBFF;">&#39;:before&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">getComputedStyle</span><span style="color:#24292E;">(div, </span><span style="color:#032F62;">&#39;:before&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>下面的例子是如何获取元素的高度。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> elem </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;elem-container&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> styleObj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.</span><span style="color:#B392F0;">getComputedStyle</span><span style="color:#E1E4E8;">(elem, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> height </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> styleObj.height;</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> height </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> styleObj[</span><span style="color:#9ECBFF;">&#39;height&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> height </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> styleObj.</span><span style="color:#B392F0;">getPropertyValue</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;height&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> elem </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;elem-container&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> styleObj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">getComputedStyle</span><span style="color:#24292E;">(elem, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> height </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> styleObj.height;</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> height </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> styleObj[</span><span style="color:#032F62;">&#39;height&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> height </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> styleObj.</span><span style="color:#6F42C1;">getPropertyValue</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;height&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>上面代码得到的<code>height</code>属性，是浏览器最终渲染出来的高度，比其他方法得到的高度更可靠。由于<code>styleObj</code>是 CSSStyleDeclaration 实例，所以可以使用各种 CSSStyleDeclaration 的实例属性和方法。</p><p>有几点需要注意。</p><ul><li>CSSStyleDeclaration 实例返回的 CSS 值都是绝对单位。比如，长度都是像素单位（返回值包括<code>px</code>后缀），颜色是<code>rgb(#, #, #)</code>或<code>rgba(#, #, #, #)</code>格式。</li><li>CSS 规则的简写形式无效。比如，想读取<code>margin</code>属性的值，不能直接读，只能读<code>marginLeft</code>、<code>marginTop</code>等属性；再比如，<code>font</code>属性也是不能直接读的，只能读<code>font-size</code>等单个属性。</li><li>如果读取 CSS 原始的属性名，要用方括号运算符，比如<code>styleObj[&#39;z-index&#39;]</code>；如果读取骆驼拼写法的 CSS 属性名，可以直接读取<code>styleObj.zIndex</code>。</li><li>该方法返回的 CSSStyleDeclaration 实例的<code>cssText</code>属性无效，返回<code>undefined</code>。</li></ul><h2 id="css-伪元素" tabindex="-1">CSS 伪元素 <a class="header-anchor" href="#css-伪元素" aria-label="Permalink to &quot;CSS 伪元素&quot;">​</a></h2><p>CSS 伪元素是通过 CSS 向 DOM 添加的元素，主要是通过<code>:before</code>和<code>:after</code>选择器生成，然后用<code>content</code>属性指定伪元素的内容。</p><p>下面是一段 HTML 代码。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">&gt;Test content&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">&gt;Test content&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>CSS 添加伪元素<code>:before</code>的写法如下。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">#test:before</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">content</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Before &#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">#FF0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">#test:before</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">content</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Before &#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">#FF0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>节点元素的<code>style</code>对象无法读写伪元素的样式，这时就要用到<code>window.getComputedStyle()</code>。JavaScript 获取伪元素，可以使用下面的方法。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> test </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#test&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.</span><span style="color:#B392F0;">getComputedStyle</span><span style="color:#E1E4E8;">(test, </span><span style="color:#9ECBFF;">&#39;:before&#39;</span><span style="color:#E1E4E8;">).content;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.</span><span style="color:#B392F0;">getComputedStyle</span><span style="color:#E1E4E8;">(test, </span><span style="color:#9ECBFF;">&#39;:before&#39;</span><span style="color:#E1E4E8;">).color;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> test </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#test&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">getComputedStyle</span><span style="color:#24292E;">(test, </span><span style="color:#032F62;">&#39;:before&#39;</span><span style="color:#24292E;">).content;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">getComputedStyle</span><span style="color:#24292E;">(test, </span><span style="color:#032F62;">&#39;:before&#39;</span><span style="color:#24292E;">).color;</span></span></code></pre></div><p>此外，也可以使用 CSSStyleDeclaration 实例的<code>getPropertyValue</code>方法，获取伪元素的属性。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.</span><span style="color:#B392F0;">getComputedStyle</span><span style="color:#E1E4E8;">(test, </span><span style="color:#9ECBFF;">&#39;:before&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">getPropertyValue</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;content&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.</span><span style="color:#B392F0;">getComputedStyle</span><span style="color:#E1E4E8;">(test, </span><span style="color:#9ECBFF;">&#39;:before&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">getPropertyValue</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;color&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">getComputedStyle</span><span style="color:#24292E;">(test, </span><span style="color:#032F62;">&#39;:before&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">getPropertyValue</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;content&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">getComputedStyle</span><span style="color:#24292E;">(test, </span><span style="color:#032F62;">&#39;:before&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">getPropertyValue</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;color&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="stylesheet-接口" tabindex="-1">StyleSheet 接口 <a class="header-anchor" href="#stylesheet-接口" aria-label="Permalink to &quot;StyleSheet 接口&quot;">​</a></h2><h3 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h3><p><code>StyleSheet</code>接口代表网页的一张样式表，包括<code>&lt;link&gt;</code>元素加载的样式表和<code>&lt;style&gt;</code>元素内嵌的样式表。</p><p><code>document</code>对象的<code>styleSheets</code>属性，可以返回当前页面的所有<code>StyleSheet</code>实例（即所有样式表）。它是一个类似数组的对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> sheets </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.styleSheets;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> sheet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.styleSheets[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">sheet </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StyleSheet</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> sheets </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.styleSheets;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> sheet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.styleSheets[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">sheet </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StyleSheet</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>如果是<code>&lt;style&gt;</code>元素嵌入的样式表，还有另一种获取<code>StyleSheet</code>实例的方法，就是这个节点元素的<code>sheet</code>属性。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// HTML 代码为 &lt;style id=&quot;myStyle&quot;&gt;&lt;/style&gt;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> myStyleSheet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myStyle&#39;</span><span style="color:#E1E4E8;">).sheet;</span></span>
<span class="line"><span style="color:#E1E4E8;">myStyleSheet </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StyleSheet</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// HTML 代码为 &lt;style id=&quot;myStyle&quot;&gt;&lt;/style&gt;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> myStyleSheet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;myStyle&#39;</span><span style="color:#24292E;">).sheet;</span></span>
<span class="line"><span style="color:#24292E;">myStyleSheet </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StyleSheet</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>严格地说，<code>StyleSheet</code>接口不仅包括网页样式表，还包括 XML 文档的样式表。所以，它有一个子类<code>CSSStyleSheet</code>表示网页的 CSS 样式表。我们在网页里面拿到的样式表实例，实际上是<code>CSSStyleSheet</code>的实例。这个子接口继承了<code>StyleSheet</code>的所有属性和方法，并且定义了几个自己的属性，下面把这两个接口放在一起介绍。</p><h3 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h3><p><code>StyleSheet</code>实例有以下属性。</p><p><strong>（1）StyleSheet.disabled</strong></p><p><code>StyleSheet.disabled</code>返回一个布尔值，表示该样式表是否处于禁用状态。手动设置<code>disabled</code>属性为<code>true</code>，等同于在<code>&lt;link&gt;</code>元素里面，将这张样式表设为<code>alternate stylesheet</code>，即该样式表将不会生效。</p><p>注意，<code>disabled</code>属性只能在 JavaScript 脚本中设置，不能在 HTML 语句中设置。</p><p><strong>（2）Stylesheet.href</strong></p><p><code>Stylesheet.href</code>返回样式表的网址。对于内嵌样式表，该属性返回<code>null</code>。该属性只读。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">document.styleSheets[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].href</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">document.styleSheets[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].href</span></span></code></pre></div><p><strong>（3）StyleSheet.media</strong></p><p><code>StyleSheet.media</code>属性返回一个类似数组的对象（<code>MediaList</code>实例），成员是表示适用媒介的字符串。表示当前样式表是用于屏幕（screen），还是用于打印（print）或手持设备（handheld），或各种媒介都适用（all）。该属性只读，默认值是<code>screen</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">document.styleSheets[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].media.mediaText</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;all&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">document.styleSheets[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].media.mediaText</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;all&quot;</span></span></code></pre></div><p><code>MediaList</code>实例的<code>appendMedium</code>方法，用于增加媒介；<code>deleteMedium</code>方法用于删除媒介。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">document.styleSheets[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].media.</span><span style="color:#B392F0;">appendMedium</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;handheld&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">document.styleSheets[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].media.</span><span style="color:#B392F0;">deleteMedium</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;print&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">document.styleSheets[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].media.</span><span style="color:#6F42C1;">appendMedium</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;handheld&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">document.styleSheets[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].media.</span><span style="color:#6F42C1;">deleteMedium</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;print&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p><strong>（4）StyleSheet.title</strong></p><p><code>StyleSheet.title</code>属性返回样式表的<code>title</code>属性。</p><p><strong>（5）StyleSheet.type</strong></p><p><code>StyleSheet.type</code>属性返回样式表的<code>type</code>属性，通常是<code>text/css</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">document.styleSheets[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].type  </span><span style="color:#6A737D;">// &quot;text/css&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">document.styleSheets[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].type  </span><span style="color:#6A737D;">// &quot;text/css&quot;</span></span></code></pre></div><p><strong>（6）StyleSheet.parentStyleSheet</strong></p><p>CSS 的<code>@import</code>命令允许在样式表中加载其他样式表。<code>StyleSheet.parentStyleSheet</code>属性返回包含了当前样式表的那张样式表。如果当前样式表是顶层样式表，则该属性返回<code>null</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (stylesheet.parentStyleSheet) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  sheet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stylesheet.parentStyleSheet;</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  sheet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stylesheet;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (stylesheet.parentStyleSheet) {</span></span>
<span class="line"><span style="color:#24292E;">  sheet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stylesheet.parentStyleSheet;</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  sheet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stylesheet;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>（7）StyleSheet.ownerNode</strong></p><p><code>StyleSheet.ownerNode</code>属性返回<code>StyleSheet</code>对象所在的 DOM 节点，通常是<code>&lt;link&gt;</code>或<code>&lt;style&gt;</code>。对于那些由其他样式表引用的样式表，该属性为<code>null</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// HTML代码为</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;link rel=&quot;StyleSheet&quot; href=&quot;example.css&quot; type=&quot;text/css&quot; /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">document.styleSheets[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].ownerNode </span><span style="color:#6A737D;">// [object HTMLLinkElement]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// HTML代码为</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;link rel=&quot;StyleSheet&quot; href=&quot;example.css&quot; type=&quot;text/css&quot; /&gt;</span></span>
<span class="line"><span style="color:#24292E;">document.styleSheets[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].ownerNode </span><span style="color:#6A737D;">// [object HTMLLinkElement]</span></span></code></pre></div><p><strong>（8）CSSStyleSheet.cssRules</strong></p><p><code>CSSStyleSheet.cssRules</code>属性指向一个类似数组的对象（<code>CSSRuleList</code>实例），里面每一个成员就是当前样式表的一条 CSS 规则。使用该规则的<code>cssText</code>属性，可以得到 CSS 规则对应的字符串。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> sheet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#styleElement&#39;</span><span style="color:#E1E4E8;">).sheet;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">sheet.cssRules[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].cssText</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;body { background-color: red; margin: 20px; }&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">sheet.cssRules[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].cssText</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;p { line-height: 1.4em; color: blue; }&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> sheet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#styleElement&#39;</span><span style="color:#24292E;">).sheet;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">sheet.cssRules[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].cssText</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;body { background-color: red; margin: 20px; }&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">sheet.cssRules[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].cssText</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;p { line-height: 1.4em; color: blue; }&quot;</span></span></code></pre></div><p>每条 CSS 规则还有一个<code>style</code>属性，指向一个对象，用来读写具体的 CSS 命令。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">cssStyleSheet.cssRules[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].style.color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;red&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">cssStyleSheet.cssRules[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].style.color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;purple&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">cssStyleSheet.cssRules[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].style.color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;red&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">cssStyleSheet.cssRules[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].style.color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;purple&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p><strong>（9）CSSStyleSheet.ownerRule</strong></p><p>有些样式表是通过<code>@import</code>规则输入的，它的<code>ownerRule</code>属性会返回一个<code>CSSRule</code>实例，代表那行<code>@import</code>规则。如果当前样式表不是通过<code>@import</code>引入的，<code>ownerRule</code>属性返回<code>null</code>。</p><h3 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h3><p><strong>（1）CSSStyleSheet.insertRule()</strong></p><p><code>CSSStyleSheet.insertRule</code>方法用于在当前样式表的插入一个新的 CSS 规则。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> sheet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#styleElement&#39;</span><span style="color:#E1E4E8;">).sheet;</span></span>
<span class="line"><span style="color:#E1E4E8;">sheet.</span><span style="color:#B392F0;">insertRule</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#block { color: white }&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">sheet.</span><span style="color:#B392F0;">insertRule</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;p { color: red }&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> sheet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#styleElement&#39;</span><span style="color:#24292E;">).sheet;</span></span>
<span class="line"><span style="color:#24292E;">sheet.</span><span style="color:#6F42C1;">insertRule</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#block { color: white }&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">sheet.</span><span style="color:#6F42C1;">insertRule</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;p { color: red }&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span></code></pre></div><p>该方法可以接受两个参数，第一个参数是表示 CSS 规则的字符串，这里只能有一条规则，否则会报错。第二个参数是该规则在样式表的插入位置（从0开始），该参数可选，默认为0（即默认插在样式表的头部）。注意，如果插入位置大于现有规则的数目，会报错。</p><p>该方法的返回值是新插入规则的位置序号。</p><p>注意，浏览器对脚本在样式表里面插入规则有很多<a href="https://drafts.csswg.org/cssom/#insert-a-css-rule" target="_blank" rel="noreferrer">限制</a>。所以，这个方法最好放在<code>try...catch</code>里使用。</p><p><strong>（2）CSSStyleSheet.deleteRule()</strong></p><p><code>CSSStyleSheet.deleteRule</code>方法用来在样式表里面移除一条规则，它的参数是该条规则在<code>cssRules</code>对象中的位置。该方法没有返回值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">document.styleSheets[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">deleteRule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">document.styleSheets[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">deleteRule</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="实例-添加样式表" tabindex="-1">实例：添加样式表 <a class="header-anchor" href="#实例-添加样式表" aria-label="Permalink to &quot;实例：添加样式表&quot;">​</a></h2><p>网页添加样式表有两种方式。一种是添加一张内置样式表，即在文档中添加一个<code>&lt;style&gt;</code>节点。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 写法一</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> style </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;style&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">style.</span><span style="color:#B392F0;">setAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;media&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;screen&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">style.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;body{color:red}&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">document.head.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(style);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 写法二</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> style </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> style </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;style&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  document.head.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(style);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> style;</span></span>
<span class="line"><span style="color:#E1E4E8;">})();</span></span>
<span class="line"><span style="color:#E1E4E8;">style.sheet.</span><span style="color:#B392F0;">insertRule</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;.foo{color:red;}&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 写法一</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> style </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;style&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">style.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;media&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;screen&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">style.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;body{color:red}&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">document.head.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(style);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 写法二</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> style </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> style </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;style&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  document.head.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(style);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> style;</span></span>
<span class="line"><span style="color:#24292E;">})();</span></span>
<span class="line"><span style="color:#24292E;">style.sheet.</span><span style="color:#6F42C1;">insertRule</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;.foo{color:red;}&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span></code></pre></div><p>另一种是添加外部样式表，即在文档中添加一个<code>&lt;link&gt;</code>节点，然后将<code>href</code>属性指向外部样式表的 URL。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> linkElm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;link&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">linkElm.</span><span style="color:#B392F0;">setAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;rel&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;stylesheet&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">linkElm.</span><span style="color:#B392F0;">setAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;type&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;text/css&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">linkElm.</span><span style="color:#B392F0;">setAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;href&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;reset-min.css&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">document.head.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(linkElm);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> linkElm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;link&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">linkElm.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;rel&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;stylesheet&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">linkElm.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;type&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;text/css&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">linkElm.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;href&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;reset-min.css&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">document.head.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(linkElm);</span></span></code></pre></div><h2 id="cssrulelist-接口" tabindex="-1">CSSRuleList 接口 <a class="header-anchor" href="#cssrulelist-接口" aria-label="Permalink to &quot;CSSRuleList 接口&quot;">​</a></h2><p>CSSRuleList 接口是一个类似数组的对象，表示一组 CSS 规则，成员都是 CSSRule 实例。</p><p>获取 CSSRuleList 实例，一般是通过<code>StyleSheet.cssRules</code>属性。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// HTML 代码如下</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;style id=&quot;myStyle&quot;&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   h1 { color: red; }</span></span>
<span class="line"><span style="color:#6A737D;">//   p { color: blue; }</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;/style&gt;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> myStyleSheet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myStyle&#39;</span><span style="color:#E1E4E8;">).sheet;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> crl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> myStyleSheet.cssRules;</span></span>
<span class="line"><span style="color:#E1E4E8;">crl </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CSSRuleList</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// HTML 代码如下</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;style id=&quot;myStyle&quot;&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   h1 { color: red; }</span></span>
<span class="line"><span style="color:#6A737D;">//   p { color: blue; }</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;/style&gt;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> myStyleSheet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;myStyle&#39;</span><span style="color:#24292E;">).sheet;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> crl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> myStyleSheet.cssRules;</span></span>
<span class="line"><span style="color:#24292E;">crl </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CSSRuleList</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>CSSRuleList 实例里面，每一条规则（CSSRule 实例）可以通过<code>rules.item(index)</code>或者<code>rules[index]</code>拿到。CSS 规则的条数通过<code>rules.length</code>拿到。还是用上面的例子。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">crl[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CSSRule</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">crl.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">crl[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CSSRule</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">crl.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 2</span></span></code></pre></div><p>注意，添加规则和删除规则不能在 CSSRuleList 实例操作，而要在它的父元素 StyleSheet 实例上，通过<code>StyleSheet.insertRule()</code>和<code>StyleSheet.deleteRule()</code>操作。</p><h2 id="cssrule-接口" tabindex="-1">CSSRule 接口 <a class="header-anchor" href="#cssrule-接口" aria-label="Permalink to &quot;CSSRule 接口&quot;">​</a></h2><h3 id="概述-1" tabindex="-1">概述 <a class="header-anchor" href="#概述-1" aria-label="Permalink to &quot;概述&quot;">​</a></h3><p>一条 CSS 规则包括两个部分：CSS 选择器和样式声明。下面就是一条典型的 CSS 规则。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">.myClass</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">red</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">background-color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">yellow</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">.myClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">red</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">background-color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">yellow</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>JavaScript 通过 CSSRule 接口操作 CSS 规则。一般通过 CSSRuleList 接口（<code>StyleSheet.cssRules</code>）获取 CSSRule 实例。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// HTML 代码如下</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;style id=&quot;myStyle&quot;&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   .myClass {</span></span>
<span class="line"><span style="color:#6A737D;">//     color: red;</span></span>
<span class="line"><span style="color:#6A737D;">//     background-color: yellow;</span></span>
<span class="line"><span style="color:#6A737D;">//   }</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;/style&gt;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> myStyleSheet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myStyle&#39;</span><span style="color:#E1E4E8;">).sheet;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ruleList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> myStyleSheet.cssRules;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> rule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ruleList[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">rule </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CSSRule</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// HTML 代码如下</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;style id=&quot;myStyle&quot;&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   .myClass {</span></span>
<span class="line"><span style="color:#6A737D;">//     color: red;</span></span>
<span class="line"><span style="color:#6A737D;">//     background-color: yellow;</span></span>
<span class="line"><span style="color:#6A737D;">//   }</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;/style&gt;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> myStyleSheet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;myStyle&#39;</span><span style="color:#24292E;">).sheet;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> ruleList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> myStyleSheet.cssRules;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> rule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ruleList[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">rule </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CSSRule</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span></code></pre></div><h3 id="cssrule-实例的属性" tabindex="-1">CSSRule 实例的属性 <a class="header-anchor" href="#cssrule-实例的属性" aria-label="Permalink to &quot;CSSRule 实例的属性&quot;">​</a></h3><p><strong>（1）CSSRule.cssText</strong></p><p><code>CSSRule.cssText</code>属性返回当前规则的文本，还是使用上面的例子。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">rule.cssText</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;.myClass { color: red; background-color: yellow; }&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">rule.cssText</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;.myClass { color: red; background-color: yellow; }&quot;</span></span></code></pre></div><p>如果规则是加载（<code>@import</code>）其他样式表，<code>cssText</code>属性返回<code>@import &#39;url&#39;</code>。</p><p><strong>（2）CSSRule.parentStyleSheet</strong></p><p><code>CSSRule.parentStyleSheet</code>属性返回当前规则所在的样式表对象（StyleSheet 实例），还是使用上面的例子。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">rule.parentStyleSheet </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> myStyleSheet </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">rule.parentStyleSheet </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> myStyleSheet </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p><strong>（3）CSSRule.parentRule</strong></p><p><code>CSSRule.parentRule</code>属性返回包含当前规则的父规则，如果不存在父规则（即当前规则是顶层规则），则返回<code>null</code>。</p><p>父规则最常见的情况是，当前规则包含在<code>@media</code>规则代码块之中。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// HTML 代码如下</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;style id=&quot;myStyle&quot;&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   @supports (display: flex) {</span></span>
<span class="line"><span style="color:#6A737D;">//     @media screen and (min-width: 900px) {</span></span>
<span class="line"><span style="color:#6A737D;">//       article {</span></span>
<span class="line"><span style="color:#6A737D;">//         display: flex;</span></span>
<span class="line"><span style="color:#6A737D;">//       }</span></span>
<span class="line"><span style="color:#6A737D;">//     }</span></span>
<span class="line"><span style="color:#6A737D;">//  }</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;/style&gt;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> myStyleSheet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myStyle&#39;</span><span style="color:#E1E4E8;">).sheet;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ruleList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> myStyleSheet.cssRules;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> rule0 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ruleList[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">rule0.cssText</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;@supports (display: flex) {</span></span>
<span class="line"><span style="color:#6A737D;">//    @media screen and (min-width: 900px) {</span></span>
<span class="line"><span style="color:#6A737D;">//      article { display: flex; }</span></span>
<span class="line"><span style="color:#6A737D;">//    }</span></span>
<span class="line"><span style="color:#6A737D;">// }&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 由于这条规则内嵌其他规则，</span></span>
<span class="line"><span style="color:#6A737D;">// 所以它有 cssRules 属性，且该属性是 CSSRuleList 实例</span></span>
<span class="line"><span style="color:#E1E4E8;">rule0.cssRules </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CSSRuleList</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> rule1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rule0.cssRules[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">rule1.cssText</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;@media screen and (min-width: 900px) {</span></span>
<span class="line"><span style="color:#6A737D;">//   article { display: flex; }</span></span>
<span class="line"><span style="color:#6A737D;">// }&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> rule2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rule1.cssRules[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">rule2.cssText</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;article { display: flex; }&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">rule1.parentRule </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> rule0 </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">rule2.parentRule </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> rule1 </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// HTML 代码如下</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;style id=&quot;myStyle&quot;&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   @supports (display: flex) {</span></span>
<span class="line"><span style="color:#6A737D;">//     @media screen and (min-width: 900px) {</span></span>
<span class="line"><span style="color:#6A737D;">//       article {</span></span>
<span class="line"><span style="color:#6A737D;">//         display: flex;</span></span>
<span class="line"><span style="color:#6A737D;">//       }</span></span>
<span class="line"><span style="color:#6A737D;">//     }</span></span>
<span class="line"><span style="color:#6A737D;">//  }</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;/style&gt;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> myStyleSheet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;myStyle&#39;</span><span style="color:#24292E;">).sheet;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> ruleList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> myStyleSheet.cssRules;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> rule0 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ruleList[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">rule0.cssText</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;@supports (display: flex) {</span></span>
<span class="line"><span style="color:#6A737D;">//    @media screen and (min-width: 900px) {</span></span>
<span class="line"><span style="color:#6A737D;">//      article { display: flex; }</span></span>
<span class="line"><span style="color:#6A737D;">//    }</span></span>
<span class="line"><span style="color:#6A737D;">// }&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 由于这条规则内嵌其他规则，</span></span>
<span class="line"><span style="color:#6A737D;">// 所以它有 cssRules 属性，且该属性是 CSSRuleList 实例</span></span>
<span class="line"><span style="color:#24292E;">rule0.cssRules </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CSSRuleList</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> rule1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rule0.cssRules[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">rule1.cssText</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;@media screen and (min-width: 900px) {</span></span>
<span class="line"><span style="color:#6A737D;">//   article { display: flex; }</span></span>
<span class="line"><span style="color:#6A737D;">// }&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> rule2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rule1.cssRules[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">rule2.cssText</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;article { display: flex; }&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">rule1.parentRule </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> rule0 </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">rule2.parentRule </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> rule1 </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p><strong>（4）CSSRule.type</strong></p><p><code>CSSRule.type</code>属性返回一个整数值，表示当前规则的类型。</p><p>最常见的类型有以下几种。</p><ul><li>1：普通样式规则（CSSStyleRule 实例）</li><li>3：<code>@import</code>规则</li><li>4：<code>@media</code>规则（CSSMediaRule 实例）</li><li>5：<code>@font-face</code>规则</li></ul><h3 id="cssstylerule-接口" tabindex="-1">CSSStyleRule 接口 <a class="header-anchor" href="#cssstylerule-接口" aria-label="Permalink to &quot;CSSStyleRule 接口&quot;">​</a></h3><p>如果一条 CSS 规则是普通的样式规则（不含特殊的 CSS 命令），那么除了 CSSRule 接口，它还部署了 CSSStyleRule 接口。</p><p>CSSStyleRule 接口有以下两个属性。</p><p><strong>（1）CSSStyleRule.selectorText</strong></p><p><code>CSSStyleRule.selectorText</code>属性返回当前规则的选择器。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> stylesheet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.styleSheets[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">stylesheet.cssRules[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].selectorText </span><span style="color:#6A737D;">// &quot;.myClass&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> stylesheet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.styleSheets[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">stylesheet.cssRules[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].selectorText </span><span style="color:#6A737D;">// &quot;.myClass&quot;</span></span></code></pre></div><p>注意，这个属性是可写的。</p><p><strong>（2）CSSStyleRule.style</strong></p><p><code>CSSStyleRule.style</code>属性返回一个对象（CSSStyleDeclaration 实例），代表当前规则的样式声明，也就是选择器后面的大括号里面的部分。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// HTML 代码为</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;style id=&quot;myStyle&quot;&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   p { color: red; }</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;/style&gt;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> styleSheet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myStyle&#39;</span><span style="color:#E1E4E8;">).sheet;</span></span>
<span class="line"><span style="color:#E1E4E8;">styleSheet.cssRules[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].style </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CSSStyleDeclaration</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// HTML 代码为</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;style id=&quot;myStyle&quot;&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   p { color: red; }</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;/style&gt;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> styleSheet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;myStyle&#39;</span><span style="color:#24292E;">).sheet;</span></span>
<span class="line"><span style="color:#24292E;">styleSheet.cssRules[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].style </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CSSStyleDeclaration</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre></div><p>CSSStyleDeclaration 实例的<code>cssText</code>属性，可以返回所有样式声明，格式为字符串。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">styleSheet.cssRules[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].style.cssText</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;color: red;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">styleSheet.cssRules[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].selectorText</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;p&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">styleSheet.cssRules[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].style.cssText</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;color: red;&quot;</span></span>
<span class="line"><span style="color:#24292E;">styleSheet.cssRules[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].selectorText</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;p&quot;</span></span></code></pre></div><h3 id="cssmediarule-接口" tabindex="-1">CSSMediaRule 接口 <a class="header-anchor" href="#cssmediarule-接口" aria-label="Permalink to &quot;CSSMediaRule 接口&quot;">​</a></h3><p>如果一条 CSS 规则是<code>@media</code>代码块，那么它除了 CSSRule 接口，还部署了 CSSMediaRule 接口。</p><p>该接口主要提供<code>media</code>属性和<code>conditionText</code>属性。前者返回代表<code>@media</code>规则的一个对象（MediaList 实例），后者返回<code>@media</code>规则的生效条件。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// HTML 代码如下</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;style id=&quot;myStyle&quot;&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   @media screen and (min-width: 900px) {</span></span>
<span class="line"><span style="color:#6A737D;">//     article { display: flex; }</span></span>
<span class="line"><span style="color:#6A737D;">//   }</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;/style&gt;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> styleSheet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myStyle&#39;</span><span style="color:#E1E4E8;">).sheet;</span></span>
<span class="line"><span style="color:#E1E4E8;">styleSheet.cssRules[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CSSMediaRule</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">styleSheet.cssRules[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].media</span></span>
<span class="line"><span style="color:#6A737D;">//  {</span></span>
<span class="line"><span style="color:#6A737D;">//    0: &quot;screen and (min-width: 900px)&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">//    appendMedium: function,</span></span>
<span class="line"><span style="color:#6A737D;">//    deleteMedium: function,</span></span>
<span class="line"><span style="color:#6A737D;">//    item: function,</span></span>
<span class="line"><span style="color:#6A737D;">//    length: 1,</span></span>
<span class="line"><span style="color:#6A737D;">//    mediaText: &quot;screen and (min-width: 900px)&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">styleSheet.cssRules[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].conditionText</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;screen and (min-width: 900px)&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// HTML 代码如下</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;style id=&quot;myStyle&quot;&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   @media screen and (min-width: 900px) {</span></span>
<span class="line"><span style="color:#6A737D;">//     article { display: flex; }</span></span>
<span class="line"><span style="color:#6A737D;">//   }</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;/style&gt;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> styleSheet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;myStyle&#39;</span><span style="color:#24292E;">).sheet;</span></span>
<span class="line"><span style="color:#24292E;">styleSheet.cssRules[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CSSMediaRule</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">styleSheet.cssRules[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].media</span></span>
<span class="line"><span style="color:#6A737D;">//  {</span></span>
<span class="line"><span style="color:#6A737D;">//    0: &quot;screen and (min-width: 900px)&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">//    appendMedium: function,</span></span>
<span class="line"><span style="color:#6A737D;">//    deleteMedium: function,</span></span>
<span class="line"><span style="color:#6A737D;">//    item: function,</span></span>
<span class="line"><span style="color:#6A737D;">//    length: 1,</span></span>
<span class="line"><span style="color:#6A737D;">//    mediaText: &quot;screen and (min-width: 900px)&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">styleSheet.cssRules[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].conditionText</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;screen and (min-width: 900px)&quot;</span></span></code></pre></div><h2 id="window-matchmedia" tabindex="-1">window.matchMedia() <a class="header-anchor" href="#window-matchmedia" aria-label="Permalink to &quot;window.matchMedia()&quot;">​</a></h2><h3 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h3><p><code>window.matchMedia()</code>方法用来将 CSS 的<a href="https://developer.mozilla.org/en-US/docs/DOM/Using_media_queries_from_code" target="_blank" rel="noreferrer"><code>Media Query</code></a>条件语句，转换成一个 MediaQueryList 实例。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> mdl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.</span><span style="color:#B392F0;">matchMedia</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;(min-width: 400px)&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">mdl </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MediaQueryList</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> mdl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">matchMedia</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;(min-width: 400px)&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">mdl </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MediaQueryList</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>上面代码中，变量<code>mdl</code>就是 mediaQueryList 的实例。</p><p>注意，如果参数不是有效的<code>MediaQuery</code>条件语句，<code>window.matchMedia</code>不会报错，依然返回一个 MediaQueryList 实例。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">matchMedia</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;bad string&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MediaQueryList</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">matchMedia</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;bad string&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MediaQueryList</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span></code></pre></div><h3 id="mediaquerylist-接口的实例属性" tabindex="-1">MediaQueryList 接口的实例属性 <a class="header-anchor" href="#mediaquerylist-接口的实例属性" aria-label="Permalink to &quot;MediaQueryList 接口的实例属性&quot;">​</a></h3><p>MediaQueryList 实例有三个属性。</p><p><strong>（1）MediaQueryList.media</strong></p><p><code>MediaQueryList.media</code>属性返回一个字符串，表示对应的 MediaQuery 条件语句。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> mql </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.</span><span style="color:#B392F0;">matchMedia</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;(min-width: 400px)&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">mql.media </span><span style="color:#6A737D;">// &quot;(min-width: 400px)&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> mql </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">matchMedia</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;(min-width: 400px)&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">mql.media </span><span style="color:#6A737D;">// &quot;(min-width: 400px)&quot;</span></span></code></pre></div><p><strong>（2）MediaQueryList.matches</strong></p><p><code>MediaQueryList.matches</code>属性返回一个布尔值，表示当前页面是否符合指定的 MediaQuery 条件语句。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (window.</span><span style="color:#B392F0;">matchMedia</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;(min-width: 400px)&#39;</span><span style="color:#E1E4E8;">).matches) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* 当前视口不小于 400 像素 */</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* 当前视口小于 400 像素 */</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (window.</span><span style="color:#6F42C1;">matchMedia</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;(min-width: 400px)&#39;</span><span style="color:#24292E;">).matches) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* 当前视口不小于 400 像素 */</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* 当前视口小于 400 像素 */</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面的例子根据<code>mediaQuery</code>是否匹配当前环境，加载相应的 CSS 样式表。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.</span><span style="color:#B392F0;">matchMedia</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;(max-width: 700px)&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result.matches){</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> linkElm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;link&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  linkElm.</span><span style="color:#B392F0;">setAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;rel&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;stylesheet&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  linkElm.</span><span style="color:#B392F0;">setAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;type&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;text/css&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  linkElm.</span><span style="color:#B392F0;">setAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;href&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;small.css&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  document.head.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(linkElm);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">matchMedia</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;(max-width: 700px)&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (result.matches){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> linkElm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;link&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  linkElm.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;rel&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;stylesheet&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  linkElm.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;type&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;text/css&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  linkElm.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;href&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;small.css&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  document.head.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(linkElm);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>（3）MediaQueryList.onchange</strong></p><p>如果 MediaQuery 条件语句的适配环境发生变化，会触发<code>change</code>事件。<code>MediaQueryList.onchange</code>属性用来指定<code>change</code>事件的监听函数。该函数的参数是<code>change</code>事件对象（MediaQueryListEvent 实例），该对象与 MediaQueryList 实例类似，也有<code>media</code>和<code>matches</code>属性。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> mql </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.</span><span style="color:#B392F0;">matchMedia</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;(max-width: 600px)&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">mql.</span><span style="color:#B392F0;">onchange</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (e.matches) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 视口不超过 600 像素 */</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 视口超过 600 像素 */</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> mql </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">matchMedia</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;(max-width: 600px)&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">mql.</span><span style="color:#6F42C1;">onchange</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e.matches) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 视口不超过 600 像素 */</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 视口超过 600 像素 */</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面代码中，<code>change</code>事件发生后，存在两种可能。一种是显示宽度从600像素以上变为以下，另一种是从600像素以下变为以上，所以在监听函数内部要判断一下当前是哪一种情况。</p><h3 id="mediaquerylist-接口的实例方法" tabindex="-1">MediaQueryList 接口的实例方法 <a class="header-anchor" href="#mediaquerylist-接口的实例方法" aria-label="Permalink to &quot;MediaQueryList 接口的实例方法&quot;">​</a></h3><p>MediaQueryList 实例有两个方法<code>MediaQueryList.addListener()</code>和<code>MediaQueryList.removeListener()</code>，用来为<code>change</code>事件添加或撤销监听函数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> mql </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.</span><span style="color:#B392F0;">matchMedia</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;(max-width: 600px)&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 指定监听函数</span></span>
<span class="line"><span style="color:#E1E4E8;">mql.</span><span style="color:#B392F0;">addListener</span><span style="color:#E1E4E8;">(mqCallback);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 撤销监听函数</span></span>
<span class="line"><span style="color:#E1E4E8;">mql.</span><span style="color:#B392F0;">removeListener</span><span style="color:#E1E4E8;">(mqCallback);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mqCallback</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (e.matches) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 视口不超过 600 像素 */</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 视口超过 600 像素 */</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> mql </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">matchMedia</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;(max-width: 600px)&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 指定监听函数</span></span>
<span class="line"><span style="color:#24292E;">mql.</span><span style="color:#6F42C1;">addListener</span><span style="color:#24292E;">(mqCallback);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 撤销监听函数</span></span>
<span class="line"><span style="color:#24292E;">mql.</span><span style="color:#6F42C1;">removeListener</span><span style="color:#24292E;">(mqCallback);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mqCallback</span><span style="color:#24292E;">(</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e.matches) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 视口不超过 600 像素 */</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 视口超过 600 像素 */</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意，<code>MediaQueryList.removeListener()</code>方法不能撤销<code>MediaQueryList.onchange</code>属性指定的监听函数。</p>`,231),o=[e];function t(c,r,y,E,i,d){return a(),n("div",null,o)}const F=s(p,[["render",t]]);export{h as __pageData,F as default};
