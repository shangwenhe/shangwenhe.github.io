import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.681fc4ae.js";const g=JSON.parse('{"title":"History 对象","description":"","frontmatter":{},"headers":[],"relativePath":"js/bom/history.md","filePath":"js/bom/history.md"}'),o={name:"js/bom/history.md"},l=p(`<h1 id="history-对象" tabindex="-1">History 对象 <a class="header-anchor" href="#history-对象" aria-label="Permalink to &quot;History 对象&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p><code>window.history</code>属性指向 History 对象，它表示当前窗口的浏览历史。</p><p>History 对象保存了当前窗口访问过的所有页面网址。下面代码表示当前窗口一共访问过3个网址。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.history.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.history.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 3</span></span></code></pre></div><p>由于安全原因，浏览器不允许脚本读取这些地址，但是允许在地址之间导航。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 后退到前一个网址</span></span>
<span class="line"><span style="color:#E1E4E8;">history.</span><span style="color:#B392F0;">back</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#E1E4E8;">history.</span><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 后退到前一个网址</span></span>
<span class="line"><span style="color:#24292E;">history.</span><span style="color:#6F42C1;">back</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#24292E;">history.</span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span></code></pre></div><p>浏览器工具栏的“前进”和“后退”按钮，其实就是对 History 对象进行操作。</p><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h2><p>History 对象主要有两个属性。</p><ul><li><code>History.length</code>：当前窗口访问过的网址数量（包括当前网页）</li><li><code>History.state</code>：History 堆栈最上层的状态值（详见下文）</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 当前窗口访问过多少个网页</span></span>
<span class="line"><span style="color:#E1E4E8;">window.history.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// History 对象的当前状态</span></span>
<span class="line"><span style="color:#6A737D;">// 通常是 undefined，即未设置</span></span>
<span class="line"><span style="color:#E1E4E8;">window.history.state </span><span style="color:#6A737D;">// undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 当前窗口访问过多少个网页</span></span>
<span class="line"><span style="color:#24292E;">window.history.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// History 对象的当前状态</span></span>
<span class="line"><span style="color:#6A737D;">// 通常是 undefined，即未设置</span></span>
<span class="line"><span style="color:#24292E;">window.history.state </span><span style="color:#6A737D;">// undefined</span></span></code></pre></div><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><h3 id="history-back-、history-forward-、history-go" tabindex="-1">History.back()、History.forward()、History.go() <a class="header-anchor" href="#history-back-、history-forward-、history-go" aria-label="Permalink to &quot;History.back()、History.forward()、History.go()&quot;">​</a></h3><p>这三个方法用于在历史之中移动。</p><ul><li><code>History.back()</code>：移动到上一个网址，等同于点击浏览器的后退键。对于第一个访问的网址，该方法无效果。</li><li><code>History.forward()</code>：移动到下一个网址，等同于点击浏览器的前进键。对于最后一个访问的网址，该方法无效果。</li><li><code>History.go()</code>：接受一个整数作为参数，以当前网址为基准，移动到参数指定的网址，比如<code>go(1)</code>相当于<code>forward()</code>，<code>go(-1)</code>相当于<code>back()</code>。如果参数超过实际存在的网址范围，该方法无效果；如果不指定参数，默认参数为<code>0</code>，相当于刷新当前页面。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">history.</span><span style="color:#B392F0;">back</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">history.</span><span style="color:#B392F0;">forward</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">history.</span><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">history.</span><span style="color:#6F42C1;">back</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">history.</span><span style="color:#6F42C1;">forward</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">history.</span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span></code></pre></div><p><code>history.go(0)</code>相当于刷新当前页面。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">history.</span><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 刷新当前页面</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">history.</span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 刷新当前页面</span></span></code></pre></div><p>注意，移动到以前访问过的页面时，页面通常是从浏览器缓存之中加载，而不是重新要求服务器发送新的网页。</p><h3 id="history-pushstate" tabindex="-1">History.pushState() <a class="header-anchor" href="#history-pushstate" aria-label="Permalink to &quot;History.pushState()&quot;">​</a></h3><p><code>History.pushState()</code>方法用于在历史中添加一条记录。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.history.</span><span style="color:#B392F0;">pushState</span><span style="color:#E1E4E8;">(state, title, url)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.history.</span><span style="color:#6F42C1;">pushState</span><span style="color:#24292E;">(state, title, url)</span></span></code></pre></div><p>该方法接受三个参数，依次为：</p><ul><li><code>state</code>：一个与添加的记录相关联的状态对象，主要用于<code>popstate</code>事件。该事件触发时，该对象会传入回调函数。也就是说，浏览器会将这个对象序列化以后保留在本地，重新载入这个页面的时候，可以拿到这个对象。如果不需要这个对象，此处可以填<code>null</code>。</li><li><code>title</code>：新页面的标题。但是，现在所有浏览器都忽视这个参数，所以这里可以填空字符串。</li><li><code>url</code>：新的网址，必须与当前页面处在同一个域。浏览器的地址栏将显示这个网址。</li></ul><p>假定当前网址是<code>example.com/1.html</code>，使用<code>pushState()</code>方法在浏览记录（History 对象）中添加一个新记录。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> stateObj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { foo: </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">history.</span><span style="color:#B392F0;">pushState</span><span style="color:#E1E4E8;">(stateObj, </span><span style="color:#9ECBFF;">&#39;page 2&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2.html&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> stateObj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { foo: </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">history.</span><span style="color:#6F42C1;">pushState</span><span style="color:#24292E;">(stateObj, </span><span style="color:#032F62;">&#39;page 2&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;2.html&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>添加新记录后，浏览器地址栏立刻显示<code>example.com/2.html</code>，但并不会跳转到<code>2.html</code>，甚至也不会检查<code>2.html</code>是否存在，它只是成为浏览历史中的最新记录。这时，在地址栏输入一个新的地址(比如访问<code>google.com</code>)，然后点击了倒退按钮，页面的 URL 将显示<code>2.html</code>；你再点击一次倒退按钮，URL 将显示<code>1.html</code>。</p><p>总之，<code>pushState()</code>方法不会触发页面刷新，只是导致 History 对象发生变化，地址栏会有反应。</p><p>使用该方法之后，就可以用<code>History.state</code>属性读出状态对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> stateObj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { foo: </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">history.</span><span style="color:#B392F0;">pushState</span><span style="color:#E1E4E8;">(stateObj, </span><span style="color:#9ECBFF;">&#39;page 2&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2.html&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">history.state </span><span style="color:#6A737D;">// {foo: &quot;bar&quot;}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> stateObj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { foo: </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">history.</span><span style="color:#6F42C1;">pushState</span><span style="color:#24292E;">(stateObj, </span><span style="color:#032F62;">&#39;page 2&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;2.html&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">history.state </span><span style="color:#6A737D;">// {foo: &quot;bar&quot;}</span></span></code></pre></div><p>如果<code>pushState</code>的 URL 参数设置了一个新的锚点值（即<code>hash</code>），并不会触发<code>hashchange</code>事件。反过来，如果 URL 的锚点值变了，则会在 History 对象创建一条浏览记录。</p><p>如果<code>pushState()</code>方法设置了一个跨域网址，则会报错。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#6A737D;">// 当前网址为 http://example.com</span></span>
<span class="line"><span style="color:#E1E4E8;">history.</span><span style="color:#B392F0;">pushState</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;https://twitter.com/hello&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#6A737D;">// 当前网址为 http://example.com</span></span>
<span class="line"><span style="color:#24292E;">history.</span><span style="color:#6F42C1;">pushState</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;https://twitter.com/hello&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>上面代码中，<code>pushState</code>想要插入一个跨域的网址，导致报错。这样设计的目的是，防止恶意代码让用户以为他们是在另一个网站上，因为这个方法不会导致页面跳转。</p><h3 id="history-replacestate" tabindex="-1">History.replaceState() <a class="header-anchor" href="#history-replacestate" aria-label="Permalink to &quot;History.replaceState()&quot;">​</a></h3><p><code>History.replaceState()</code>方法用来修改 History 对象的当前记录，其他都与<code>pushState()</code>方法一模一样。</p><p>假定当前网页是<code>example.com/example.html</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">history.</span><span style="color:#B392F0;">pushState</span><span style="color:#E1E4E8;">({page: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">}, </span><span style="color:#9ECBFF;">&#39;title 1&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;?page=1&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// URL 显示为 http://example.com/example.html?page=1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">history.</span><span style="color:#B392F0;">pushState</span><span style="color:#E1E4E8;">({page: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">}, </span><span style="color:#9ECBFF;">&#39;title 2&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;?page=2&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// URL 显示为 http://example.com/example.html?page=2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">history.</span><span style="color:#B392F0;">replaceState</span><span style="color:#E1E4E8;">({page: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">}, </span><span style="color:#9ECBFF;">&#39;title 3&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;?page=3&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// URL 显示为 http://example.com/example.html?page=3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">history.</span><span style="color:#B392F0;">back</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">// URL 显示为 http://example.com/example.html?page=1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">history.</span><span style="color:#B392F0;">back</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">// URL 显示为 http://example.com/example.html</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">history.</span><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// URL 显示为 http://example.com/example.html?page=3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">history.</span><span style="color:#6F42C1;">pushState</span><span style="color:#24292E;">({page: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">}, </span><span style="color:#032F62;">&#39;title 1&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;?page=1&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// URL 显示为 http://example.com/example.html?page=1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">history.</span><span style="color:#6F42C1;">pushState</span><span style="color:#24292E;">({page: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">}, </span><span style="color:#032F62;">&#39;title 2&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;?page=2&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// URL 显示为 http://example.com/example.html?page=2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">history.</span><span style="color:#6F42C1;">replaceState</span><span style="color:#24292E;">({page: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">}, </span><span style="color:#032F62;">&#39;title 3&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;?page=3&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// URL 显示为 http://example.com/example.html?page=3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">history.</span><span style="color:#6F42C1;">back</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">// URL 显示为 http://example.com/example.html?page=1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">history.</span><span style="color:#6F42C1;">back</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">// URL 显示为 http://example.com/example.html</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">history.</span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// URL 显示为 http://example.com/example.html?page=3</span></span></code></pre></div><h2 id="popstate-事件" tabindex="-1">popstate 事件 <a class="header-anchor" href="#popstate-事件" aria-label="Permalink to &quot;popstate 事件&quot;">​</a></h2><p>每当同一个文档的浏览历史（即<code>history</code>对象）出现变化时，就会触发<code>popstate</code>事件。</p><p>注意，仅仅调用<code>pushState()</code>方法或<code>replaceState()</code>方法 ，并不会触发该事件，只有用户点击浏览器倒退按钮和前进按钮，或者使用 JavaScript 调用<code>History.back()</code>、<code>History.forward()</code>、<code>History.go()</code>方法时才会触发。另外，该事件只针对同一个文档，如果浏览历史的切换，导致加载不同的文档，该事件也不会触发。</p><p>使用的时候，可以为<code>popstate</code>事件指定回调函数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">onpopstate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;location: &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> document.location);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;state: &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(event.state));</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 或者</span></span>
<span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;popstate&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;location: &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> document.location);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;state: &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(event.state));</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">onpopstate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;location: &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> document.location);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;state: &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(event.state));</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 或者</span></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;popstate&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;location: &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> document.location);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;state: &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(event.state));</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>回调函数的参数是一个<code>event</code>事件对象，它的<code>state</code>属性指向<code>pushState</code>和<code>replaceState</code>方法为当前 URL 所提供的状态对象（即这两个方法的第一个参数）。上面代码中的<code>event.state</code>，就是通过<code>pushState</code>和<code>replaceState</code>方法，为当前 URL 绑定的<code>state</code>对象。</p><p>这个<code>state</code>对象也可以直接通过<code>history</code>对象读取。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> currentState </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> history.state;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> currentState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> history.state;</span></span></code></pre></div><p>注意，页面第一次加载的时候，浏览器不会触发<code>popstate</code>事件。</p>`,48),e=[l];function t(c,r,y,i,E,d){return a(),n("div",null,e)}const F=s(o,[["render",t]]);export{g as __pageData,F as default};
