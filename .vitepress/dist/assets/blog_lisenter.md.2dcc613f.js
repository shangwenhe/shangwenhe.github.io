import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.681fc4ae.js";const C=JSON.parse('{"title":"实时监听端口状态。并重启服务","description":"","frontmatter":{},"headers":[],"relativePath":"blog/lisenter.md","filePath":"blog/lisenter.md"}'),p={name:"blog/lisenter.md"},o=l(`<h1 id="实时监听端口状态。并重启服务" tabindex="-1">实时监听端口状态。并重启服务 <a class="header-anchor" href="#实时监听端口状态。并重启服务" aria-label="Permalink to &quot;实时监听端口状态。并重启服务&quot;">​</a></h1><p>使用场景： 服务需要依赖第三方接口。本地开发过程中有时因为网络问题导致服务终止。</p><blockquote><p>监听端口，如果端口没有服务则重启服务 注意：它不是守护进程，只是一个 循环监听，所以不可以使用在生产环境。</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  len</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">lsof</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-i</span><span style="color:#9ECBFF;"> :8443 </span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">grep</span><span style="color:#9ECBFF;"> node  </span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">wc</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-l</span><span style="color:#9ECBFF;">)</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [ $len </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> ]; </span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./index.js</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">fi</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">done</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;OK&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  len</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">lsof</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-i</span><span style="color:#032F62;"> :8443 </span><span style="color:#D73A49;">|</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#032F62;"> node  </span><span style="color:#D73A49;">|</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">wc</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-l</span><span style="color:#032F62;">)</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> [ $len </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> ]; </span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./index.js</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">fi</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;OK&#39;</span></span></code></pre></div>`,4),e=[o];function t(c,r,y,E,F,i){return n(),a("div",null,e)}const _=s(p,[["render",t]]);export{C as __pageData,_ as default};
