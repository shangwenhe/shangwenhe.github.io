import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.681fc4ae.js";const C=JSON.parse('{"title":"Linux资源管控","description":"","frontmatter":{},"headers":[],"relativePath":"blog/namespace.md","filePath":"blog/namespace.md"}'),l={name:"blog/namespace.md"},o=p(`<h1 id="linux资源管控" tabindex="-1">Linux资源管控 <a class="header-anchor" href="#linux资源管控" aria-label="Permalink to &quot;Linux资源管控&quot;">​</a></h1><h2 id="一-资源隔离" tabindex="-1">一. 资源隔离 <a class="header-anchor" href="#一-资源隔离" aria-label="Permalink to &quot;一. 资源隔离&quot;">​</a></h2><h3 id="namespace是什么" tabindex="-1">Namespace是什么？ <a class="header-anchor" href="#namespace是什么" aria-label="Permalink to &quot;Namespace是什么？&quot;">​</a></h3><blockquote><p>namespace 是 Linux 内核用来隔离内核资源的方式。</p><p>它是对全局系统资源的封装隔离， 处于不同 namespace 的进程拥有独立的全局系统资源， 改变一个 namespace 中的系统资源只会影响当前 namespace 里的进程， 对其他 namespace 中的进程没有影响</p><p>每个namespace下的资源对于其他namespace下的资源是透明的，不可见的。 从操作系统角度看，可以出现多个<code>相同pid</code>的进程， 由于它们属于不同的namespace，所以进程之间并不冲突。 从用户角度看,只能看到属于用户自己namespace下的资源，</p></blockquote><p>例如:ps命令只能列出自己namespace下的进程。</p><h4 id="内核中实现了六种-namespace" tabindex="-1">内核中实现了六种 namespace， <a class="header-anchor" href="#内核中实现了六种-namespace" aria-label="Permalink to &quot;内核中实现了六种 namespace，&quot;">​</a></h4><p>按照引入的先后顺序，列表如下：</p><p>namespace 引入内核版本 被隔离的全局系统资源 在容器语境下的隔离效果</p><h5 id="_1-mount-namespaces" tabindex="-1">1. Mount namespaces <a class="header-anchor" href="#_1-mount-namespaces" aria-label="Permalink to &quot;1. Mount namespaces&quot;">​</a></h5><blockquote><p>文档系统挂接点 每个容器能看到不同的文档系统层次结构</p></blockquote><h5 id="_2-uts-namespaces" tabindex="-1">2. UTS namespaces <a class="header-anchor" href="#_2-uts-namespaces" aria-label="Permalink to &quot;2. UTS namespaces&quot;">​</a></h5><blockquote><p>nodename 和 domainname 每个容器可以有自己的 hostname 和 domainame</p></blockquote><h5 id="_3-pid-namespaces" tabindex="-1">3. PID namespaces <a class="header-anchor" href="#_3-pid-namespaces" aria-label="Permalink to &quot;3. PID namespaces&quot;">​</a></h5><blockquote><p>进程 ID 数字空间 (process ID number space) 每个 PID namespace 中的进程可以有其独立的 PID； 每个容器可以有其 PID 为 1 的root 进程；也使得容器可以在不同的 host 之间迁移，因为 namespace 中的进程 ID 和 host 无关了。这也使得容器中的每个进程有两个PID：容器中的 PID 和 host 上的 PID。</p></blockquote><h5 id="_4-ipc-namespaces" tabindex="-1">4.IPC namespaces <a class="header-anchor" href="#_4-ipc-namespaces" aria-label="Permalink to &quot;4.IPC namespaces&quot;">​</a></h5><blockquote><p>每个容器有其自己的 System IPC 和 POSIX 消息队列文档系统，因此，只有在同一个 IPC namespace 的进程之间才能互相通信</p></blockquote><h5 id="_5-network-namespaces" tabindex="-1">5. Network namespaces <a class="header-anchor" href="#_5-network-namespaces" aria-label="Permalink to &quot;5. Network namespaces&quot;">​</a></h5><blockquote><p>网络相关的系统资源 每个容器用有其独立的网络设备，IP 地址，IP 路由表，/proc/net 目录，端口号等等。这也使得一个 host 上多个容器内的同一个应用都绑定到各自容器的 80 端口上。</p></blockquote><h5 id="_6-user-namespaces" tabindex="-1">6. User namespaces <a class="header-anchor" href="#_6-user-namespaces" aria-label="Permalink to &quot;6. User namespaces&quot;">​</a></h5><blockquote><p>用户和组 ID 空间 在 user namespace 中的进程的用户和组 ID 可以和在 host 上不同； 每个 container 可以有不同的 user 和 group id；一个 host 上的非特权用户可以成为 user namespace 中的特权用户；</p></blockquote><h3 id="namespace的用途" tabindex="-1">Namespace的用途? <a class="header-anchor" href="#namespace的用途" aria-label="Permalink to &quot;Namespace的用途?&quot;">​</a></h3><blockquote><p>当前linux内核中提供了7类namespace,分别用于:</p><p>Cgroup :Cgroup 根目录 IPC :System V IPC/POSIX 消息队列 Network :网络设备/协议栈/端口 Mount :挂载点 PID :进程ID User :用户和group ID UTS :Hostname和NIS域名</p></blockquote><h3 id="查看一个进程所属的namespace" tabindex="-1">查看一个进程所属的namespace <a class="header-anchor" href="#查看一个进程所属的namespace" aria-label="Permalink to &quot;查看一个进程所属的namespace&quot;">​</a></h3><p><strong>得到一个nginx进程的id</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@galaxy-node-master </span><span style="color:#79B8FF;">2675</span><span style="color:#E1E4E8;">]#  ps auxfww </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#B392F0;">root</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">10091</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">112824</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">988</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pts/0</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">S+</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">:26</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">:00</span><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">\\_</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--color=auto</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nginx:</span></span>
<span class="line"><span style="color:#B392F0;">root</span><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">2425</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">20104</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">3644</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">?</span><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">Ss</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">09</span><span style="color:#9ECBFF;">:40</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">:00</span><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">\\_</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nginx:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">master</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">process</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/opt/gitlab/embedded/sbin/nginx</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/var/opt/gitlab/nginx</span></span>
<span class="line"><span style="color:#B392F0;">polkitd</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">2452</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">24356</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">5668</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">?</span><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">S</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">09</span><span style="color:#9ECBFF;">:40</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">:00</span><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">\\_</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nginx:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">worker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">process</span></span>
<span class="line"><span style="color:#B392F0;">polkitd</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">2454</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">24496</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">6384</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">?</span><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">S</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">09</span><span style="color:#9ECBFF;">:40</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">:00</span><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">\\_</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nginx:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">worker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">process</span></span>
<span class="line"><span style="color:#B392F0;">polkitd</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">2455</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">24356</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">5668</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">?</span><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">S</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">09</span><span style="color:#9ECBFF;">:40</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">:00</span><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">\\_</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nginx:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">worker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">process</span></span>
<span class="line"><span style="color:#B392F0;">polkitd</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">2456</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">24356</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">5668</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">?</span><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">S</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">09</span><span style="color:#9ECBFF;">:40</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">:00</span><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">\\_</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nginx:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">worker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">process</span></span>
<span class="line"><span style="color:#B392F0;">polkitd</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">2457</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">20320</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1444</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">?</span><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">S</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">09</span><span style="color:#9ECBFF;">:40</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">:00</span><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">\\_</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nginx:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cache</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">manager</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">process</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@galaxy-node-master </span><span style="color:#005CC5;">2675</span><span style="color:#24292E;">]#  ps auxfww </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#6F42C1;">root</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">10091</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">112824</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">988</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pts/0</span><span style="color:#24292E;">    </span><span style="color:#032F62;">S+</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">10</span><span style="color:#032F62;">:26</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">:00</span><span style="color:#24292E;">          </span><span style="color:#005CC5;">\\_</span><span style="color:#24292E;"> </span><span style="color:#032F62;">grep</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--color=auto</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx:</span></span>
<span class="line"><span style="color:#6F42C1;">root</span><span style="color:#24292E;">       </span><span style="color:#005CC5;">2425</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">20104</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">3644</span><span style="color:#24292E;"> </span><span style="color:#032F62;">?</span><span style="color:#24292E;">        </span><span style="color:#032F62;">Ss</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">09</span><span style="color:#032F62;">:40</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">:00</span><span style="color:#24292E;">      </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">   </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">   </span><span style="color:#6F42C1;">\\_</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">master</span><span style="color:#24292E;"> </span><span style="color:#032F62;">process</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/opt/gitlab/embedded/sbin/nginx</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/var/opt/gitlab/nginx</span></span>
<span class="line"><span style="color:#6F42C1;">polkitd</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">2452</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">24356</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">5668</span><span style="color:#24292E;"> </span><span style="color:#032F62;">?</span><span style="color:#24292E;">        </span><span style="color:#032F62;">S</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">09</span><span style="color:#032F62;">:40</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">:00</span><span style="color:#24292E;">      </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">   </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">       </span><span style="color:#6F42C1;">\\_</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">worker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">process</span></span>
<span class="line"><span style="color:#6F42C1;">polkitd</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">2454</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">24496</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">6384</span><span style="color:#24292E;"> </span><span style="color:#032F62;">?</span><span style="color:#24292E;">        </span><span style="color:#032F62;">S</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">09</span><span style="color:#032F62;">:40</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">:00</span><span style="color:#24292E;">      </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">   </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">       </span><span style="color:#6F42C1;">\\_</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">worker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">process</span></span>
<span class="line"><span style="color:#6F42C1;">polkitd</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">2455</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">24356</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">5668</span><span style="color:#24292E;"> </span><span style="color:#032F62;">?</span><span style="color:#24292E;">        </span><span style="color:#032F62;">S</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">09</span><span style="color:#032F62;">:40</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">:00</span><span style="color:#24292E;">      </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">   </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">       </span><span style="color:#6F42C1;">\\_</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">worker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">process</span></span>
<span class="line"><span style="color:#6F42C1;">polkitd</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">2456</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">24356</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">5668</span><span style="color:#24292E;"> </span><span style="color:#032F62;">?</span><span style="color:#24292E;">        </span><span style="color:#032F62;">S</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">09</span><span style="color:#032F62;">:40</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">:00</span><span style="color:#24292E;">      </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">   </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">       </span><span style="color:#6F42C1;">\\_</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">worker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">process</span></span>
<span class="line"><span style="color:#6F42C1;">polkitd</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">2457</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">20320</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1444</span><span style="color:#24292E;"> </span><span style="color:#032F62;">?</span><span style="color:#24292E;">        </span><span style="color:#032F62;">S</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">09</span><span style="color:#032F62;">:40</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">:00</span><span style="color:#24292E;">      </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">   </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">       </span><span style="color:#6F42C1;">\\_</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cache</span><span style="color:#24292E;"> </span><span style="color:#032F62;">manager</span><span style="color:#24292E;"> </span><span style="color:#032F62;">process</span></span></code></pre></div><p><code>我们选择2452这个进程</code></p><p><strong>查看2452这个进程的namespace</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@galaxy-node-master </span><span style="color:#79B8FF;">2675</span><span style="color:#E1E4E8;">]# ls /proc/2452/ns/</span></span>
<span class="line"><span style="color:#B392F0;">ipc</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">mnt</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">net</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">pid</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">user</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">uts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@galaxy-node-master </span><span style="color:#005CC5;">2675</span><span style="color:#24292E;">]# ls /proc/2452/ns/</span></span>
<span class="line"><span style="color:#6F42C1;">ipc</span><span style="color:#24292E;">  </span><span style="color:#032F62;">mnt</span><span style="color:#24292E;">  </span><span style="color:#032F62;">net</span><span style="color:#24292E;">  </span><span style="color:#032F62;">pid</span><span style="color:#24292E;">  </span><span style="color:#032F62;">user</span><span style="color:#24292E;">  </span><span style="color:#032F62;">uts</span></span></code></pre></div><p><strong>这些namespace文件的类型是符号链接</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@galaxy-node-master </span><span style="color:#79B8FF;">2675</span><span style="color:#E1E4E8;">]# ll /proc/2452/ns/</span></span>
<span class="line"><span style="color:#B392F0;">总用量</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#B392F0;">lrwxrwxrwx.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">polkitd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">月</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">:00</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ipc</span><span style="color:#E1E4E8;"> -</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ipc:[</span><span style="color:#79B8FF;">4026532754</span><span style="color:#9ECBFF;">]</span></span>
<span class="line"><span style="color:#B392F0;">lrwxrwxrwx.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">polkitd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">月</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">:00</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mnt</span><span style="color:#E1E4E8;"> -</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mnt:[</span><span style="color:#79B8FF;">4026532752</span><span style="color:#9ECBFF;">]</span></span>
<span class="line"><span style="color:#B392F0;">lrwxrwxrwx.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">polkitd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">月</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">:00</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">net</span><span style="color:#E1E4E8;"> -</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">net:[</span><span style="color:#79B8FF;">4026532757</span><span style="color:#9ECBFF;">]</span></span>
<span class="line"><span style="color:#B392F0;">lrwxrwxrwx.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">polkitd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">月</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">:00</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pid</span><span style="color:#E1E4E8;"> -</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pid:[</span><span style="color:#79B8FF;">4026532755</span><span style="color:#9ECBFF;">]</span></span>
<span class="line"><span style="color:#B392F0;">lrwxrwxrwx.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">polkitd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">月</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">:00</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">user</span><span style="color:#E1E4E8;"> -</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">user:[</span><span style="color:#79B8FF;">4026531837</span><span style="color:#9ECBFF;">]</span></span>
<span class="line"><span style="color:#B392F0;">lrwxrwxrwx.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">polkitd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">月</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">:00</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">uts</span><span style="color:#E1E4E8;"> -</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">uts:[</span><span style="color:#79B8FF;">4026532753</span><span style="color:#9ECBFF;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@galaxy-node-master </span><span style="color:#005CC5;">2675</span><span style="color:#24292E;">]# ll /proc/2452/ns/</span></span>
<span class="line"><span style="color:#6F42C1;">总用量</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#6F42C1;">lrwxrwxrwx.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">polkitd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">input</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">月</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#032F62;">:00</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ipc</span><span style="color:#24292E;"> -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ipc:[</span><span style="color:#005CC5;">4026532754</span><span style="color:#032F62;">]</span></span>
<span class="line"><span style="color:#6F42C1;">lrwxrwxrwx.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">polkitd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">input</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">月</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#032F62;">:00</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mnt</span><span style="color:#24292E;"> -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mnt:[</span><span style="color:#005CC5;">4026532752</span><span style="color:#032F62;">]</span></span>
<span class="line"><span style="color:#6F42C1;">lrwxrwxrwx.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">polkitd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">input</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">月</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#032F62;">:00</span><span style="color:#24292E;"> </span><span style="color:#032F62;">net</span><span style="color:#24292E;"> -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">net:[</span><span style="color:#005CC5;">4026532757</span><span style="color:#032F62;">]</span></span>
<span class="line"><span style="color:#6F42C1;">lrwxrwxrwx.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">polkitd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">input</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">月</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#032F62;">:00</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pid</span><span style="color:#24292E;"> -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pid:[</span><span style="color:#005CC5;">4026532755</span><span style="color:#032F62;">]</span></span>
<span class="line"><span style="color:#6F42C1;">lrwxrwxrwx.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">polkitd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">input</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">月</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#032F62;">:00</span><span style="color:#24292E;"> </span><span style="color:#032F62;">user</span><span style="color:#24292E;"> -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">user:[</span><span style="color:#005CC5;">4026531837</span><span style="color:#032F62;">]</span></span>
<span class="line"><span style="color:#6F42C1;">lrwxrwxrwx.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">polkitd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">input</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">月</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#032F62;">:00</span><span style="color:#24292E;"> </span><span style="color:#032F62;">uts</span><span style="color:#24292E;"> -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">uts:[</span><span style="color:#005CC5;">4026532753</span><span style="color:#032F62;">]</span></span></code></pre></div><p>链接文件的内容的格式为 xxx:[inode number]。 xxx 是 namespace 的类型， inode number 用来标识一个 namespace，</p><h3 id="查看一个进程的mnt-namespace信息" tabindex="-1">查看一个进程的mnt namespace信息 <a class="header-anchor" href="#查看一个进程的mnt-namespace信息" aria-label="Permalink to &quot;查看一个进程的mnt namespace信息&quot;">​</a></h3><p>mnt namespace的挂载点信息，记录在下面的3个文件中</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@galaxy-node-master </span><span style="color:#79B8FF;">2675</span><span style="color:#E1E4E8;">]# ll /proc/2452/mount</span><span style="color:#F97583;">*</span></span>
<span class="line"><span style="color:#B392F0;">-r--r--r--.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">polkitd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">月</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">:00</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/proc/2452/mountinfo</span></span>
<span class="line"><span style="color:#B392F0;">-r--r--r--.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">polkitd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">月</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">:00</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/proc/2452/mounts</span></span>
<span class="line"><span style="color:#B392F0;">-r--------.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">polkitd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">月</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">:00</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/proc/2452/mountstats</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@galaxy-node-master </span><span style="color:#005CC5;">2675</span><span style="color:#24292E;">]# ll /proc/2452/mount</span><span style="color:#D73A49;">*</span></span>
<span class="line"><span style="color:#6F42C1;">-r--r--r--.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">polkitd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">input</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">月</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#032F62;">:00</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/proc/2452/mountinfo</span></span>
<span class="line"><span style="color:#6F42C1;">-r--r--r--.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">polkitd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">input</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">月</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#032F62;">:00</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/proc/2452/mounts</span></span>
<span class="line"><span style="color:#6F42C1;">-r--------.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">polkitd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">input</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">月</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#032F62;">:00</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/proc/2452/mountstats</span></span></code></pre></div><p>mnt namespace的作用:隔离mount point， 每个mnt namespace内的文件结构可以单独进行修改，互不影响</p><h4 id="我们做一个试验验证mnt-namespace" tabindex="-1">我们做一个试验验证mnt namespace: <a class="header-anchor" href="#我们做一个试验验证mnt-namespace" aria-label="Permalink to &quot;我们做一个试验验证mnt namespace:&quot;">​</a></h4><p>先创建两个目录,下面各创建一个文件:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# mkdir /root/hosta</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# touch /root/hosta/a.txt</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# mkdir /root/hostb</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# touch /root/hostb/b.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# mkdir /root/hosta</span></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# touch /root/hosta/a.txt</span></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# mkdir /root/hostb</span></span>
<span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# touch /root/hostb/b.txt</span></span></code></pre></div><p>查看当前的mnt目录:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# ls /mnt</span></span>
<span class="line"><span style="color:#B392F0;">hgfs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# ls /mnt</span></span>
<span class="line"><span style="color:#6F42C1;">hgfs</span></span></code></pre></div><p><strong>新开启两个终端：</strong></p><h5 id="在终端a中进行如下操作" tabindex="-1">在<strong>终端a</strong>中进行如下操作: <a class="header-anchor" href="#在终端a中进行如下操作" aria-label="Permalink to &quot;在**终端a**中进行如下操作:&quot;">​</a></h5><p>创建新的mount namespace和uts namespace,并运行bash</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# unshare --mount --uts bash</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# unshare --mount --uts bash</span></span></code></pre></div><p>修改主机名为hosta</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# hostname hosta &amp;&amp; </span><span style="color:#79B8FF;">exec</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bash</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# hostname hosta &amp;&amp; </span><span style="color:#005CC5;">exec</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bash</span></span></code></pre></div><p>查看当前进程中mnt和uts两个namespace的inode number</p><blockquote><p>$$:当前的进程id</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@hosta </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# readlink /proc/</span><span style="color:#79B8FF;">$$</span><span style="color:#E1E4E8;">/ns/{</span><span style="color:#B392F0;">mnt,uts}</span></span>
<span class="line"><span style="color:#B392F0;">mnt:[4026532774]</span></span>
<span class="line"><span style="color:#B392F0;">uts:[4026532775]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@hosta </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# readlink /proc/</span><span style="color:#005CC5;">$$</span><span style="color:#24292E;">/ns/{</span><span style="color:#6F42C1;">mnt,uts}</span></span>
<span class="line"><span style="color:#6F42C1;">mnt:[4026532774]</span></span>
<span class="line"><span style="color:#6F42C1;">uts:[4026532775]</span></span></code></pre></div><p>挂载hosta目录到mnt下</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@hosta </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# mount --bind hosta/ /mnt/</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@hosta </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# ls /mnt</span></span>
<span class="line"><span style="color:#B392F0;">a.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@hosta </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# mount --bind hosta/ /mnt/</span></span>
<span class="line"><span style="color:#24292E;">[root@hosta </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# ls /mnt</span></span>
<span class="line"><span style="color:#6F42C1;">a.txt</span></span></code></pre></div><p><strong>回到最早的localhost终端</strong>中查看:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# ls /mnt</span></span>
<span class="line"><span style="color:#B392F0;">hgfs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# ls /mnt</span></span>
<span class="line"><span style="color:#6F42C1;">hgfs</span></span></code></pre></div><p>/mnt目录下的内容没有变，<code>说明localhost终端与 hosta终端的mount namespace是成功隔离</code>的</p><h5 id="在终端b中进行以下操作" tabindex="-1"><strong>在终端b中进行以下操作:</strong> <a class="header-anchor" href="#在终端b中进行以下操作" aria-label="Permalink to &quot;**在终端b中进行以下操作:**&quot;">​</a></h5><p>创建新的mount namespace和uts namespace,并运行bash</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# unshare --mount --uts bash</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# unshare --mount --uts bash</span></span></code></pre></div><p>修改主机名为hostb</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# hostname hostb &amp;&amp; </span><span style="color:#79B8FF;">exec</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bash</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# hostname hostb &amp;&amp; </span><span style="color:#005CC5;">exec</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bash</span></span></code></pre></div><p>查看当前进程中mnt和uts两个namespace的inode number</p><blockquote><p>$$:当前的进程id</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@hostb </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# readlink /proc/</span><span style="color:#79B8FF;">$$</span><span style="color:#E1E4E8;">/ns/{</span><span style="color:#B392F0;">mnt,uts}</span></span>
<span class="line"><span style="color:#B392F0;">mnt:[4026532706]</span></span>
<span class="line"><span style="color:#B392F0;">uts:[4026532707]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@hostb </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# readlink /proc/</span><span style="color:#005CC5;">$$</span><span style="color:#24292E;">/ns/{</span><span style="color:#6F42C1;">mnt,uts}</span></span>
<span class="line"><span style="color:#6F42C1;">mnt:[4026532706]</span></span>
<span class="line"><span style="color:#6F42C1;">uts:[4026532707]</span></span></code></pre></div><p>挂载hostb目录到mnt下</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@hostb </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# mount --bind hostb/ /mnt/</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@hostb </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# ls /mnt</span></span>
<span class="line"><span style="color:#B392F0;">b.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@hostb </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# mount --bind hostb/ /mnt/</span></span>
<span class="line"><span style="color:#24292E;">[root@hostb </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# ls /mnt</span></span>
<span class="line"><span style="color:#6F42C1;">b.txt</span></span></code></pre></div><h3 id="测试pid-namespace" tabindex="-1">测试pid namespace <a class="header-anchor" href="#测试pid-namespace" aria-label="Permalink to &quot;测试pid namespace&quot;">​</a></h3><blockquote><p>fork:以unshare的子进程来启动bash</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# unshare --pid --uts --mount --fork bash</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# unshare --pid --uts --mount --fork bash</span></span></code></pre></div><p>修改hostname,作为标识</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@localhost </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# hostname hosta &amp;&amp; </span><span style="color:#79B8FF;">exec</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bash</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@hosta </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# echo </span><span style="color:#79B8FF;">$$</span></span>
<span class="line"><span style="color:#B392F0;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@localhost </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# hostname hosta &amp;&amp; </span><span style="color:#005CC5;">exec</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bash</span></span>
<span class="line"><span style="color:#24292E;">[root@hosta </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# echo </span><span style="color:#005CC5;">$$</span></span>
<span class="line"><span style="color:#6F42C1;">1</span></span></code></pre></div><p>当前的进程id是1</p><blockquote><p>-p:显示pid -l: 显示长的行(不按COLUMNS这个环境变量去截取宽度)</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@hosta </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# pstree -pl</span></span>
<span class="line"><span style="color:#B392F0;">systemd(1</span><span style="color:#E1E4E8;">)─┬─ModemManager(</span><span style="color:#B392F0;">871</span><span style="color:#E1E4E8;">)─┬─{</span><span style="color:#B392F0;">ModemManager}(911</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#B392F0;">│</span><span style="color:#E1E4E8;">                   </span><span style="color:#9ECBFF;">└─{ModemManager}</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">924</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#B392F0;">├─NetworkManager(867</span><span style="color:#E1E4E8;">)─┬─dhclient(</span><span style="color:#B392F0;">993</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#B392F0;">│</span><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">├─{NetworkManager}</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">915</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#B392F0;">│</span><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">└─{NetworkManager}</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">925</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">…</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@hosta </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# pstree -pl</span></span>
<span class="line"><span style="color:#6F42C1;">systemd(1</span><span style="color:#24292E;">)─┬─ModemManager(</span><span style="color:#6F42C1;">871</span><span style="color:#24292E;">)─┬─{</span><span style="color:#6F42C1;">ModemManager}(911</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6F42C1;">│</span><span style="color:#24292E;">                   </span><span style="color:#032F62;">└─{ModemManager}</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">924</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6F42C1;">├─NetworkManager(867</span><span style="color:#24292E;">)─┬─dhclient(</span><span style="color:#6F42C1;">993</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6F42C1;">│</span><span style="color:#24292E;">                     </span><span style="color:#032F62;">├─{NetworkManager}</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">915</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6F42C1;">│</span><span style="color:#24292E;">                     </span><span style="color:#032F62;">└─{NetworkManager}</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">925</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">…</span></span></code></pre></div><p>用pstree可以看到:pid为1的进程是systemd</p><p>这是因为这里的proc是unshare给带来的mount namespace的/proc</p><p>包括查看ns下的inode number也是如此，</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@hosta </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# readlink /proc/</span><span style="color:#79B8FF;">$$</span><span style="color:#E1E4E8;">/ns/{</span><span style="color:#B392F0;">pid,uts,mnt}</span></span>
<span class="line"><span style="color:#B392F0;">pid:[4026531836]</span></span>
<span class="line"><span style="color:#B392F0;">uts:[4026531838]</span></span>
<span class="line"><span style="color:#B392F0;">mnt:[4026531840]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@hosta </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# readlink /proc/</span><span style="color:#005CC5;">$$</span><span style="color:#24292E;">/ns/{</span><span style="color:#6F42C1;">pid,uts,mnt}</span></span>
<span class="line"><span style="color:#6F42C1;">pid:[4026531836]</span></span>
<span class="line"><span style="color:#6F42C1;">uts:[4026531838]</span></span>
<span class="line"><span style="color:#6F42C1;">mnt:[4026531840]</span></span></code></pre></div><p>需要重新挂载/proc</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@hosta liuhongdi]# mount --types proc proc /proc/</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@hosta liuhongdi]# pstree -pl</span></span>
<span class="line"><span style="color:#B392F0;">bash(1</span><span style="color:#E1E4E8;">)───pstree(</span><span style="color:#B392F0;">70</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@hosta liuhongdi]# mount --types proc proc /proc/</span></span>
<span class="line"><span style="color:#24292E;">[root@hosta liuhongdi]# pstree -pl</span></span>
<span class="line"><span style="color:#6F42C1;">bash(1</span><span style="color:#24292E;">)───pstree(</span><span style="color:#6F42C1;">70</span><span style="color:#24292E;">)</span></span></code></pre></div><p>说明：如果用unshare启动bash时，加 --mount-proc 参数，则不需要重新挂载/proc</p><p>再次查看ns下的inode number，也可以正确显示了</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@hosta liuhongdi]# readlink /proc/</span><span style="color:#79B8FF;">$$</span><span style="color:#E1E4E8;">/ns/{</span><span style="color:#B392F0;">pid,uts,mnt}</span></span>
<span class="line"><span style="color:#B392F0;">pid:[4026532779]</span></span>
<span class="line"><span style="color:#B392F0;">uts:[4026532778]</span></span>
<span class="line"><span style="color:#B392F0;">mnt:[4026532777]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@hosta liuhongdi]# readlink /proc/</span><span style="color:#005CC5;">$$</span><span style="color:#24292E;">/ns/{</span><span style="color:#6F42C1;">pid,uts,mnt}</span></span>
<span class="line"><span style="color:#6F42C1;">pid:[4026532779]</span></span>
<span class="line"><span style="color:#6F42C1;">uts:[4026532778]</span></span>
<span class="line"><span style="color:#6F42C1;">mnt:[4026532777]</span></span></code></pre></div><h2 id="二-资源管控" tabindex="-1">二. 资源管控 <a class="header-anchor" href="#二-资源管控" aria-label="Permalink to &quot;二. 资源管控&quot;">​</a></h2><h3 id="cgroup概述" tabindex="-1">Cgroup概述 <a class="header-anchor" href="#cgroup概述" aria-label="Permalink to &quot;Cgroup概述&quot;">​</a></h3><p>在Linux里，一直以来就有对进程进行分组的概念和需求，比如session group， progress group等，后来随着人们对这方面的需求越来越多，比如需要追踪一组进程的内存和IO使用情况等，于是出现了cgroup,主要有两大用途:</p><ol><li><p>用来统一将进程进行分组</p></li><li><p>在分组的基础上对进程进行监控和资源控制管理等。</p></li></ol><p>cgroup是Linux下的一种将进程按组进行管理的机制，在用户层看来，cgroup技术就是把系统中的所有进程组织成一颗一颗独立的树，每棵树都包含系统的所有进程，树的每个节点是一个进程组，而每颗树又和一个或者多个subsystem关联，树的作用是将进程分组，而subsystem的作用就是对这些组进行操作。cgroup主要包括下面两部分：</p><p><strong>subsystem</strong></p><blockquote><p>一个subsystem就是一个内核模块，他被关联到一颗cgroup树之后，就会在树的每个节点(进程组)上做具体的操作。subsystem经常被称作&quot;resource controller&quot;，因为它主要被用来调度或者限制每个进程组的资源，但是这个说法不完全准确，因为有时我们将进程分组只是为了做一些监控，观察一下他们的状态，比如perf_event subsystem。</p></blockquote><p><strong>hierarchy</strong></p><blockquote><p>一个hierarchy可以理解为一棵cgroup树，树的每个节点就是一个进程组，每棵树都会与零到多个subsystem关联。在一颗树里面，会包含Linux系统中的所有进程，但每个进程只能属于一个节点(进程组)。系统中可以有很多颗cgroup树，每棵树都和不同的subsystem关联，一个进程可以属于多颗树，即一个进程可以属于多个进程组，只是这些进程组和不同的subsystem关联。</p><p>目前Linux支持12种subsystem，如果不考虑不与任何subsystem关联的情况(systemd就属于这种情况)，Linux里面最多可以建12颗cgroup树，每棵树关联一个subsystem，当然也可以只建一棵树，然后让这棵树关联所有的subsystem。当一颗cgroup树不和任何subsystem关联的时候，意味着这棵树只是将进程进行分组，至于要在分组的基础上做些什么，将由应用进程自己决定，systemd就是一个这样的例子。</p></blockquote><h3 id="对某个进程限制它使用cpu为50" tabindex="-1">对某个进程限制它使用cpu为50% <a class="header-anchor" href="#对某个进程限制它使用cpu为50" aria-label="Permalink to &quot;对某个进程限制它使用cpu为50%&quot;">​</a></h3><p>1、先写一个占用cpu较高的脚本</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">x</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> [ True ];</span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">    x</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">$x</span><span style="color:#9ECBFF;">+1</span></span>
<span class="line"><span style="color:#F97583;">done</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">x</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> [ True ];</span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">    x</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">$x</span><span style="color:#032F62;">+1</span></span>
<span class="line"><span style="color:#D73A49;">done</span><span style="color:#24292E;">;</span></span></code></pre></div><p>2、可以看到运行后cpu使用到了100%</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">PID</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">USER</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">PR</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">NI</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">VIRT</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">RES</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">SHR</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">S</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">%CPU</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">%MEM</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">TIME+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">COMMAND</span></span>
<span class="line"><span style="color:#B392F0;">20369</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">root</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">113452</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">1664</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">1196</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">R</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">100.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">:10.73</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sh</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">PID</span><span style="color:#24292E;"> </span><span style="color:#032F62;">USER</span><span style="color:#24292E;">      </span><span style="color:#032F62;">PR</span><span style="color:#24292E;">  </span><span style="color:#032F62;">NI</span><span style="color:#24292E;">    </span><span style="color:#032F62;">VIRT</span><span style="color:#24292E;">    </span><span style="color:#032F62;">RES</span><span style="color:#24292E;">    </span><span style="color:#032F62;">SHR</span><span style="color:#24292E;"> </span><span style="color:#032F62;">S</span><span style="color:#24292E;">  </span><span style="color:#032F62;">%CPU</span><span style="color:#24292E;"> </span><span style="color:#032F62;">%MEM</span><span style="color:#24292E;">     </span><span style="color:#032F62;">TIME+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">COMMAND</span></span>
<span class="line"><span style="color:#6F42C1;">20369</span><span style="color:#24292E;"> </span><span style="color:#032F62;">root</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">113452</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">1664</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">1196</span><span style="color:#24292E;"> </span><span style="color:#032F62;">R</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">100.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">:10.73</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sh</span></span></code></pre></div><p>3、创建控制组</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/sys/fs/cgroup/cpu/foo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/sys/fs/cgroup/cpu/foo</span></span></code></pre></div><p>4、下面用cgroups控制这个进程的cpu资源</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">50000</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/sys/fs/cgroup/cpu/foo/cpu.cfs_quota_us</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#将cpu.cfs_quota_us设为50000，相对于cpu.cfs_period_us的100000是50%</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20369</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">/sys/fs/cgroup/cpu/foo/tasks</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">50000</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/sys/fs/cgroup/cpu/foo/cpu.cfs_quota_us</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#将cpu.cfs_quota_us设为50000，相对于cpu.cfs_period_us的100000是50%</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20369</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">/sys/fs/cgroup/cpu/foo/tasks</span></span></code></pre></div><p>5、我们看到大概限制到了50%左右</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">PID</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">USER</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">PR</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">NI</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">VIRT</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">RES</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">SHR</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">S</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">%CPU</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">%MEM</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">TIME+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">COMMAND</span></span>
<span class="line"><span style="color:#B392F0;">20369</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">root</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">113828</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">1908</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">1196</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">R</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">49.8</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">:33.75</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sh</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">PID</span><span style="color:#24292E;"> </span><span style="color:#032F62;">USER</span><span style="color:#24292E;">      </span><span style="color:#032F62;">PR</span><span style="color:#24292E;">  </span><span style="color:#032F62;">NI</span><span style="color:#24292E;">    </span><span style="color:#032F62;">VIRT</span><span style="color:#24292E;">    </span><span style="color:#032F62;">RES</span><span style="color:#24292E;">    </span><span style="color:#032F62;">SHR</span><span style="color:#24292E;"> </span><span style="color:#032F62;">S</span><span style="color:#24292E;">  </span><span style="color:#032F62;">%CPU</span><span style="color:#24292E;"> </span><span style="color:#032F62;">%MEM</span><span style="color:#24292E;">     </span><span style="color:#032F62;">TIME+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">COMMAND</span></span>
<span class="line"><span style="color:#6F42C1;">20369</span><span style="color:#24292E;"> </span><span style="color:#032F62;">root</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">113828</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">1908</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">1196</span><span style="color:#24292E;"> </span><span style="color:#032F62;">R</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">49.8</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">:33.75</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sh</span></span></code></pre></div><p>6、cgroup控制组下还有很多对于cpu其他的一些控制</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@foreman </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# ls /sys/fs/cgroup/cpu/foo/</span></span>
<span class="line"><span style="color:#B392F0;">cgroup.clone_children</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">cpuacct.usage</span><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">cpu.rt_period_us</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">notify_on_release</span></span>
<span class="line"><span style="color:#B392F0;">cgroup.event_control</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">cpuacct.usage_percpu</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">cpu.rt_runtime_us</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">tasks</span></span>
<span class="line"><span style="color:#B392F0;">cgroup.procs</span><span style="color:#E1E4E8;">           </span><span style="color:#9ECBFF;">cpu.cfs_period_us</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">cpu.shares</span></span>
<span class="line"><span style="color:#B392F0;">cpuacct.stat</span><span style="color:#E1E4E8;">           </span><span style="color:#9ECBFF;">cpu.cfs_quota_us</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">cpu.stat</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@foreman </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# ls /sys/fs/cgroup/cpu/foo/</span></span>
<span class="line"><span style="color:#6F42C1;">cgroup.clone_children</span><span style="color:#24292E;">  </span><span style="color:#032F62;">cpuacct.usage</span><span style="color:#24292E;">          </span><span style="color:#032F62;">cpu.rt_period_us</span><span style="color:#24292E;">       </span><span style="color:#032F62;">notify_on_release</span></span>
<span class="line"><span style="color:#6F42C1;">cgroup.event_control</span><span style="color:#24292E;">   </span><span style="color:#032F62;">cpuacct.usage_percpu</span><span style="color:#24292E;">   </span><span style="color:#032F62;">cpu.rt_runtime_us</span><span style="color:#24292E;">      </span><span style="color:#032F62;">tasks</span></span>
<span class="line"><span style="color:#6F42C1;">cgroup.procs</span><span style="color:#24292E;">           </span><span style="color:#032F62;">cpu.cfs_period_us</span><span style="color:#24292E;">      </span><span style="color:#032F62;">cpu.shares</span></span>
<span class="line"><span style="color:#6F42C1;">cpuacct.stat</span><span style="color:#24292E;">           </span><span style="color:#032F62;">cpu.cfs_quota_us</span><span style="color:#24292E;">       </span><span style="color:#032F62;">cpu.stat</span></span></code></pre></div><h3 id="对某个进程限制它内存的使用" tabindex="-1">对某个进程限制它内存的使用 <a class="header-anchor" href="#对某个进程限制它内存的使用" aria-label="Permalink to &quot;对某个进程限制它内存的使用&quot;">​</a></h3><p>ls /sys/fs/cgroup/memory/cgtest/*</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cgroup.event_control</span><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">#用于eventfd的接口</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">memory.usage_in_bytes</span><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">#显示当前已用的内存</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">memory.limit_in_bytes</span><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">#设置/显示当前限制的内存额度</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">memory.failcnt</span><span style="color:#E1E4E8;">             </span><span style="color:#6A737D;">#显示内存使用量达到限制值的次数</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">memory.max_usage_in_bytes</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">#历史内存最大使用量</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">memory.soft_limit_in_bytes</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#设置/显示当前限制的内存软额度</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">memory.stat</span><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">#显示当前cgroup的内存使用情况</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">memory.use_hierarchy</span><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">#设置/显示是否将子cgroup的内存使用情况统计到当前cgroup里面</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">memory.force_empty</span><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">#触发系统立即尽可能的回收当前cgroup中可以回收的内存</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">memory.pressure_level</span><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">#设置内存压力的通知事件，配合cgroup.event_control一起使用</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">memory.swappiness</span><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">#设置和显示当前的swappiness</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">memory.move_charge_at_immigrate</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#设置当进程移动到其他cgroup中时，它所占用的内存是否也随着移动过去</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">memory.oom_control</span><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">#设置/显示oom controls相关的配置</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">memory.numa_stat</span><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">#显示numa相关的内存</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cgroup.event_control</span><span style="color:#24292E;">       </span><span style="color:#6A737D;">#用于eventfd的接口</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">memory.usage_in_bytes</span><span style="color:#24292E;">      </span><span style="color:#6A737D;">#显示当前已用的内存</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">memory.limit_in_bytes</span><span style="color:#24292E;">      </span><span style="color:#6A737D;">#设置/显示当前限制的内存额度</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">memory.failcnt</span><span style="color:#24292E;">             </span><span style="color:#6A737D;">#显示内存使用量达到限制值的次数</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">memory.max_usage_in_bytes</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">#历史内存最大使用量</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">memory.soft_limit_in_bytes</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#设置/显示当前限制的内存软额度</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">memory.stat</span><span style="color:#24292E;">                </span><span style="color:#6A737D;">#显示当前cgroup的内存使用情况</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">memory.use_hierarchy</span><span style="color:#24292E;">       </span><span style="color:#6A737D;">#设置/显示是否将子cgroup的内存使用情况统计到当前cgroup里面</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">memory.force_empty</span><span style="color:#24292E;">         </span><span style="color:#6A737D;">#触发系统立即尽可能的回收当前cgroup中可以回收的内存</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">memory.pressure_level</span><span style="color:#24292E;">      </span><span style="color:#6A737D;">#设置内存压力的通知事件，配合cgroup.event_control一起使用</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">memory.swappiness</span><span style="color:#24292E;">          </span><span style="color:#6A737D;">#设置和显示当前的swappiness</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">memory.move_charge_at_immigrate</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#设置当进程移动到其他cgroup中时，它所占用的内存是否也随着移动过去</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">memory.oom_control</span><span style="color:#24292E;">         </span><span style="color:#6A737D;">#设置/显示oom controls相关的配置</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">memory.numa_stat</span><span style="color:#24292E;">           </span><span style="color:#6A737D;">#显示numa相关的内存</span></span></code></pre></div><p>写一个内存占用的c程序，每秒申请1MB内存</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#include &lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">#include &lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">#include &lt;string.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">#include &lt;unistd.h&gt; #</span><span style="color:#F97583;">define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MB</span><span style="color:#E1E4E8;"> (1024 * 1024) int main(int argc, char *argv[])</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">p;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span><span style="color:#B392F0;">malloc</span><span style="color:#E1E4E8;">(MB);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">memset</span><span style="color:#E1E4E8;">(p, , MB);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;%dM memory allocated</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">i);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">#gcc mem-allocate.c  -o  mem-allocate</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#include &lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">#include &lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">#include &lt;string.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">#include &lt;unistd.h&gt; #</span><span style="color:#D73A49;">define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MB</span><span style="color:#24292E;"> (1024 * 1024) int main(int argc, char *argv[])</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(MB);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">memset</span><span style="color:#24292E;">(p, , MB);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%dM memory allocated</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">i);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">#gcc mem-allocate.c  -o  mem-allocate</span></span></code></pre></div><p>cgroup限制内存使用50M(强制限制 memory.limit_in_bytes)</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@foreman cgtest]# pwd</span></span>
<span class="line"><span style="color:#B392F0;">/sys/fs/cgroup/memory/cgtest</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@foreman cgtest]# echo 50M </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> memory.limit_in_bytes</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@foreman cgtest]# echo 0 </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> memory.oom_control </span><span style="color:#6A737D;"># 为0时，达到上限会直接kill</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@foreman cgtest]# pgrep mem-allocate</span></span>
<span class="line"><span style="color:#B392F0;">35190</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@foreman cgtest]# echo 35190 </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> tasks</span></span>
<span class="line"><span style="color:#6A737D;"># 只对一个线程ID做限制 ，如果需要对一个线程组做限制，需要将PID放到cgroup.procs中。</span></span>
<span class="line"><span style="color:#6A737D;"># 这样这个PID本身以及所衍生的进程整体会限制在memory.limit_in_bytes中设置的大小内存</span></span>
<span class="line"><span style="color:#6A737D;"># 同时包括这个PID调用所产生的进程也会受到限制。想查看某个进程所属线程组使用如下命令</span></span>
<span class="line"><span style="color:#6A737D;">#cat /proc/&lt;PID&gt;/cgroup 来进行查看</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@foreman cgtest]# pwd</span></span>
<span class="line"><span style="color:#6F42C1;">/sys/fs/cgroup/memory/cgtest</span></span>
<span class="line"><span style="color:#24292E;">[root@foreman cgtest]# echo 50M </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> memory.limit_in_bytes</span></span>
<span class="line"><span style="color:#24292E;">[root@foreman cgtest]# echo 0 </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> memory.oom_control </span><span style="color:#6A737D;"># 为0时，达到上限会直接kill</span></span>
<span class="line"><span style="color:#24292E;">[root@foreman cgtest]# pgrep mem-allocate</span></span>
<span class="line"><span style="color:#6F42C1;">35190</span></span>
<span class="line"><span style="color:#24292E;">[root@foreman cgtest]# echo 35190 </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> tasks</span></span>
<span class="line"><span style="color:#6A737D;"># 只对一个线程ID做限制 ，如果需要对一个线程组做限制，需要将PID放到cgroup.procs中。</span></span>
<span class="line"><span style="color:#6A737D;"># 这样这个PID本身以及所衍生的进程整体会限制在memory.limit_in_bytes中设置的大小内存</span></span>
<span class="line"><span style="color:#6A737D;"># 同时包括这个PID调用所产生的进程也会受到限制。想查看某个进程所属线程组使用如下命令</span></span>
<span class="line"><span style="color:#6A737D;">#cat /proc/&lt;PID&gt;/cgroup 来进行查看</span></span></code></pre></div><p>限制效果：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@foreman </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# ./mem-allocate</span></span>
<span class="line"><span style="color:#B392F0;">1M</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">memory</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">allocated</span></span>
<span class="line"><span style="color:#B392F0;">2M</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">memory</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">allocated</span></span>
<span class="line"><span style="color:#B392F0;">3M</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">memory</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">allocated</span></span>
<span class="line"><span style="color:#B392F0;">4M</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">memory</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">allocated</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#B392F0;">49M</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">memory</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">allocated</span></span>
<span class="line"><span style="color:#B392F0;">50M</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">memory</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">allocated</span></span>
<span class="line"><span style="color:#B392F0;">51M</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">memory</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">allocated</span></span>
<span class="line"><span style="color:#B392F0;">Killed</span></span>
<span class="line"><span style="color:#6A737D;"># 如果达到限制不想直接kill进程，而是挂起进程需要将oom_kill_disable 设置为1</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@foreman cgtest]# cat memory.oom_control </span><span style="color:#6A737D;">#默认</span></span>
<span class="line"><span style="color:#B392F0;">oom_kill_disable</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#B392F0;">under_oom</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@foreman cgtest]# echo 1 </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> memory.oom_control</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@foreman cgtest]# cat memory.oom_control</span></span>
<span class="line"><span style="color:#B392F0;">oom_kill_disable</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#B392F0;">under_oom</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@foreman </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# ./mem-allocate</span></span>
<span class="line"><span style="color:#6F42C1;">1M</span><span style="color:#24292E;"> </span><span style="color:#032F62;">memory</span><span style="color:#24292E;"> </span><span style="color:#032F62;">allocated</span></span>
<span class="line"><span style="color:#6F42C1;">2M</span><span style="color:#24292E;"> </span><span style="color:#032F62;">memory</span><span style="color:#24292E;"> </span><span style="color:#032F62;">allocated</span></span>
<span class="line"><span style="color:#6F42C1;">3M</span><span style="color:#24292E;"> </span><span style="color:#032F62;">memory</span><span style="color:#24292E;"> </span><span style="color:#032F62;">allocated</span></span>
<span class="line"><span style="color:#6F42C1;">4M</span><span style="color:#24292E;"> </span><span style="color:#032F62;">memory</span><span style="color:#24292E;"> </span><span style="color:#032F62;">allocated</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#6F42C1;">49M</span><span style="color:#24292E;"> </span><span style="color:#032F62;">memory</span><span style="color:#24292E;"> </span><span style="color:#032F62;">allocated</span></span>
<span class="line"><span style="color:#6F42C1;">50M</span><span style="color:#24292E;"> </span><span style="color:#032F62;">memory</span><span style="color:#24292E;"> </span><span style="color:#032F62;">allocated</span></span>
<span class="line"><span style="color:#6F42C1;">51M</span><span style="color:#24292E;"> </span><span style="color:#032F62;">memory</span><span style="color:#24292E;"> </span><span style="color:#032F62;">allocated</span></span>
<span class="line"><span style="color:#6F42C1;">Killed</span></span>
<span class="line"><span style="color:#6A737D;"># 如果达到限制不想直接kill进程，而是挂起进程需要将oom_kill_disable 设置为1</span></span>
<span class="line"><span style="color:#24292E;">[root@foreman cgtest]# cat memory.oom_control </span><span style="color:#6A737D;">#默认</span></span>
<span class="line"><span style="color:#6F42C1;">oom_kill_disable</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#6F42C1;">under_oom</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">[root@foreman cgtest]# echo 1 </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> memory.oom_control</span></span>
<span class="line"><span style="color:#24292E;">[root@foreman cgtest]# cat memory.oom_control</span></span>
<span class="line"><span style="color:#6F42C1;">oom_kill_disable</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#6F42C1;">under_oom</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span></code></pre></div><p>跑一个脚本使其产生多个子线程去疯狂吃内存(提前将memory.limitxxxxx设置为300MB，oom_kill 设置为0)</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@foreman </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# cat cgtest.sh</span></span>
<span class="line"><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span></span>
<span class="line"><span style="color:#E1E4E8;">x</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> [ True ];</span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">nohup</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/root/mem-allocate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#9ECBFF;">/root/mem.log</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">2&gt;&amp;1</span><span style="color:#E1E4E8;"> &amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    proc_num</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">pgrep</span><span style="color:#9ECBFF;"> mem-allocate </span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">wc</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-l</span><span style="color:#9ECBFF;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [ $proc_num </span><span style="color:#F97583;">-eq</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;"> ];</span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000000</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">fi</span></span>
<span class="line"><span style="color:#E1E4E8;">    x</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$((</span><span style="color:#E1E4E8;">$x</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">))</span></span>
<span class="line"><span style="color:#F97583;">done</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@foreman </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# cat cgtest.sh</span></span>
<span class="line"><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span></span>
<span class="line"><span style="color:#24292E;">x</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> [ True ];</span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">nohup</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/root/mem-allocate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#032F62;">/root/mem.log</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">2&gt;&amp;1</span><span style="color:#24292E;"> &amp;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    proc_num</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">pgrep</span><span style="color:#032F62;"> mem-allocate </span><span style="color:#D73A49;">|</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">wc</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-l</span><span style="color:#032F62;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> [ $proc_num </span><span style="color:#D73A49;">-eq</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">50</span><span style="color:#24292E;"> ];</span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000000</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">fi</span></span>
<span class="line"><span style="color:#24292E;">    x</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$((</span><span style="color:#24292E;">$x</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#032F62;">))</span></span>
<span class="line"><span style="color:#D73A49;">done</span><span style="color:#24292E;">;</span></span></code></pre></div><p>跑起来后用systemd-cgtop查看限制情况：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#systemd-cgtop # 使用此命令查看cgroup限制的资源情况</span></span>
<span class="line"><span style="color:#B392F0;">/cgtest</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">295.8</span><span style="color:#9ECBFF;">M</span></span>
<span class="line"><span style="color:#6A737D;"># 通过上面可以清晰的看到tasks 25个 内存限制到了300MB</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#systemd-cgtop # 使用此命令查看cgroup限制的资源情况</span></span>
<span class="line"><span style="color:#6F42C1;">/cgtest</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">      </span><span style="color:#032F62;">-</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">295.8</span><span style="color:#032F62;">M</span></span>
<span class="line"><span style="color:#6A737D;"># 通过上面可以清晰的看到tasks 25个 内存限制到了300MB</span></span></code></pre></div><p>概念理解：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">就把5678进程加入到了/foo控制组。那么tasks和cgroups.procs有什么区别呢？</span></span>
<span class="line"><span style="color:#e1e4e8;">前面说的对“进程”的管理限制其实不够准确。系统对任务调度的单位是线程。</span></span>
<span class="line"><span style="color:#e1e4e8;">在这里，tasks中看到的就是线程id。而cgroups.procs中是线程组id，也就是一般所说的进程id。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">将一个一般的pid写入到tasks中，只有这个pid对应的线程，以及由它产生的其他进程、线程会属于这个控制组，原有的其他线程则不会。</span></span>
<span class="line"><span style="color:#e1e4e8;">而写入cgroups.procs会把当前所有的线程都加入进去。如果写入cgroups.procs的不是一个线程组id，而是一个一般的线程id，那会自动找到所对应的线程组id加入进去。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">进程在加入一个控制组后，控制组所对应的限制会即时生效。想知道一个进程属于哪些控制组，可以通过cat/proc/&lt;pid&gt;/cgroup查看。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">要把进程移出控制组，把pid写入到根cgroup的tasks文件即可。因为每个进程都属于且只属于一个cgroup，加入到新的cgroup后，原有关系也就解除了。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">要删除一个cgroup，可以用rmdir删除相应目录。不过在删除前，必须先让其中的进程全部退出，对应子系统的资源都已经释放，否则是无法删除的。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">前面都是通过文件系统访问方式来操作cgroups的。实际上，也有一组命令行工具。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">就把5678进程加入到了/foo控制组。那么tasks和cgroups.procs有什么区别呢？</span></span>
<span class="line"><span style="color:#24292e;">前面说的对“进程”的管理限制其实不够准确。系统对任务调度的单位是线程。</span></span>
<span class="line"><span style="color:#24292e;">在这里，tasks中看到的就是线程id。而cgroups.procs中是线程组id，也就是一般所说的进程id。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">将一个一般的pid写入到tasks中，只有这个pid对应的线程，以及由它产生的其他进程、线程会属于这个控制组，原有的其他线程则不会。</span></span>
<span class="line"><span style="color:#24292e;">而写入cgroups.procs会把当前所有的线程都加入进去。如果写入cgroups.procs的不是一个线程组id，而是一个一般的线程id，那会自动找到所对应的线程组id加入进去。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">进程在加入一个控制组后，控制组所对应的限制会即时生效。想知道一个进程属于哪些控制组，可以通过cat/proc/&lt;pid&gt;/cgroup查看。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">要把进程移出控制组，把pid写入到根cgroup的tasks文件即可。因为每个进程都属于且只属于一个cgroup，加入到新的cgroup后，原有关系也就解除了。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">要删除一个cgroup，可以用rmdir删除相应目录。不过在删除前，必须先让其中的进程全部退出，对应子系统的资源都已经释放，否则是无法删除的。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">前面都是通过文件系统访问方式来操作cgroups的。实际上，也有一组命令行工具。</span></span></code></pre></div><h2 id="三-进程" tabindex="-1">三. 进程 <a class="header-anchor" href="#三-进程" aria-label="Permalink to &quot;三. 进程&quot;">​</a></h2><h3 id="进程的概念" tabindex="-1">进程的概念 <a class="header-anchor" href="#进程的概念" aria-label="Permalink to &quot;进程的概念&quot;">​</a></h3><p>在进程创建前我们必须明白一个概念什么进程？</p><blockquote><p>**进程的概念：**我们知道操作系统最核心的概念就是进程。其实进程简单来说就是在操作系统中运行的程序，它是操作系统资源管理的最小单位。但是进程是一个动态的实体，它是程序的一次执行过程。进程和程序的区别在于：进程是动态的，程序是静态的，进程是运行中的程序，而程序是一些保存在硬盘上的可执行代码。</p></blockquote><h3 id="linux进程结构" tabindex="-1">Linux进程结构 <a class="header-anchor" href="#linux进程结构" aria-label="Permalink to &quot;Linux进程结构&quot;">​</a></h3><p>在Linux下面，可以通过命令ps或pstree查看当前系统中的进程。</p><p>有了进程的笼统概念后那我们接下来要明白的是进程它到底拥有些什么，上面不是说它是一个动态的实体么，意思是一旦启动它时时刻刻在运行对吧(当然是在一定的时间内)，那么它是怎么运行的需要些什么额外的资源呢，这就要我们明白进程的结构了。</p><blockquote><p>**Linux进程结构：**可由三部分组成：<code>代码段</code>、<code>数据段</code>、<code>堆栈段</code>。也就是程序、数据、进程控制块PCB（Process Control Block）组成。进程控制块是进程存在的惟一标识，系统通过PCB的存在而感知进程的存在。</p><p><code>代码段</code>存放程序的可执行代码。 <code>数据段</code>存放程序的全局变量、常量、静态变量。 <code>堆栈段</code>中的堆用于存放动态分配的内存变量。堆栈段中的栈用于函数调用，它存放着函数的参数、函数内部定义的局部变量。</p></blockquote><p><code>系统通过PCB对进程进行管理和调度</code>。PCB包括创建进程、执行程序、退出进程以及改变进程的优先级等。而进程中的PCB用一个名为task_struct的结构体来表示，定义在include/linux/sched.h中，每当创建一新进程时，便在内存中申请一个空的task_struct结构，填入所需信息，同时，指向该结构的指针也被加入到task数组中，所有进程控制块都存储在task[]数组中。</p><h3 id="进程间通信的方式" tabindex="-1">进程间通信的方式 <a class="header-anchor" href="#进程间通信的方式" aria-label="Permalink to &quot;进程间通信的方式&quot;">​</a></h3><ol><li><strong>管道（pipe）及有名管道（named pipe）</strong>：管道可用于具有亲缘关系的父子进程间的通信，有名管道除了具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。</li><li><strong>信号（signal）</strong>：信号是在软件层次上对中断机制的一种模拟，它是比较复杂的通信方式，用于通知进程有某事件发生，一个进程收到一个信号与处理器收到一个中断请求效果上可以说是一致的。</li><li><strong>消息队列（message queue）</strong>：消息队列是消息的链接表，它克服了上两种通信方式中信号量有限的缺点，具有写权限得进程可以按照一定得规则向消息队列中添加新信息；对消息队列有读权限得进程则可以从消息队列中读取信息。</li><li><strong>共享内存（shared memory）</strong>：可以说这是最有用的进程间通信方式。它使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据得更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。</li><li><strong>信号量（semaphore）</strong>：主要作为进程之间及同一种进程的不同线程之间得同步和互斥手段。</li><li><strong>套接字（socket）</strong>：这是一种更为一般得进程间通信机制，它可用于网络中不同机器之间的进程间通信，应用非常广泛。</li></ol><h3 id="进程和线程的关系" tabindex="-1">进程和线程的关系 <a class="header-anchor" href="#进程和线程的关系" aria-label="Permalink to &quot;进程和线程的关系&quot;">​</a></h3><ol><li>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。</li><li>资源分配给进程，同一进程的所有线程共享该进程的所有资源。</li><li>处理机分给线程，即真正在处理机上运行的是线程。</li><li>线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。线程是指进程内的一个执行单元,也是进程内的可调度实体.</li></ol><h3 id="进程与线程的区别" tabindex="-1">进程与线程的区别 <a class="header-anchor" href="#进程与线程的区别" aria-label="Permalink to &quot;进程与线程的区别&quot;">​</a></h3><blockquote><p><strong>进程</strong>：每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含1--n个线程。（进程是资源分配的最小单位） **线程：**同一类线程共享<code>代码段</code>和<code>数据段</code>，每个线程有独立的运行栈和程序计数器(PC)，线程切换开销小。（线程是cpu调度的最小单位）</p></blockquote><p>（1）调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位 （2）并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行 （3）拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源. （4）系统开销：在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。</p>`,134),e=[o];function c(t,r,y,E,i,F){return a(),n("div",null,e)}const h=s(l,[["render",c]]);export{C as __pageData,h as default};
