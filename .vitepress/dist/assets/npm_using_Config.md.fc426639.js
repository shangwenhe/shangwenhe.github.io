import{_ as e,o,c as a,Q as l}from"./chunks/framework.681fc4ae.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"npm/using/Config.md","filePath":"npm/using/Config.md"}'),i={name:"npm/using/Config.md"},c=l('<h2 id="描述" tabindex="-1">描述 <a class="header-anchor" href="#描述" aria-label="Permalink to &quot;描述&quot;">​</a></h2><p>npm 从以下来源获取其配置值，按优先级排序：</p><h2 id="command-line-flags" tabindex="-1"><code>command-line-flags</code> <a class="header-anchor" href="#command-line-flags" aria-label="Permalink to &quot;`command-line-flags`&quot;">​</a></h2><p>放在<code>--foo bar</code>命令行上将<code>foo</code>配置参数设置为<code>&quot;bar&quot;</code>。参数<code>--</code>告诉 cli 解析器停止读取标志。在不指定任何值的情况下使用<code>--flag</code>会将值设置为<code>true</code>。</p><p>示例：<code>--flag1 --flag2</code>将两个配置参数设置为<code>true</code>、同时<code>--flag1 --flag2 bar</code>将设置<code>flag1</code>为<code>true</code>、<code>flag2</code>和<code>bar</code>。最后，<code>--flag1 --flag2 -- bar</code>将两个配置参数设置为<code>true</code>，并将<code>bar</code>视为命令参数。</p><h2 id="environment-variables" tabindex="-1"><code>environment-variables</code> <a class="header-anchor" href="#environment-variables" aria-label="Permalink to &quot;`environment-variables`&quot;">​</a></h2><p>任何以 开头的环境变量都<code>npm_config_</code>将被解释为配置参数。例如，放入<code>npm_config_foo=bar</code>您的环境中会将<code>foo</code>配置参数设置为<code>bar</code>. 任何未指定值的环境配置都将指定为 的值<code>true</code>。配置值不区分大小写，因此<code>NPM_CONFIG_FOO=bar</code>工作原理相同。但是，请注意，<code>scripts</code>。</p><p>请注意，您需要使用下划线而不是破折号，因此<code>--allow-same-version</code>将变成<code>npm_config_allow_same_version=true</code>.</p><h2 id="npmrc-files" tabindex="-1"><code>npmrc-files</code> <a class="header-anchor" href="#npmrc-files" aria-label="Permalink to &quot;`npmrc-files`&quot;">​</a></h2><p>四个相关文件是：</p><ul><li>每个项目的配置文件 ( <code>/path/to/my/project/.npmrc</code>)</li><li>每个用户的配置文件（默认为<code>$HOME/.npmrc</code>；可通过 CLI 选项<code>--userconfig</code>或环境变量进行配置<code>$NPM_CONFIG_USERCONFIG</code>）</li><li>全局配置文件（默认为<code>$PREFIX/etc/npmrc</code>；可通过 CLI 选项<code>--globalconfig</code>或环境变量进行配置<code>$NPM_CONFIG_GLOBALCONFIG</code>）</li><li>npm 的内置配置文件 ( <code>/path/to/npm/npmrc</code>)</li></ul><p>有关更多详细信息，请参阅<a href="https://docs.npmjs.com/cli/v7/configuring-npm/npmrc" target="_blank" rel="noreferrer">npmrc 。</a></p><h2 id="default-configs" tabindex="-1"><code>default-configs</code> <a class="header-anchor" href="#default-configs" aria-label="Permalink to &quot;`default-configs`&quot;">​</a></h2><p>运行<code>npm config ls -l</code>以查看 npm 内部的一组配置参数，如果未指定其他参数，则这些参数为默认值。</p><h2 id="shorthands-and-other-cli-niceties" tabindex="-1"><code>shorthands-and-other-cli-niceties</code> <a class="header-anchor" href="#shorthands-and-other-cli-niceties" aria-label="Permalink to &quot;`shorthands-and-other-cli-niceties`&quot;">​</a></h2><p>在命令行上解析以下简写：</p><ul><li><code>-a</code>：<code>--all</code></li><li><code>--enjoy-by</code>：<code>--before</code></li><li><code>-c</code>：<code>--call</code></li><li><code>--desc</code>：<code>--description</code></li><li><code>-f</code>：<code>--force</code></li><li><code>-g</code>：<code>--global</code></li><li><code>-L</code>：<code>--location</code></li><li><code>-d</code>：<code>--loglevel info</code></li><li><code>-s</code>：<code>--loglevel silent</code></li><li><code>--silent</code>：<code>--loglevel silent</code></li><li><code>--ddd</code>：<code>--loglevel silly</code></li><li><code>--dd</code>：<code>--loglevel verbose</code></li><li><code>--verbose</code>：<code>--loglevel verbose</code></li><li><code>-q</code>：<code>--loglevel warn</code></li><li><code>--quiet</code>：<code>--loglevel warn</code></li><li><code>-l</code>：<code>--long</code></li><li><code>-m</code>：<code>--message</code></li><li><code>--local</code>：<code>--no-global</code></li><li><code>-n</code>：<code>--no-yes</code></li><li><code>--no</code>：<code>--no-yes</code></li><li><code>-p</code>：<code>--parseable</code></li><li><code>--porcelain</code>：<code>--parseable</code></li><li><code>-C</code>：<code>--prefix</code></li><li><code>--readonly</code>：<code>--read-only</code></li><li><code>--reg</code>：<code>--registry</code></li><li><code>-S</code>：<code>--save</code></li><li><code>-B</code>：<code>--save-bundle</code></li><li><code>-D</code>：<code>--save-dev</code></li><li><code>-E</code>：<code>--save-exact</code></li><li><code>-O</code>：<code>--save-optional</code></li><li><code>-P</code>：<code>--save-prod</code></li><li><code>-?</code>：<code>--usage</code></li><li><code>-h</code>：<code>--usage</code></li><li><code>-H</code>：<code>--usage</code></li><li><code>--help</code>：<code>--usage</code></li><li><code>-v</code>：<code>--version</code></li><li><code>-w</code>：<code>--workspace</code></li><li><code>--ws</code>：<code>--workspaces</code></li><li><code>-y</code>：<code>--yes</code></li></ul><p>如果指定的配置参数明确解析为已知的配置参数，则它将扩展为该配置参数。例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--par</span></span>\n<span class="line"><span style="color:#6A737D;"># same as:</span></span>\n<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--parseable</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--par</span></span>\n<span class="line"><span style="color:#6A737D;"># same as:</span></span>\n<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--parseable</span></span></code></pre></div><p>如果多个单字符简写串在一起，并且得到的组合明确不是其他配置参数，那么它就会扩展到其各个组成部分。例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-gpld</span></span>\n<span class="line"><span style="color:#6A737D;"># same as:</span></span>\n<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--global</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--parseable</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--long</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--loglevel</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">info</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-gpld</span></span>\n<span class="line"><span style="color:#6A737D;"># same as:</span></span>\n<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--global</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--parseable</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--long</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--loglevel</span><span style="color:#24292E;"> </span><span style="color:#032F62;">info</span></span></code></pre></div><h2 id="config-settings" tabindex="-1"><code>config-settings</code> <a class="header-anchor" href="#config-settings" aria-label="Permalink to &quot;`config-settings`&quot;">​</a></h2><h2 id="auth" tabindex="-1"><code>_auth</code> <a class="header-anchor" href="#auth" aria-label="Permalink to &quot;`_auth`&quot;">​</a></h2><ul><li>默认值：空</li><li>类型：null 或 String</li></ul><p>根据 npm 注册表进行身份验证时使用的基本身份验证字符串。</p><p>警告：通常不应通过命令行选项设置。通过运行 来使用存储在 ~/.npmrc 文件中的注册表提供的身份验证承载令牌更安全<code>npm login</code>。</p><h2 id="access" tabindex="-1"><code>access</code> <a class="header-anchor" href="#access" aria-label="Permalink to &quot;`access`&quot;">​</a></h2><ul><li>默认值：“restricted”适用于有作用域的包，“public”适用于无作用域的包</li><li>类型：null、“受限”或“公共”</li></ul><p>发布作用域包时，访问级别默认为<code>restricted</code>. 如果您希望您的作用域包可供公开查看（和安装），请设置<code>--access=public</code>. 唯一有效的值为<code>access</code>和<code>public</code>。<code>restricted</code>无范围包的访问级别<em>始终</em>为<code>public</code>.</p><p>注意：在命令<code>--access</code>上使用标志<code>npm publish</code>只会在包的初始发布时设置包访问级别。使用该标志的任何后续<code>npm publish</code>命令都<code>--access</code>不会影响访问级别。要在初始发布使用后更改访问级别<code>npm access</code>。</p><h2 id="all" tabindex="-1"><code>all</code> <a class="header-anchor" href="#all" aria-label="Permalink to &quot;`all`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>运行<code>npm outdated</code>和时<code>npm ls</code>，设置<code>--all</code>将显示所有过时或已安装的软件包，而不仅仅是当前项目直接依赖的软件包。</p><h2 id="allow-same-version" tabindex="-1"><code>allow-same-version</code> <a class="header-anchor" href="#allow-same-version" aria-label="Permalink to &quot;`allow-same-version`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p><code>npm version</code>防止在用于将新版本设置为与当前版本相同的值时引发错误。</p><h2 id="audit" tabindex="-1"><code>audit</code> <a class="header-anchor" href="#audit" aria-label="Permalink to &quot;`audit`&quot;">​</a></h2><ul><li>默认值：true</li><li>类型：布尔值</li></ul><p>当“true”时，将审核报告与当前 npm 命令一起提交到默认注册表和为范围配置的所有注册表。<code>npm audit</code>有关提交内容的详细信息，请参阅文档。</p><h2 id="audit-level" tabindex="-1"><code>audit-level</code> <a class="header-anchor" href="#audit-level" aria-label="Permalink to &quot;`audit-level`&quot;">​</a></h2><ul><li>默认值：空</li><li>类型：null、“信息”、“低”、“中等”、“高”、“严重”或“无”</li></ul><p><code>npm audit</code>以非零退出代码退出的最低漏洞级别。</p><h2 id="before" tabindex="-1"><code>before</code> <a class="header-anchor" href="#before" aria-label="Permalink to &quot;`before`&quot;">​</a></h2><ul><li>默认值：空</li><li>类型：空或日期</li></ul><p>如果传递给<code>npm install</code>，将重建 npm 树，以便仅安装该时间<strong>或之前可用的版本。</strong><code>--before</code>如果当前的直接依赖项集没有可用的版本，则该命令将出错。</p><p>如果请求的版本是 a<code>dist-tag</code>并且给定的标签未通过<code>--before</code>过滤器，则将使用小于或等于该标签的最新版本。例如，即使是也<code>foo@latest</code>可能安装。<code>foo@1.2``latest``2.0</code></p><h2 id="bin-links" tabindex="-1"><code>bin-links</code> <a class="header-anchor" href="#bin-links" aria-label="Permalink to &quot;`bin-links`&quot;">​</a></h2><ul><li>默认值：true</li><li>类型：布尔值</li></ul><p>告诉 npm 为包可执行文件创建符号链接（或<code>.cmd</code>Windows 上的垫片）。</p><p>设置为 false 以使其不执行此操作。这可以用来解决某些文件系统不支持符号链接的问题，即使在表面上的 Unix 系统上也是如此。</p><h2 id="browser" tabindex="-1"><code>browser</code> <a class="header-anchor" href="#browser" aria-label="Permalink to &quot;`browser`&quot;">​</a></h2><ul><li>默认：OS X：<code>&quot;open&quot;</code>、Windows：<code>&quot;start&quot;</code>、其他：<code>&quot;xdg-open&quot;</code></li><li>类型：null、布尔值或字符串</li></ul><p>npm 命令调用的浏览器来打开网站。</p><p>设置<code>false</code>为抑制浏览器行为，而是将 URL 打印到终端。</p><p>设置<code>true</code>为使用默认系统 URL 打开程序。</p><h2 id="ca" tabindex="-1"><code>ca</code> <a class="header-anchor" href="#ca" aria-label="Permalink to &quot;`ca`&quot;">​</a></h2><ul><li>默认值：空</li><li>类型：null或String（可设置多次）</li></ul><p>与注册表的 SSL 连接受信任的证书颁发机构签名证书。值应采用 PEM 格式（Windows 称之为“Base-64 编码的 X.509 (.CER)”），并用字符串“\\n”替换换行符。例如：</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">ca</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;-----BEGIN CERTIFICATE-----\\nXXXX\\nXXXX\\n-----END CERTIFICATE-----&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">ca</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;-----BEGIN CERTIFICATE-----\\nXXXX\\nXXXX\\n-----END CERTIFICATE-----&quot;</span></span></code></pre></div><p>设置为<code>null</code>仅允许“已知”注册商，或设置为仅信任该特定签名机构的特定 CA 证书。</p><p>通过指定证书数组可以信任多个 CA：</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ca[]=</span><span style="color:#9ECBFF;">&quot;...&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">ca[]=</span><span style="color:#9ECBFF;">&quot;...&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ca[]=</span><span style="color:#032F62;">&quot;...&quot;</span></span>\n<span class="line"><span style="color:#24292E;">ca[]=</span><span style="color:#032F62;">&quot;...&quot;</span></span></code></pre></div><p>另请参阅<code>strict-ssl</code>配置。</p><h2 id="cache" tabindex="-1"><code>cache</code> <a class="header-anchor" href="#cache" aria-label="Permalink to &quot;`cache`&quot;">​</a></h2><ul><li>默认：Windows：<code>%LocalAppData%\\npm-cache</code>、Posix：<code>~/.npm</code></li><li>类型：路径</li></ul><p>npm 缓存目录的位置。看<code>npm cache</code></p><h2 id="cafile" tabindex="-1"><code>cafile</code> <a class="header-anchor" href="#cafile" aria-label="Permalink to &quot;`cafile`&quot;">​</a></h2><ul><li>默认值：空</li><li>类型：路径</li></ul><p>包含一个或多个证书颁发机构签名证书的文件的路径。与设置类似<code>ca</code>，但允许多个 CA，以及将 CA 信息存储在磁盘上的文件中。</p><h2 id="call" tabindex="-1"><code>call</code> <a class="header-anchor" href="#call" aria-label="Permalink to &quot;`call`&quot;">​</a></h2><ul><li>默认： ””</li><li>类型：字符串</li></ul><p>的可选配套选项<code>npm exec</code>，<code>npx</code>允许指定与已安装的软件包一起运行的自定义命令。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">exec</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--package</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">yo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--package</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">generator-node</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--call</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;yo node&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exec</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--package</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--package</span><span style="color:#24292E;"> </span><span style="color:#032F62;">generator-node</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--call</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;yo node&quot;</span></span></code></pre></div><h2 id="cert" tabindex="-1"><code>cert</code> <a class="header-anchor" href="#cert" aria-label="Permalink to &quot;`cert`&quot;">​</a></h2><ul><li>默认值：空</li><li>类型：null 或 String</li></ul><p>访问注册表时要传递的客户端证书。值应采用 PEM 格式（Windows 称之为“Base-64 编码的 X.509 (.CER)”），并用字符串“\\n”替换换行符。例如：</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">cert</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;-----BEGIN CERTIFICATE-----\\nXXXX\\nXXXX\\n-----END CERTIFICATE-----&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">cert</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;-----BEGIN CERTIFICATE-----\\nXXXX\\nXXXX\\n-----END CERTIFICATE-----&quot;</span></span></code></pre></div><p>它不是<em>证书</em>文件的路径（并且没有“certfile”选项）。</p><h2 id="ci-name" tabindex="-1"><code>ci-name</code> <a class="header-anchor" href="#ci-name" aria-label="Permalink to &quot;`ci-name`&quot;">​</a></h2><ul><li>默认值：当前 CI 系统的名称，或者<code>null</code>不在已知 CI 平台上时的名称。</li><li>类型：null 或 String</li></ul><p>持续集成系统的名称。如果没有明确设置，npm 将使用该模块检测当前的 CI 环境<code>@npmcli/ci-detect</code>。</p><h2 id="cidr" tabindex="-1"><code>cidr</code> <a class="header-anchor" href="#cidr" aria-label="Permalink to &quot;`cidr`&quot;">​</a></h2><ul><li>默认值：空</li><li>类型：null或String（可设置多次）</li></ul><p>这是使用命令配置受限访问令牌时要使用的 CIDR 地址列表<code>npm token create</code>。</p><h2 id="color" tabindex="-1"><code>color</code> <a class="header-anchor" href="#color" aria-label="Permalink to &quot;`color`&quot;">​</a></h2><ul><li>默认值：true，除非 NO_COLOR 环境设置为“0”以外的其他值</li><li>类型：“始终”或布尔值</li></ul><p>如果为 false，则永远不会显示颜色。如果<code>&quot;always&quot;</code>那么总是显示颜色。如果为 true，则仅打印 tty 文件描述符的颜色代码。</p><h2 id="commit-hooks" tabindex="-1"><code>commit-hooks</code> <a class="header-anchor" href="#commit-hooks" aria-label="Permalink to &quot;`commit-hooks`&quot;">​</a></h2><ul><li>默认值：true</li><li>类型：布尔值</li></ul><p>使用<code>npm version</code>命令时运行 git commit hooks。</p><h2 id="depth" tabindex="-1"><code>depth</code> <a class="header-anchor" href="#depth" aria-label="Permalink to &quot;`depth`&quot;">​</a></h2><ul><li>默认值：<code>Infinity</code>如果<code>--all</code>设置，否则<code>1</code></li><li>类型：空或数字</li></ul><p>递归包时的深度<code>npm ls</code>。</p><p>如果未设置，<code>npm ls</code>将仅显示根项目的直接依赖项。如果<code>--all</code>设置了，npm 将默认显示所有依赖项。</p><h2 id="description-1" tabindex="-1"><code>description-1</code> <a class="header-anchor" href="#description-1" aria-label="Permalink to &quot;`description-1`&quot;">​</a></h2><ul><li>默认值：true</li><li>类型：布尔值</li></ul><p>显示描述于<code>npm search</code></p><h2 id="diff" tabindex="-1"><code>diff</code> <a class="header-anchor" href="#diff" aria-label="Permalink to &quot;`diff`&quot;">​</a></h2><ul><li>默认：</li><li>类型：String（可设置多次）</li></ul><p>定义要在 中进行比较的参数<code>npm diff</code>。</p><h2 id="diff-dst-prefix" tabindex="-1"><code>diff-dst-prefix</code> <a class="header-anchor" href="#diff-dst-prefix" aria-label="Permalink to &quot;`diff-dst-prefix`&quot;">​</a></h2><ul><li>默认值：“b/”</li><li>类型：字符串</li></ul><p>输出中使用的目标前缀<code>npm diff</code>。</p><h2 id="diff-ignore-all-space" tabindex="-1"><code>diff-ignore-all-space</code> <a class="header-anchor" href="#diff-ignore-all-space" aria-label="Permalink to &quot;`diff-ignore-all-space`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>比较 中的行时忽略空格<code>npm diff</code>。</p><h2 id="diff-name-only" tabindex="-1"><code>diff-name-only</code> <a class="header-anchor" href="#diff-name-only" aria-label="Permalink to &quot;`diff-name-only`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>使用 时仅打印文件名<code>npm diff</code>。</p><h2 id="diff-no-prefix" tabindex="-1"><code>diff-no-prefix</code> <a class="header-anchor" href="#diff-no-prefix" aria-label="Permalink to &quot;`diff-no-prefix`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>不要在<code>npm diff</code>输出中显示任何源或目标前缀。</p><p>注意：这会导致<code>npm diff</code>忽略<code>--diff-src-prefix</code>和<code>--diff-dst-prefix</code>配置。</p><h2 id="diff-src-prefix" tabindex="-1"><code>diff-src-prefix</code> <a class="header-anchor" href="#diff-src-prefix" aria-label="Permalink to &quot;`diff-src-prefix`&quot;">​</a></h2><ul><li>默认值：“a/”</li><li>类型：字符串</li></ul><p>输出中使用的源前缀<code>npm diff</code>。</p><h2 id="diff-text" tabindex="-1"><code>diff-text</code> <a class="header-anchor" href="#diff-text" aria-label="Permalink to &quot;`diff-text`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>将所有文件视为<code>npm diff</code>.</p><h2 id="diff-unified" tabindex="-1"><code>diff-unified</code> <a class="header-anchor" href="#diff-unified" aria-label="Permalink to &quot;`diff-unified`&quot;">​</a></h2><ul><li>默认值：3</li><li>类型：数字</li></ul><p>要在 中打印的上下文行数<code>npm diff</code>。</p><h2 id="dry-run" tabindex="-1"><code>dry-run</code> <a class="header-anchor" href="#dry-run" aria-label="Permalink to &quot;`dry-run`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>表示您不希望 npm 进行任何更改，并且它应该只报告它会执行的操作。这可以传递到任何修改本地安装的命令中，例如<code>install</code>、<code>update</code>、<code>dedupe</code>、<code>uninstall</code>以及<code>pack</code>和<code>publish</code>。</p><p>注意：其他网络相关命令不支持这一点，例如<code>dist-tags</code>、<code>owner</code>等。</p><h2 id="editor" tabindex="-1"><code>editor</code> <a class="header-anchor" href="#editor" aria-label="Permalink to &quot;`editor`&quot;">​</a></h2><ul><li>默认值：EDITOR 或 VISUAL 环境变量，或 Windows 上的“notepad.exe”，或 Unix 系统上的“vim”</li><li>类型：字符串</li></ul><p><code>npm edit</code>为和运行的命令<code>npm config edit</code>。</p><h2 id="engine-strict" tabindex="-1"><code>engine-strict</code> <a class="header-anchor" href="#engine-strict" aria-label="Permalink to &quot;`engine-strict`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>如果设置为 true，那么 npm 将顽固地拒绝安装（甚至考虑安装）任何声称与当前 Node.js 版本不兼容的包。</p><p>这可以通过设置<code>--force</code>标志来覆盖。</p><h2 id="fetch-retries" tabindex="-1"><code>fetch-retries</code> <a class="header-anchor" href="#fetch-retries" aria-label="Permalink to &quot;`fetch-retries`&quot;">​</a></h2><ul><li>默认值：2</li><li>类型：数字</li></ul><p><code>retry</code>从注册表获取包时要使用的模块的“重试”配置。</p><p>在网络故障或 5xx HTTP 错误的情况下，npm 将重试对注册表的幂等读取请求。</p><h2 id="fetch-retry-factor" tabindex="-1"><code>fetch-retry-factor</code> <a class="header-anchor" href="#fetch-retry-factor" aria-label="Permalink to &quot;`fetch-retry-factor`&quot;">​</a></h2><ul><li>默认值：10</li><li>类型：数字</li></ul><p><code>retry</code>获取包时模块使用的“因素”配置。</p><h2 id="fetch-retry-maxtimeout" tabindex="-1"><code>fetch-retry-maxtimeout</code> <a class="header-anchor" href="#fetch-retry-maxtimeout" aria-label="Permalink to &quot;`fetch-retry-maxtimeout`&quot;">​</a></h2><ul><li>默认值：60000（1 分钟）</li><li>类型：数字</li></ul><p><code>retry</code>获取包时模块使用的“maxTimeout”配置。</p><h2 id="fetch-retry-mintimeout" tabindex="-1"><code>fetch-retry-mintimeout</code> <a class="header-anchor" href="#fetch-retry-mintimeout" aria-label="Permalink to &quot;`fetch-retry-mintimeout`&quot;">​</a></h2><ul><li>默认值：10000（10 秒）</li><li>类型：数字</li></ul><p><code>retry</code>获取包时模块使用的“minTimeout”配置。</p><h2 id="fetch-timeout" tabindex="-1"><code>fetch-timeout</code> <a class="header-anchor" href="#fetch-timeout" aria-label="Permalink to &quot;`fetch-timeout`&quot;">​</a></h2><ul><li>默认值：300000（5 分钟）</li><li>类型：数字</li></ul><p>等待 HTTP 请求完成的最长时间。</p><h2 id="force" tabindex="-1"><code>force</code> <a class="header-anchor" href="#force" aria-label="Permalink to &quot;`force`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>删除针对不幸的副作用、常见错误、不必要的性能下降和恶意输入的各种保护措施。</p><ul><li>允许在全局安装中破坏非 npm 文件。</li><li>允许该<code>npm version</code>命令在不干净的 git 存储库上运行。</li><li>允许删除缓存文件夹<code>npm cache clean</code>。</li><li><code>engines</code>允许安装具有需要不同版本 npm 的声明的软件包。</li><li>即使已启用，也允许安装<code>engines</code>具有需要不同版本的声明的软件包。<code>node``--engine-strict</code></li><li>允许<code>npm audit fix</code>安装超出指定依赖范围的模块（包括 SemVer 重大更改）。</li><li>允许取消发布已发布包的所有版本。</li><li>允许在根项目中安装冲突的peerDependency。</li><li><code>--yes</code>在 期间隐式设置<code>npm init</code>。</li><li>允许破坏现有值<code>npm pkg</code></li></ul><p>如果您不清楚自己要做什么，强烈建议您不要使用此选项！</p><h2 id="foreground-scripts" tabindex="-1"><code>foreground-scripts</code> <a class="header-anchor" href="#foreground-scripts" aria-label="Permalink to &quot;`foreground-scripts`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>在前台进程中运行已安装软件包的所有构建脚本（即 、<code>preinstall</code>和<code>install</code>） ，与主 npm 进程共享标准输入、输出和错误。<code>postinstall</code></p><p>请注意，这通常会使安装运行速度变慢，并且噪音更大，但对于调试很有用。</p><h2 id="format-package-lock" tabindex="-1"><code>format-package-lock</code> <a class="header-anchor" href="#format-package-lock" aria-label="Permalink to &quot;`format-package-lock`&quot;">​</a></h2><ul><li>默认值：true</li><li>类型：布尔值</li></ul><p>格式化<code>package-lock.json</code>或<code>npm-shrinkwrap.json</code>作为人类可读的文件。</p><h2 id="fund" tabindex="-1"><code>fund</code> <a class="header-anchor" href="#fund" aria-label="Permalink to &quot;`fund`&quot;">​</a></h2><ul><li>默认值：true</li><li>类型：布尔值</li></ul><p>当“true”时，会在每个消息末尾显示消息<code>npm install</code>，确认寻求资金的依赖项的数量。<code>npm fund</code>详情请参阅。</p><h2 id="git" tabindex="-1"><code>git</code> <a class="header-anchor" href="#git" aria-label="Permalink to &quot;`git`&quot;">​</a></h2><ul><li>默认值：“git”</li><li>类型：字符串</li></ul><p>用于 git 命令的命令。如果 git 安装在计算机上，但不在 中<code>PATH</code>，则将其设置为 git 二进制文件的完整路径。</p><h2 id="git-tag-version" tabindex="-1"><code>git-tag-version</code> <a class="header-anchor" href="#git-tag-version" aria-label="Permalink to &quot;`git-tag-version`&quot;">​</a></h2><ul><li>默认值：true</li><li>类型：布尔值</li></ul><p>使用命令时标记提交<code>npm version</code>。</p><h2 id="global" tabindex="-1"><code>global</code> <a class="header-anchor" href="#global" aria-label="Permalink to &quot;`global`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>在“全局”模式下运行，以便将包安装到该<code>prefix</code>文件夹而不是当前工作目录中。有关行为差异的更多信息，请参阅<a href="https://docs.npmjs.com/cli/v7/configuring-npm/folders" target="_blank" rel="noreferrer">文件夹。</a></p><ul><li>软件包将安装到该<code>{prefix}/lib/node_modules</code>文件夹中，而不是当前工作目录中。</li><li>bin 文件链接到<code>{prefix}/bin</code></li><li>手册页链接到<code>{prefix}/share/man</code></li></ul><h2 id="global-style" tabindex="-1"><code>global-style</code> <a class="header-anchor" href="#global-style" aria-label="Permalink to &quot;`global-style`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>使 npm 将包安装到本地<code>node_modules</code>文件夹中，其布局与全局文件夹使用的布局相同<code>node_modules</code>。只有您的直接依赖项才会显示，<code>node_modules</code>并且它们依赖的所有内容都将在其<code>node_modules</code>文件夹中展平。这显然会消除一些重复数据删除。如果与 一起使用<code>legacy-bundling</code>，<code>legacy-bundling</code>将是首选。</p><h2 id="globalconfig" tabindex="-1"><code>globalconfig</code> <a class="header-anchor" href="#globalconfig" aria-label="Permalink to &quot;`globalconfig`&quot;">​</a></h2><ul><li>默认值：全局 --prefix 设置加上“etc/npmrc”。例如，“/usr/local/etc/npmrc”</li><li>类型：路径</li></ul><p>要读取全局配置选项的配置文件。</p><h2 id="heading" tabindex="-1"><code>heading</code> <a class="header-anchor" href="#heading" aria-label="Permalink to &quot;`heading`&quot;">​</a></h2><ul><li>默认值：“npm”</li><li>类型：字符串</li></ul><p>启动所有调试日志输出的字符串。</p><h2 id="https-proxy" tabindex="-1"><code>https-proxy</code> <a class="header-anchor" href="#https-proxy" aria-label="Permalink to &quot;`https-proxy`&quot;">​</a></h2><ul><li>默认值：空</li><li>类型：null 或 URL</li></ul><p>用于传出 https 请求的代理。如果设置了<code>HTTPS_PROXY</code>或<code>https_proxy</code>或<code>HTTP_PROXY</code>或<code>http_proxy</code>环境变量，底层库将遵循代理设置<code>make-fetch-happen</code>。</p><h2 id="if-present" tabindex="-1"><code>if-present</code> <a class="header-anchor" href="#if-present" aria-label="Permalink to &quot;`if-present`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p><code>run-script</code>如果为 true，则当为未在<code>scripts</code>部分中定义的脚本调用npm 时，npm 将不会退出并显示错误代码<code>package.json</code>。当需要在脚本存在时选择性地运行脚本并在脚本失败时运行失败时，可以使用此选项。例如，当运行可能仅适用于其他通用 CI 设置中的某些构建的脚本时，这很有用。</p><h2 id="ignore-scripts" tabindex="-1"><code>ignore-scripts</code> <a class="header-anchor" href="#ignore-scripts" aria-label="Permalink to &quot;`ignore-scripts`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>如果为 true，npm 不会运行 package.json 文件中指定的脚本。</p><p>请注意，明确旨在运行特定脚本的命令，例如<code>npm start</code>、<code>npm stop</code>、<code>npm restart</code>、<code>npm test</code>、 和如果设置了，<code>npm run-script</code>仍将运行其预期脚本，但它们<em>不会</em>运行任何前置或后置脚本。<code>ignore-scripts</code></p><h2 id="include" tabindex="-1"><code>include</code> <a class="header-anchor" href="#include" aria-label="Permalink to &quot;`include`&quot;">​</a></h2><ul><li>默认：</li><li>类型：“prod”、“dev”、“可选”或“peer”（可以设置多次）</li></ul><p>允许定义要安装的依赖项类型的选项。</p><p>这是 的逆<code>--omit=&lt;type&gt;</code>。</p><p><code>--include</code>无论在命令行上指定省略/包含的顺序如何，都不会省略 中指定的依赖关系类型。</p><h2 id="include-staged" tabindex="-1"><code>include-staged</code> <a class="header-anchor" href="#include-staged" aria-label="Permalink to &quot;`include-staged`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>允许安装“暂存”已发布的软件包，如<a href="https://github.com/npm/rfcs/pull/92" target="_blank" rel="noreferrer">npm RFC PR #92</a>所定义。</p><p>这是实验性的，npm 公共注册表尚未实现。</p><h2 id="init-author-email" tabindex="-1"><code>init-author-email</code> <a class="header-anchor" href="#init-author-email" aria-label="Permalink to &quot;`init-author-email`&quot;">​</a></h2><ul><li>默认： ””</li><li>类型：字符串</li></ul><p>默认情况下，该值<code>npm init</code>应用于包作者的电子邮件。</p><h2 id="init-author-name" tabindex="-1"><code>init-author-name</code> <a class="header-anchor" href="#init-author-name" aria-label="Permalink to &quot;`init-author-name`&quot;">​</a></h2><ul><li>默认： ””</li><li>类型：字符串</li></ul><p>默认情况下，该值<code>npm init</code>应用于包作者的姓名。</p><h2 id="init-author-url" tabindex="-1"><code>init-author-url</code> <a class="header-anchor" href="#init-author-url" aria-label="Permalink to &quot;`init-author-url`&quot;">​</a></h2><ul><li>默认： ””</li><li>输入：“”或 URL</li></ul><p>默认情况下，该值<code>npm init</code>应用于包作者的主页。</p><h2 id="init-license" tabindex="-1"><code>init-license</code> <a class="header-anchor" href="#init-license" aria-label="Permalink to &quot;`init-license`&quot;">​</a></h2><ul><li>默认值：“ISC”</li><li>类型：字符串</li></ul><p>该值<code>npm init</code>应默认用于包许可证。</p><h2 id="init-module" tabindex="-1"><code>init-module</code> <a class="header-anchor" href="#init-module" aria-label="Permalink to &quot;`init-module`&quot;">​</a></h2><ul><li>默认值：“~/.npm-init.js”</li><li>类型：路径</li></ul><p>将由<code>npm init</code>命令加载的模块。有关更多信息，请参阅<a href="https://github.com/npm/init-package-json" target="_blank" rel="noreferrer">init-package-json</a>模块的文档，或<a href="https://docs.npmjs.com/cli/v7/commands/npm-init" target="_blank" rel="noreferrer">npm init</a>。</p><h2 id="init-version" tabindex="-1"><code>init-version</code> <a class="header-anchor" href="#init-version" aria-label="Permalink to &quot;`init-version`&quot;">​</a></h2><ul><li>默认值：“1.0.0”</li><li>类型：SemVer 字符串</li></ul><p>默认情况下应用于包版本号的值<code>npm init</code>（如果尚未在 package.json 中设置）。</p><h2 id="json" tabindex="-1"><code>json</code> <a class="header-anchor" href="#json" aria-label="Permalink to &quot;`json`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>是否输出JSON数据，而不是正常输出。</p><ul><li>它允许在<code>npm pkg set</code>将设置值保存到您的<code>package.json</code>.</li></ul><p>并非所有 npm 命令都支持。</p><h2 id="key" tabindex="-1"><code>key</code> <a class="header-anchor" href="#key" aria-label="Permalink to &quot;`key`&quot;">​</a></h2><ul><li>默认值：空</li><li>类型：null 或 String</li></ul><p>访问注册表时传递的客户端密钥。值应采用 PEM 格式，并用字符串“\\n”替换换行符。例如：</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;-----BEGIN PRIVATE KEY-----\\nXXXX\\nXXXX\\n-----END PRIVATE KEY-----&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">key</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;-----BEGIN PRIVATE KEY-----\\nXXXX\\nXXXX\\n-----END PRIVATE KEY-----&quot;</span></span></code></pre></div><p>它不是<em>密钥</em>文件的路径（并且没有“keyfile”选项）。</p><h2 id="legacy-bundling" tabindex="-1"><code>legacy-bundling</code> <a class="header-anchor" href="#legacy-bundling" aria-label="Permalink to &quot;`legacy-bundling`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>使 npm 安装该软件包，以便 1.4 之前的 npm 版本（例如 Node 0.8 中包含的版本）可以安装该软件包。这消除了所有自动重复数据删除。如果与<code>global-style</code>此选项一起使用将是首选。</p><h2 id="legacy-peer-deps" tabindex="-1"><code>legacy-peer-deps</code> <a class="header-anchor" href="#legacy-peer-deps" aria-label="Permalink to &quot;`legacy-peer-deps`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p><code>peerDependencies</code>导致 npm在构建包树时完全忽略，如 npm 版本 3 到 6 中那样。</p><p>如果某个软件包由于<code>peerDependencies</code>冲突过于严格而无法安装，它提供了一种继续解决这种情况的方法。</p><p>这与 不同<code>--omit=peer</code>，因为<code>--omit=peer</code>它将避免<code>peerDependencies</code>在磁盘上解包，但仍会设计一棵树，以便<code>peerDependencies</code> <em>可以</em>在正确的位置解包。</p><p><code>legacy-peer-deps</code>不建议使用，因为它不会强制<code>peerDependencies</code>执行元依赖项可能依赖的契约。</p><h2 id="link" tabindex="-1"><code>link</code> <a class="header-anchor" href="#link" aria-label="Permalink to &quot;`link`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>与 一起使用<code>npm ls</code>，将输出限制为仅那些链接的包。</p><h2 id="local-address" tabindex="-1"><code>local-address</code> <a class="header-anchor" href="#local-address" aria-label="Permalink to &quot;`local-address`&quot;">​</a></h2><ul><li>默认值：空</li><li>类型：IP 地址</li></ul><p>连接到 npm 注册表时使用的本地接口的 IP 地址。在 0.12 之前的 Node 版本中必须是 IPv4。</p><h2 id="location" tabindex="-1"><code>location</code> <a class="header-anchor" href="#location" aria-label="Permalink to &quot;`location`&quot;">​</a></h2><ul><li>默认值：“user”，除非<code>--global</code>传递，这也会将此值设置为“global”</li><li>类型：“全局”、“用户”或“项目”</li></ul><p>当传递给<code>npm config</code>它时，它指的是要使用哪个配置文件。</p><h2 id="loglevel" tabindex="-1"><code>loglevel</code> <a class="header-anchor" href="#loglevel" aria-label="Permalink to &quot;`loglevel`&quot;">​</a></h2><ul><li>默认值：“通知”</li><li>类型：“silent”、“error”、“warn”、“notice”、“http”、“timing”、“info”、“verbose”或“silly”</li></ul><p>要报告什么级别的日志。失败时，<em>所有</em>日志都会写入<code>npm-debug.log</code>当前工作目录。</p><p>显示高于设置级别的所有日志。默认为“通知”。</p><p>另请参阅<code>foreground-scripts</code>配置。</p><h2 id="logs-max" tabindex="-1"><code>logs-max</code> <a class="header-anchor" href="#logs-max" aria-label="Permalink to &quot;`logs-max`&quot;">​</a></h2><ul><li>默认值：10</li><li>类型：数字</li></ul><p>要存储的日志文件的最大数量。</p><h2 id="long" tabindex="-1"><code>long</code> <a class="header-anchor" href="#long" aria-label="Permalink to &quot;`long`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>显示<code>ls</code>、<code>search</code>、 和中的扩展信息<code>help-search</code>。</p><h2 id="maxsockets" tabindex="-1"><code>maxsockets</code> <a class="header-anchor" href="#maxsockets" aria-label="Permalink to &quot;`maxsockets`&quot;">​</a></h2><ul><li>默认值：15</li><li>类型：数字</li></ul><p>每个源使用的最大连接数（协议/主机/端口组合）。</p><h2 id="message" tabindex="-1"><code>message</code> <a class="header-anchor" href="#message" aria-label="Permalink to &quot;`message`&quot;">​</a></h2><ul><li>默认值：“%s”</li><li>类型：字符串</li></ul><p><code>npm version</code>创建版本提交时使用的提交消息。</p><p>消息中的任何“%s”都将替换为版本号。</p><h2 id="node-options" tabindex="-1"><code>node-options</code> <a class="header-anchor" href="#node-options" aria-label="Permalink to &quot;`node-options`&quot;">​</a></h2><ul><li>默认值：空</li><li>类型：null 或 String</li></ul><p>通过环境变量传递到 Node.js 的选项<code>NODE_OPTIONS</code>。这不会影响 npm 本身的执行方式，但会影响生命周期脚本的调用方式。</p><h2 id="node-version" tabindex="-1"><code>node-version</code> <a class="header-anchor" href="#node-version" aria-label="Permalink to &quot;`node-version`&quot;">​</a></h2><ul><li>默认值：Node.js<code>process.version</code>值</li><li>类型：SemVer 字符串</li></ul><p>检查包的<code>engines</code>设置时使用的节点版本。</p><h2 id="noproxy" tabindex="-1"><code>noproxy</code> <a class="header-anchor" href="#noproxy" aria-label="Permalink to &quot;`noproxy`&quot;">​</a></h2><ul><li>默认值：NO_PROXY 环境变量的值</li><li>类型：String（可设置多次）</li></ul><p>应绕过任何代理的域扩展。</p><p>还接受逗号分隔的字符串。</p><h2 id="npm-version" tabindex="-1"><code>npm-version</code> <a class="header-anchor" href="#npm-version" aria-label="Permalink to &quot;`npm-version`&quot;">​</a></h2><ul><li>默认值：输出<code>npm --version</code></li><li>类型：SemVer 字符串</li></ul><p>检查包<code>engines</code>设置时使用的 npm 版本。</p><h2 id="offline" tabindex="-1"><code>offline</code> <a class="header-anchor" href="#offline" aria-label="Permalink to &quot;`offline`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>强制离线模式：安装期间不会执行任何网络请求。要允许 CLI 填充缺失的缓存数据，请参阅<code>--prefer-offline</code>。</p><h2 id="omit" tabindex="-1"><code>omit</code> <a class="header-anchor" href="#omit" aria-label="Permalink to &quot;`omit`&quot;">​</a></h2><ul><li>默认值：如果<code>NODE_ENV</code>环境变量设置为“生产”，则为“dev”，否则为空。</li><li>类型：“dev”、“可选”或“peer”（可以设置多次）</li></ul><p>要从磁盘上的安装树中省略的依赖项类型。</p><p>请注意，这些依赖项<em>仍会被</em>解析并添加到<code>package-lock.json</code>或<code>npm-shrinkwrap.json</code>文件中。它们只是没有物理安装在磁盘上。</p><p>如果包类型同时出现在<code>--include</code>和<code>--omit</code>列表中，那么它将被包含在内。</p><p>如果生成的省略列表包含<code>&#39;dev&#39;</code>，则所有生命周期脚本的<code>NODE_ENV</code>环境变量将设置为。<code>&#39;production&#39;</code></p><h2 id="otp" tabindex="-1"><code>otp</code> <a class="header-anchor" href="#otp" aria-label="Permalink to &quot;`otp`&quot;">​</a></h2><ul><li>默认值：空</li><li>类型：null 或 String</li></ul><p>这是来自双因素身份验证器的一次性密码。使用 发布或更改包权限时需要它<code>npm access</code>。</p><p>如果未设置，并且注册表响应因询问一次性密码而失败，则 npm 将在命令行上提示输入密码。</p><h2 id="pack-destination" tabindex="-1"><code>pack-destination</code> <a class="header-anchor" href="#pack-destination" aria-label="Permalink to &quot;`pack-destination`&quot;">​</a></h2><ul><li>默认： ”。”</li><li>类型：字符串</li></ul><p>将保存 tarball 的目录<code>npm pack</code>。</p><h2 id="package" tabindex="-1"><code>package</code> <a class="header-anchor" href="#package" aria-label="Permalink to &quot;`package`&quot;">​</a></h2><ul><li>默认：</li><li>类型：String（可设置多次）</li></ul><p>要安装的包<code>npm exec</code></p><h2 id="package-lock" tabindex="-1"><code>package-lock</code> <a class="header-anchor" href="#package-lock" aria-label="Permalink to &quot;`package-lock`&quot;">​</a></h2><ul><li>默认值：true</li><li>类型：布尔值</li></ul><p>如果设置为 false，则<code>package-lock.json</code>安装时忽略文件。这也会阻止<em>写入</em> <code>package-lock.json</code>if<code>save</code>为 true。</p><p>当包包锁被禁用时，无关模块的自动修剪也将被禁用。要删除禁用包锁的无关模块，请使用<code>npm prune</code>.</p><h2 id="package-lock-only" tabindex="-1"><code>package-lock-only</code> <a class="header-anchor" href="#package-lock-only" aria-label="Permalink to &quot;`package-lock-only`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>如果设置为 true，则当前操作将仅使用<code>package-lock.json</code>, 忽略<code>node_modules</code>.</p><p>这<code>update</code>意味着仅<code>package-lock.json</code>会更新，而不是检查<code>node_modules</code>和下载依赖项。</p><p>这意味着<code>list</code>输出将基于 描述的树<code>package-lock.json</code>，而不是 的内容<code>node_modules</code>。</p><h2 id="parseable" tabindex="-1"><code>parseable</code> <a class="header-anchor" href="#parseable" aria-label="Permalink to &quot;`parseable`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>写入标准输出的命令输出可解析的结果。对于<code>npm search</code>，这将是制表符分隔的表格格式。</p><h2 id="prefer-offline" tabindex="-1"><code>prefer-offline</code> <a class="header-anchor" href="#prefer-offline" aria-label="Permalink to &quot;`prefer-offline`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>如果为 true，则将绕过缓存数据的过时检查，但将从服务器请求丢失的数据。要强制完全离线模式，请使用<code>--offline</code>.</p><h2 id="prefer-online" tabindex="-1"><code>prefer-online</code> <a class="header-anchor" href="#prefer-online" aria-label="Permalink to &quot;`prefer-online`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>如果为 true，将强制对缓存数据进行过时检查，使 CLI 立即查找更新，即使是新的包数据也是如此。</p><h2 id="prefix" tabindex="-1"><code>prefix</code> <a class="header-anchor" href="#prefix" aria-label="Permalink to &quot;`prefix`&quot;">​</a></h2><ul><li>默认值：在全局模式下，安装节点可执行文件的文件夹。在本地模式下，包含 package.json 文件或 node_modules 文件夹的最近父文件夹。</li><li>类型：路径</li></ul><p>安装全局项目的位置。如果在命令行上设置，则会强制非全局命令在指定文件夹中运行。</p><h2 id="preid" tabindex="-1"><code>preid</code> <a class="header-anchor" href="#preid" aria-label="Permalink to &quot;`preid`&quot;">​</a></h2><ul><li>默认： ””</li><li>类型：字符串</li></ul><p>用作 semver 的“预发布”部分前缀的“预发布标识符”。就像<code>rc</code>在<code>1.2.0-rc.8</code>.</p><h2 id="progress" tabindex="-1"><code>progress</code> <a class="header-anchor" href="#progress" aria-label="Permalink to &quot;`progress`&quot;">​</a></h2><ul><li>默认值：<code>true</code>除非在已知的 CI 系统中运行</li><li>类型：布尔值</li></ul><p>当设置为 时<code>true</code>，npm 将在时间密集型操作期间显示进度条（如果<code>process.stderr</code>是 TTY）。</p><p>设置<code>false</code>为抑制进度条。</p><h2 id="proxy" tabindex="-1"><code>proxy</code> <a class="header-anchor" href="#proxy" aria-label="Permalink to &quot;`proxy`&quot;">​</a></h2><ul><li>默认值：空</li><li>类型：null、false 或 URL</li></ul><p>用于传出 http 请求的代理。如果设置了<code>HTTP_PROXY</code>或<code>http_proxy</code>环境变量，底层库将遵循代理设置<code>request</code>。</p><h2 id="read-only" tabindex="-1"><code>read-only</code> <a class="header-anchor" href="#read-only" aria-label="Permalink to &quot;`read-only`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>这用于在使用命令配置受限访问令牌时将令牌标记为无法发布<code>npm token create</code>。</p><h2 id="rebuild-bundle" tabindex="-1"><code>rebuild-bundle</code> <a class="header-anchor" href="#rebuild-bundle" aria-label="Permalink to &quot;`rebuild-bundle`&quot;">​</a></h2><ul><li>默认值：true</li><li>类型：布尔值</li></ul><p>安装后重建捆绑的依赖项。</p><h2 id="registry" tabindex="-1"><code>registry</code> <a class="header-anchor" href="#registry" aria-label="Permalink to &quot;`registry`&quot;">​</a></h2><ul><li>默认值：“ <a href="https://registry.npmjs.org/" target="_blank" rel="noreferrer">https://registry.npmjs.org/</a> ”</li><li>类型： 网址</li></ul><p>npm 注册表的基本 URL。</p><h2 id="save" tabindex="-1"><code>save</code> <a class="header-anchor" href="#save" aria-label="Permalink to &quot;`save`&quot;">​</a></h2><ul><li>默认值：true</li><li>类型：布尔值</li></ul><p>将已安装的包作为依赖项保存到 package.json 文件中。</p><p>与该<code>npm rm</code>命令一起使用时，从 package.json 中删除依赖项。</p><h2 id="save-bundle" tabindex="-1"><code>save-bundle</code> <a class="header-anchor" href="#save-bundle" aria-label="Permalink to &quot;`save-bundle`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>如果在安装时使用<code>--save</code>、<code>--save-dev</code>或保存软件包<code>--save-optional</code>，则也将其放入列表中<code>bundleDependencies</code>。</p><p>如果<code>--save-peer</code>已设置，请忽略，因为无法捆绑peerDependency。</p><h2 id="save-dev" tabindex="-1"><code>save-dev</code> <a class="header-anchor" href="#save-dev" aria-label="Permalink to &quot;`save-dev`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>将已安装的包保存到 package.json 文件中，命名为<code>devDependencies</code>.</p><h2 id="save-exact" tabindex="-1"><code>save-exact</code> <a class="header-anchor" href="#save-exact" aria-label="Permalink to &quot;`save-exact`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>保存到 package.json 的依赖项将使用精确的版本进行配置，而不是使用 npm 的默认 semver 范围运算符。</p><h2 id="save-optional" tabindex="-1"><code>save-optional</code> <a class="header-anchor" href="#save-optional" aria-label="Permalink to &quot;`save-optional`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>将已安装的包保存到 package.json 文件中，命名为<code>optionalDependencies</code>.</p><h2 id="save-peer" tabindex="-1"><code>save-peer</code> <a class="header-anchor" href="#save-peer" aria-label="Permalink to &quot;`save-peer`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>保存已安装的软件包。到 package.json 文件作为<code>peerDependencies</code></p><h2 id="save-prefix" tabindex="-1"><code>save-prefix</code> <a class="header-anchor" href="#save-prefix" aria-label="Permalink to &quot;`save-prefix`&quot;">​</a></h2><ul><li>默认值：“^”</li><li>类型：字符串</li></ul><p><code>--save</code>配置如何通过或<code>--save-dev</code>获取前缀将软件包版本安装到 package.json 文件。</p><p>例如，如果某个软件包具有 version <code>1.2.3</code>，则默认情况下其版本设置为<code>^1.2.3</code>允许对该软件包进行小幅升级，但之后<code>npm config set save-prefix=&#39;~&#39;</code>将设置为<code>~1.2.3</code>仅允许补丁升级。</p><h2 id="save-prod" tabindex="-1"><code>save-prod</code> <a class="header-anchor" href="#save-prod" aria-label="Permalink to &quot;`save-prod`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>将安装的包保存到<code>dependencies</code>专门的. <code>devDependencies</code>如果或中已存在包<code>optionalDependencies</code>，但您希望将其移至非可选生产依赖项，则这非常有用。</p><p>如果为 true，则这是默认行为<code>--save</code>，并且<code>--save-dev</code>或都不<code>--save-optional</code>为 true。</p><h2 id="scope" tabindex="-1"><code>scope</code> <a class="header-anchor" href="#scope" aria-label="Permalink to &quot;`scope`&quot;">​</a></h2><ul><li>默认值：当前项目的范围（如果有）或“”</li><li>类型：字符串</li></ul><p>将操作与作用域注册表的作用域相关联。</p><p>登录或注销私有注册表时很有用：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># log in, linking the scope to the custom registry</span></span>\n<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">login</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--scope=@mycorp</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--registry=https://registry.mycorp.com</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;"># log out, removing the link and the auth token</span></span>\n<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">logout</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--scope=@mycorp</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># log in, linking the scope to the custom registry</span></span>\n<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">login</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--scope=@mycorp</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--registry=https://registry.mycorp.com</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;"># log out, removing the link and the auth token</span></span>\n<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">logout</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--scope=@mycorp</span></span></code></pre></div><p>这将导致<code>@mycorp</code>映射到注册表，以便将来安装根据模式指定的包<code>@mycorp/package</code>。</p><p>这也将导致<code>npm init</code>创建一个作用域包。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># accept all defaults, and create a package named &quot;@foo/whatever&quot;,</span></span>\n<span class="line"><span style="color:#6A737D;"># instead of just named &quot;whatever&quot;</span></span>\n<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--scope=@foo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--yes</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># accept all defaults, and create a package named &quot;@foo/whatever&quot;,</span></span>\n<span class="line"><span style="color:#6A737D;"># instead of just named &quot;whatever&quot;</span></span>\n<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--scope=@foo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--yes</span></span></code></pre></div><h2 id="script-shell" tabindex="-1"><code>script-shell</code> <a class="header-anchor" href="#script-shell" aria-label="Permalink to &quot;`script-shell`&quot;">​</a></h2><ul><li>默认值：POSIX 系统上为“/bin/sh”，Windows 上为“cmd.exe”</li><li>类型：null 或 String</li></ul><p>用于通过<code>npm exec</code>,<code>npm run</code>和<code>npm init &lt;pkg&gt;</code>命令运行脚本的 shell。</p><h2 id="searchexclude" tabindex="-1"><code>searchexclude</code> <a class="header-anchor" href="#searchexclude" aria-label="Permalink to &quot;`searchexclude`&quot;">​</a></h2><ul><li>默认： ””</li><li>类型：字符串</li></ul><p>以空格分隔的选项限制搜索结果。</p><h2 id="searchlimit" tabindex="-1"><code>searchlimit</code> <a class="header-anchor" href="#searchlimit" aria-label="Permalink to &quot;`searchlimit`&quot;">​</a></h2><ul><li>默认值：20</li><li>类型：数字</li></ul><p>限制搜索结果的项目数。根本不适用于遗留搜索。</p><h2 id="searchopts" tabindex="-1"><code>searchopts</code> <a class="header-anchor" href="#searchopts" aria-label="Permalink to &quot;`searchopts`&quot;">​</a></h2><ul><li>默认： ””</li><li>类型：字符串</li></ul><p>始终传递给搜索的空格分隔选项。</p><h2 id="searchstaleness" tabindex="-1"><code>searchstaleness</code> <a class="header-anchor" href="#searchstaleness" aria-label="Permalink to &quot;`searchstaleness`&quot;">​</a></h2><ul><li>默认值：900</li><li>类型：数字</li></ul><p>如果使用旧版搜索端点，则在发出另一个注册表请求之前的缓存寿命（以秒为单位）。</p><h2 id="shell" tabindex="-1"><code>shell</code> <a class="header-anchor" href="#shell" aria-label="Permalink to &quot;`shell`&quot;">​</a></h2><ul><li>默认值：SHELL 环境变量，或 Posix 上的“bash”，或 Windows 上的“cmd.exe”</li><li>类型：字符串</li></ul><p>为命令运行的 shell <code>npm explore</code>。</p><h2 id="sign-git-commit" tabindex="-1"><code>sign-git-commit</code> <a class="header-anchor" href="#sign-git-commit" aria-label="Permalink to &quot;`sign-git-commit`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>如果设置为 true，则该<code>npm version</code>命令将使用<code>-S</code>添加签名来提交新的包版本。</p><p>请注意，git 要求您在 git 配置中设置 GPG 密钥才能正常工作。</p><h2 id="sign-git-tag" tabindex="-1"><code>sign-git-tag</code> <a class="header-anchor" href="#sign-git-tag" aria-label="Permalink to &quot;`sign-git-tag`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>如果设置为 true，则该<code>npm version</code>命令将使用<code>-s</code>添加签名来标记版本。</p><p>请注意，git 要求您在 git 配置中设置 GPG 密钥才能正常工作。</p><h2 id="strict-peer-deps" tabindex="-1"><code>strict-peer-deps</code> <a class="header-anchor" href="#strict-peer-deps" aria-label="Permalink to &quot;`strict-peer-deps`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>如果设置为<code>true</code>，并且<code>--legacy-peer-deps</code>未设置，则<em>任何</em>冲突<code>peerDependencies</code>都将被视为安装失败，即使 npm 可以根据非对等依赖关系合理猜测适当的解决方案。</p><p>默认情况下，<code>peerDependencies</code>依赖关系图中深层的冲突将使用最近的非对等依赖关系规范来解决，即使这样做会导致某些包接收超出其包<code>peerDependencies</code>对象中设置的范围的对等依赖关系。</p><p>当执行此类和覆盖时，会打印一条警告，解释冲突和涉及的包。如果<code>--strict-peer-deps</code>设置了，则此警告将被视为失败。</p><h2 id="strict-ssl" tabindex="-1"><code>strict-ssl</code> <a class="header-anchor" href="#strict-ssl" aria-label="Permalink to &quot;`strict-ssl`&quot;">​</a></h2><ul><li>默认值：true</li><li>类型：布尔值</li></ul><p>通过 https 向注册表发出请求时是否进行 SSL 密钥验证。</p><p>另请参阅<code>ca</code>配置。</p><h2 id="tag" tabindex="-1"><code>tag</code> <a class="header-anchor" href="#tag" aria-label="Permalink to &quot;`tag`&quot;">​</a></h2><ul><li>默认值：“最新”</li><li>类型：字符串</li></ul><p>如果你要求 npm 安装一个包并且不告诉它具体的版本，那么它会安装指定的标签。</p><p>如果没有给出显式标记，还有添加到命令指定的 package@version 的标记<code>npm tag</code>。</p><p>当由命令使用时<code>npm diff</code>，这是用于获取默认情况下将与本地文件进行比较的 tarball 的标签。</p><h2 id="tag-version-prefix" tabindex="-1"><code>tag-version-prefix</code> <a class="header-anchor" href="#tag-version-prefix" aria-label="Permalink to &quot;`tag-version-prefix`&quot;">​</a></h2><ul><li>Default: &quot;v&quot;</li><li>类型：字符串</li></ul><p>如果设置，则在使用 执行版本增量时更改标记新版本时使用的前缀<code>npm-version</code>。要完全删除前缀，请将其设置为空字符串：<code>&quot;&quot;</code>。</p><p>由于其他工具可能依赖于 npm 版本标记的约定<code>v1.0.0</code>，<em>因此仅在绝对必要时才使用此属性</em>。特别是，在覆盖公共包的此设置时要小心。</p><h2 id="timing" tabindex="-1"><code>timing</code> <a class="header-anchor" href="#timing" aria-label="Permalink to &quot;`timing`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>如果为 true，则即使命令成功完成，也会将<code>npm-debug</code>日志<code>_logs</code>和计时信息写入缓存中。是一个换行符分隔的 JSON 对象列表。<code>_timing.json``_timing.json</code></p><p><a href="https://npm.im/json" target="_blank" rel="noreferrer">您可以使用以下json</a>命令行快速查看它： <code>npm exec -- json -g &lt; ~/.npm/_timing.json</code>。</p><h2 id="umask" tabindex="-1"><code>umask</code> <a class="header-anchor" href="#umask" aria-label="Permalink to &quot;`umask`&quot;">​</a></h2><ul><li>默认值：0</li><li>类型：八进制数字字符串，范围 0000..0777 (0..511)</li></ul><p>在文件和文件夹上设置文件创建模式时使用的“umask”值。</p><p>文件夹和可执行文件被赋予一种模式，该模式<code>0o777</code>根据该值进行屏蔽。其他文件被赋予一个根据该值屏蔽的模式<code>0o666</code>。</p><p>请注意，底层系统还会<em>将</em>自己的 umask 值应用于创建的文件和文件夹，并且 npm 不会规避这一点，而是将配置添加<code>--umask</code>到其中。</p><p>因此，大多数 POSIX 系统上的有效默认 umask 值为 0o22，这意味着文件夹和可执行文件使用 0o755 模式创建，其他文件使用 0o644 模式创建。</p><h2 id="unicode" tabindex="-1"><code>unicode</code> <a class="header-anchor" href="#unicode" aria-label="Permalink to &quot;`unicode`&quot;">​</a></h2><ul><li><code>LC_ALL</code>默认值：在 Windows 上为 false，在具有 unicode 语言环境的 mac/unix 系统上为 true，由、<code>LC_CTYPE</code>或环境变量定义<code>LANG</code>。</li><li>类型：布尔值</li></ul><p>当设置为 true 时，npm 在树输出中使用 unicode 字符。当为 false 时，它使用 ascii 字符而不是 unicode 字形。</p><h2 id="update-notifier" tabindex="-1"><code>update-notifier</code> <a class="header-anchor" href="#update-notifier" aria-label="Permalink to &quot;`update-notifier`&quot;">​</a></h2><ul><li>默认值：true</li><li>类型：布尔值</li></ul><p>设置为 false 可以在使用比最新版本更旧的 npm 时抑制更新通知。</p><h2 id="usage" tabindex="-1"><code>usage</code> <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;`usage`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>显示有关指定命令的简短用法输出。</p><h2 id="user-agent" tabindex="-1"><code>user-agent</code> <a class="header-anchor" href="#user-agent" aria-label="Permalink to &quot;`user-agent`&quot;">​</a></h2><ul><li>默认值：“npm/{npm-version} 节点/{node-version} {platform} {arch} 工作区/{workspaces} {ci}”</li><li>类型：字符串</li></ul><p>设置用户代理请求标头。以下字段将替换为其实际对应字段：</p><ul><li><code>{npm-version}</code>- 使用的npm版本</li><li><code>{node-version}</code>- 使用的 Node.js 版本</li><li><code>{platform}</code>- 的价值<code>process.platform</code></li><li><code>{arch}</code>- 的价值<code>process.arch</code></li><li><code>{workspaces}</code>-<code>true</code>如果设置了<code>workspaces</code>或<code>workspace</code>选项，则设置为。</li><li><code>{ci}</code>- 配置的值<code>ci-name</code>（如果已设置）前缀为<code>ci/</code>，如果为空则为空字符串<code>ci-name</code>。</li></ul><h2 id="userconfig" tabindex="-1"><code>userconfig</code> <a class="header-anchor" href="#userconfig" aria-label="Permalink to &quot;`userconfig`&quot;">​</a></h2><ul><li>默认值：“~/.npmrc”</li><li>类型：路径</li></ul><p>用户级配置设置的位置。</p><p>这可能会被<code>npm_config_userconfig</code>环境变量或<code>--userconfig</code>命令行选项覆盖，但可能<em>不会</em>被<code>globalconfig</code>文件中的设置覆盖。</p><h2 id="version" tabindex="-1"><code>version</code> <a class="header-anchor" href="#version" aria-label="Permalink to &quot;`version`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>如果为true，则输出npm版本并成功退出。</p><p>仅当在命令行上明确指定时才相关。</p><h2 id="versions" tabindex="-1"><code>versions</code> <a class="header-anchor" href="#versions" aria-label="Permalink to &quot;`versions`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>如果为 true，则输出 npm 版本以及节点的<code>process.versions</code>映射和当前工作目录文件中的版本<code>package.json</code>（如果存在），并成功退出。</p><p>仅当在命令行上明确指定时才相关。</p><h2 id="viewer" tabindex="-1"><code>viewer</code> <a class="header-anchor" href="#viewer" aria-label="Permalink to &quot;`viewer`&quot;">​</a></h2><ul><li>默认值：Posix 上为“man”，Windows 上为“browser”</li><li>类型：字符串</li></ul><p>用于查看帮助内容的程序。</p><p>设置为<code>&quot;browser&quot;</code>在默认 Web 浏览器中查看 html 帮助内容。</p><h2 id="which" tabindex="-1"><code>which</code> <a class="header-anchor" href="#which" aria-label="Permalink to &quot;`which`&quot;">​</a></h2><ul><li>默认值：空</li><li>类型：空或数字</li></ul><p>如果有多个资金来源，则打开其中1索引的来源URL。</p><h2 id="workspace" tabindex="-1"><code>workspace</code> <a class="header-anchor" href="#workspace" aria-label="Permalink to &quot;`workspace`&quot;">​</a></h2><ul><li>默认：</li><li>类型：String（可设置多次）</li></ul><p>允许在当前项目的已配置工作区上下文中运行命令，同时通过仅运行此配置选项定义的工作区进行过滤。</p><p>配置的有效值为<code>workspace</code>：</p><ul><li>工作区名称</li><li>工作区目录的路径</li><li>父工作区目录的路径（将导致选择所有嵌套工作区）</li></ul><p>当设置该<code>npm init</code>命令时，可以将其设置为尚不存在的工作空间的文件夹，以创建该文件夹并将其设置为项目中的全新工作空间。</p><p>该值不会导出到子进程的环境中。</p><h2 id="workspaces" tabindex="-1"><code>workspaces</code> <a class="header-anchor" href="#workspaces" aria-label="Permalink to &quot;`workspaces`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p><strong>允许在所有</strong>已配置工作区的上下文中运行命令。</p><p>该值不会导出到子进程的环境中。</p><h2 id="yes" tabindex="-1"><code>yes</code> <a class="header-anchor" href="#yes" aria-label="Permalink to &quot;`yes`&quot;">​</a></h2><ul><li>默认值：空</li><li>类型：空或布尔值</li></ul><p>对 npm 可能在命令行上打印的任何提示自动回答“是”。</p><h2 id="also" tabindex="-1"><code>also</code> <a class="header-anchor" href="#also" aria-label="Permalink to &quot;`also`&quot;">​</a></h2><ul><li>默认值：空</li><li>类型：null、“dev”或“development”</li><li>已弃用：请改用 --include=dev 。</li></ul><p>当设置为<code>dev</code>或 时<code>development</code>，这是 的别名<code>--include=dev</code>。</p><h2 id="auth-type" tabindex="-1"><code>auth-type</code> <a class="header-anchor" href="#auth-type" aria-label="Permalink to &quot;`auth-type`&quot;">​</a></h2><ul><li>默认值：“旧版”</li><li>类型：“legacy”、“sso”、“saml”或“oauth”</li><li>已弃用：这种 SSO/SAML/OAuth 方法已弃用，并将在 npm 的未来版本中删除，以支持基于 Web 的登录。</li></ul><p><code>adduser</code>/使用什么身份验证策略<code>login</code>。</p><h2 id="cache-max" tabindex="-1"><code>cache-max</code> <a class="header-anchor" href="#cache-max" aria-label="Permalink to &quot;`cache-max`&quot;">​</a></h2><ul><li>默认值：无穷大</li><li>类型：数字</li><li>已弃用：此选项已被弃用，取而代之的是<code>--prefer-online</code></li></ul><p><code>--cache-max=0</code> is an alias for <code>--prefer-online</code></p><h2 id="cache-min" tabindex="-1"><code>cache-min</code> <a class="header-anchor" href="#cache-min" aria-label="Permalink to &quot;`cache-min`&quot;">​</a></h2><ul><li>默认值：0</li><li>类型：数字</li><li>已弃用：此选项已被弃用，取而代之的是<code>--prefer-offline</code>.</li></ul><p><code>--cache-min=9999 (or bigger)</code>是 的别名<code>--prefer-offline</code>。</p><h2 id="dev" tabindex="-1"><code>dev</code> <a class="header-anchor" href="#dev" aria-label="Permalink to &quot;`dev`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li><li>已弃用：请改用 --include=dev 。</li></ul><p>别名为<code>--include=dev</code>.</p><h2 id="initauthoremail" tabindex="-1"><code>initauthoremail</code> <a class="header-anchor" href="#initauthoremail" aria-label="Permalink to &quot;`initauthoremail`&quot;">​</a></h2><ul><li>默认： ””</li><li>类型：字符串</li><li>已弃用：<code>--init-author-email</code>改为使用。</li></ul><p>别名为<code>--init-author-email</code></p><h2 id="initauthorname" tabindex="-1"><code>initauthorname</code> <a class="header-anchor" href="#initauthorname" aria-label="Permalink to &quot;`initauthorname`&quot;">​</a></h2><ul><li>默认： ””</li><li>类型：字符串</li><li>已弃用：<code>--init-author-name</code>改为使用。</li></ul><p>别名为<code>--init-author-name</code></p><h2 id="initauthorurl" tabindex="-1"><code>initauthorurl</code> <a class="header-anchor" href="#initauthorurl" aria-label="Permalink to &quot;`initauthorurl`&quot;">​</a></h2><ul><li>默认： ””</li><li>输入：“”或 URL</li><li>已弃用：<code>--init-author-url</code>改为使用。</li></ul><p>别名为<code>--init-author-url</code></p><h2 id="initlicense" tabindex="-1"><code>initlicense</code> <a class="header-anchor" href="#initlicense" aria-label="Permalink to &quot;`initlicense`&quot;">​</a></h2><ul><li>默认值：“ISC”</li><li>类型：字符串</li><li>已弃用：<code>--init-license</code>改为使用。</li></ul><p>别名为<code>--init-license</code></p><h2 id="initmodule" tabindex="-1"><code>initmodule</code> <a class="header-anchor" href="#initmodule" aria-label="Permalink to &quot;`initmodule`&quot;">​</a></h2><ul><li>默认值：“~/.npm-init.js”</li><li>类型：路径</li><li>已弃用：<code>--init-module</code>改为使用。</li></ul><p>别名为<code>--init-module</code></p><h2 id="initversion" tabindex="-1"><code>initversion</code> <a class="header-anchor" href="#initversion" aria-label="Permalink to &quot;`initversion`&quot;">​</a></h2><ul><li>默认值：“1.0.0”</li><li>类型：SemVer 字符串</li><li>已弃用：<code>--init-version</code>改为使用。</li></ul><p>别名为<code>--init-version</code></p><h2 id="only" tabindex="-1"><code>only</code> <a class="header-anchor" href="#only" aria-label="Permalink to &quot;`only`&quot;">​</a></h2><ul><li>默认值：空</li><li>类型：null、“prod”或“生产”</li><li>已弃用：用于<code>--omit=dev</code>从安装中省略开发依赖项。</li></ul><p>当设置为<code>prod</code>或 时<code>production</code>，这是 的别名<code>--omit=dev</code>。</p><h2 id="optional" tabindex="-1"><code>optional</code> <a class="header-anchor" href="#optional" aria-label="Permalink to &quot;`optional`&quot;">​</a></h2><ul><li>默认值：空</li><li>类型：空或布尔值</li><li>已弃用：用于<code>--omit=optional</code>排除或<code>--include=optional</code>包含可选依赖项。</li></ul><p>除非另有省略，否则默认值会安装可选的依赖项。</p><p>--include=可选 或 --omit=可选 的别名</p><h2 id="production" tabindex="-1"><code>production</code> <a class="header-anchor" href="#production" aria-label="Permalink to &quot;`production`&quot;">​</a></h2><ul><li>默认值：空</li><li>类型：空或布尔值</li><li>已弃用：<code>--omit=dev</code>改为使用。</li></ul><p>别名为<code>--omit=dev</code></p><h2 id="shrinkwrap" tabindex="-1"><code>shrinkwrap</code> <a class="header-anchor" href="#shrinkwrap" aria-label="Permalink to &quot;`shrinkwrap`&quot;">​</a></h2><ul><li>默认值：true</li><li>类型：布尔值</li><li>已弃用：请改用 --package-lock 设置。</li></ul><p>--package-lock 的别名</p><h2 id="sso-poll-frequency" tabindex="-1"><code>sso-poll-frequency</code> <a class="header-anchor" href="#sso-poll-frequency" aria-label="Permalink to &quot;`sso-poll-frequency`&quot;">​</a></h2><ul><li>默认值：500</li><li>类型：数字</li><li>已弃用：SSO/SAML/OAuth 的 --auth-type 方法将在 npm 的未来版本中删除，以支持基于 Web 的登录。</li></ul><p>当与启用 SSO 的<code>auth-type</code>s 一起使用时，配置在用户完成身份验证时轮询注册表的频率。</p><h2 id="sso-type" tabindex="-1"><code>sso-type</code> <a class="header-anchor" href="#sso-type" aria-label="Permalink to &quot;`sso-type`&quot;">​</a></h2><ul><li>默认值：“oauth”</li><li>类型：null、“oauth”或“saml”</li><li>已弃用：SSO/SAML/OAuth 的 --auth-type 方法将在 npm 的未来版本中删除，以支持基于 Web 的登录。</li></ul><p>如果<code>--auth-type=sso</code>，则为要使用的 SSO 类型。</p><h2 id="tmp" tabindex="-1"><code>tmp</code> <a class="header-anchor" href="#tmp" aria-label="Permalink to &quot;`tmp`&quot;">​</a></h2><ul><li><code>os.tmpdir()</code>默认值：Node.js方法返回的值<a href="https://nodejs.org/api/os.html#os_os_tmpdir" target="_blank" rel="noreferrer">https://nodejs.org/api/os.html#os_os_tmpdir</a></li><li>类型：路径</li><li>已弃用：不再使用此设置。npm 将临时文件存储在缓存中的特殊位置，它们由<code>cacache</code>.</li></ul><p>从历史上看，临时文件的存储位置。不再相关。</p>',529),d=[c];function n(s,r,t,p,h,u){return o(),a("div",null,d)}const b=e(i,[["render",n]]);export{f as __pageData,b as default};
