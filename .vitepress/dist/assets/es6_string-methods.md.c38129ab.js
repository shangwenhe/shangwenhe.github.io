import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.b2e9bf53.js";const C=JSON.parse('{"title":"字符串的新增方法","description":"","frontmatter":{},"headers":[],"relativePath":"es6/string-methods.md","filePath":"es6/string-methods.md"}'),l={name:"es6/string-methods.md"},o=p(`<h1 id="字符串的新增方法" tabindex="-1">字符串的新增方法 <a class="header-anchor" href="#字符串的新增方法" aria-label="Permalink to &quot;字符串的新增方法&quot;">​</a></h1><p>本章介绍字符串对象的新增方法。</p><h2 id="string-fromcodepoint" tabindex="-1">String.fromCodePoint() <a class="header-anchor" href="#string-fromcodepoint" aria-label="Permalink to &quot;String.fromCodePoint()&quot;">​</a></h2><p>ES5 提供<code>String.fromCharCode()</code>方法，用于从 Unicode 码点返回对应字符，但是这个方法不能识别码点大于<code>0xFFFF</code>的字符。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String.</span><span style="color:#B392F0;">fromCharCode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0x20BB7</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;ஷ&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String.</span><span style="color:#6F42C1;">fromCharCode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0x20BB7</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;ஷ&quot;</span></span></code></pre></div><p>上面代码中，<code>String.fromCharCode()</code>不能识别大于<code>0xFFFF</code>的码点，所以<code>0x20BB7</code>就发生了溢出，最高位<code>2</code>被舍弃了，最后返回码点<code>U+0BB7</code>对应的字符，而不是码点<code>U+20BB7</code>对应的字符。</p><p>ES6 提供了<code>String.fromCodePoint()</code>方法，可以识别大于<code>0xFFFF</code>的字符，弥补了<code>String.fromCharCode()</code>方法的不足。在作用上，正好与下面的<code>codePointAt()</code>方法相反。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String.</span><span style="color:#B392F0;">fromCodePoint</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0x20BB7</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;𠮷&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">String.</span><span style="color:#B392F0;">fromCodePoint</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0x78</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x1f680</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x79</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;x</span><span style="color:#79B8FF;">\\uD83D\\uDE80</span><span style="color:#9ECBFF;">y&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String.</span><span style="color:#6F42C1;">fromCodePoint</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0x20BB7</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;𠮷&quot;</span></span>
<span class="line"><span style="color:#24292E;">String.</span><span style="color:#6F42C1;">fromCodePoint</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0x78</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x1f680</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x79</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;x</span><span style="color:#005CC5;">\\uD83D\\uDE80</span><span style="color:#032F62;">y&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre></div><p>上面代码中，如果<code>String.fromCodePoint</code>方法有多个参数，则它们会被合并成一个字符串返回。</p><p>注意，<code>fromCodePoint</code>方法定义在<code>String</code>对象上，而<code>codePointAt</code>方法定义在字符串的实例对象上。</p><h2 id="string-raw" tabindex="-1">String.raw() <a class="header-anchor" href="#string-raw" aria-label="Permalink to &quot;String.raw()&quot;">​</a></h2><p>ES6 还为原生的 String 对象，提供了一个<code>raw()</code>方法。该方法返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，往往用于模板字符串的处理方法。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String.</span><span style="color:#B392F0;">raw</span><span style="color:#9ECBFF;">\`Hi</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">\${</span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">}!\`</span></span>
<span class="line"><span style="color:#6A737D;">// 实际返回 &quot;Hi\\\\n5!&quot;，显示的是转义后的结果 &quot;Hi\\n5!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">String.</span><span style="color:#B392F0;">raw</span><span style="color:#9ECBFF;">\`Hi</span><span style="color:#79B8FF;">\\u000A</span><span style="color:#9ECBFF;">!\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 实际返回 &quot;Hi\\\\u000A!&quot;，显示的是转义后的结果 &quot;Hi\\u000A!&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String.</span><span style="color:#6F42C1;">raw</span><span style="color:#032F62;">\`Hi</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">\${</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">3</span><span style="color:#032F62;">}!\`</span></span>
<span class="line"><span style="color:#6A737D;">// 实际返回 &quot;Hi\\\\n5!&quot;，显示的是转义后的结果 &quot;Hi\\n5!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">String.</span><span style="color:#6F42C1;">raw</span><span style="color:#032F62;">\`Hi</span><span style="color:#005CC5;">\\u000A</span><span style="color:#032F62;">!\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 实际返回 &quot;Hi\\\\u000A!&quot;，显示的是转义后的结果 &quot;Hi\\u000A!&quot;</span></span></code></pre></div><p>如果原字符串的斜杠已经转义，那么<code>String.raw()</code>会进行再次转义。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String.</span><span style="color:#B392F0;">raw</span><span style="color:#9ECBFF;">\`Hi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">n\`</span></span>
<span class="line"><span style="color:#6A737D;">// 返回 &quot;Hi\\\\\\\\n&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">String.</span><span style="color:#B392F0;">raw</span><span style="color:#9ECBFF;">\`Hi</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">n\`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hi</span><span style="color:#79B8FF;">\\\\\\\\</span><span style="color:#9ECBFF;">n&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String.</span><span style="color:#6F42C1;">raw</span><span style="color:#032F62;">\`Hi</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">n\`</span></span>
<span class="line"><span style="color:#6A737D;">// 返回 &quot;Hi\\\\\\\\n&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">String.</span><span style="color:#6F42C1;">raw</span><span style="color:#032F62;">\`Hi</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">n\`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hi</span><span style="color:#005CC5;">\\\\\\\\</span><span style="color:#032F62;">n&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p><code>String.raw()</code>方法可以作为处理模板字符串的基本方法，它会将所有变量替换，而且对斜杠进行转义，方便下一步作为字符串来使用。</p><p><code>String.raw()</code>本质上是一个正常的函数，只是专用于模板字符串的标签函数。如果写成正常函数的形式，它的第一个参数，应该是一个具有<code>raw</code>属性的对象，且<code>raw</code>属性的值应该是一个数组，对应模板字符串解析后的值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// \`foo\${1 + 2}bar\`</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#E1E4E8;">String.</span><span style="color:#B392F0;">raw</span><span style="color:#E1E4E8;">({ raw: [</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">] }, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;foo3bar&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// \`foo\${1 + 2}bar\`</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#24292E;">String.</span><span style="color:#6F42C1;">raw</span><span style="color:#24292E;">({ raw: [</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">] }, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;foo3bar&quot;</span></span></code></pre></div><p>上面代码中，<code>String.raw()</code>方法的第一个参数是一个对象，它的<code>raw</code>属性等同于原始的模板字符串解析后得到的数组。</p><p>作为函数，<code>String.raw()</code>的代码实现基本如下。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String.</span><span style="color:#B392F0;">raw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">strings</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">values</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> output </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> index;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; index </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> values.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; index</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    output </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> strings.raw[index] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> values[index];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  output </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> strings.raw[index]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> output;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String.</span><span style="color:#6F42C1;">raw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">strings</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">values</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> output </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> index;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; index </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> values.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; index</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    output </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> strings.raw[index] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> values[index];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  output </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> strings.raw[index]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> output;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="实例方法-codepointat" tabindex="-1">实例方法：codePointAt() <a class="header-anchor" href="#实例方法-codepointat" aria-label="Permalink to &quot;实例方法：codePointAt()&quot;">​</a></h2><p>JavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为<code>2</code>个字节。对于那些需要<code>4</code>个字节储存的字符（Unicode 码点大于<code>0xFFFF</code>的字符），JavaScript 会认为它们是两个字符。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;𠮷&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">s.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">charCodeAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 55362</span></span>
<span class="line"><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">charCodeAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 57271</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;𠮷&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">charCodeAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 55362</span></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">charCodeAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 57271</span></span></code></pre></div><p>上面代码中，汉字“𠮷”（注意，这个字不是“吉祥”的“吉”）的码点是<code>0x20BB7</code>，UTF-16 编码为<code>0xD842 0xDFB7</code>（十进制为<code>55362 57271</code>），需要<code>4</code>个字节储存。对于这种<code>4</code>个字节的字符，JavaScript 不能正确处理，字符串长度会误判为<code>2</code>，而且<code>charAt()</code>方法无法读取整个字符，<code>charCodeAt()</code>方法只能分别返回前两个字节和后两个字节的值。</p><p>ES6 提供了<code>codePointAt()</code>方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;𠮷a&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">codePointAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 134071</span></span>
<span class="line"><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">codePointAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 57271</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">codePointAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 97</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;𠮷a&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">codePointAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 134071</span></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">codePointAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 57271</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">codePointAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 97</span></span></code></pre></div><p><code>codePointAt()</code>方法的参数，是字符在字符串中的位置（从 0 开始）。上面代码中，JavaScript 将“𠮷a”视为三个字符，codePointAt 方法在第一个字符上，正确地识别了“𠮷”，返回了它的十进制码点 134071（即十六进制的<code>20BB7</code>）。在第二个字符（即“𠮷”的后两个字节）和第三个字符“a”上，<code>codePointAt()</code>方法的结果与<code>charCodeAt()</code>方法相同。</p><p>总之，<code>codePointAt()</code>方法会正确返回 32 位的 UTF-16 字符的码点。对于那些两个字节储存的常规字符，它的返回结果与<code>charCodeAt()</code>方法相同。</p><p><code>codePointAt()</code>方法返回的是码点的十进制值，如果想要十六进制的值，可以使用<code>toString()</code>方法转换一下。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;𠮷a&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">codePointAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;20bb7&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">codePointAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;61&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;𠮷a&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">codePointAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;20bb7&quot;</span></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">codePointAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;61&quot;</span></span></code></pre></div><p>你可能注意到了，<code>codePointAt()</code>方法的参数，仍然是不正确的。比如，上面代码中，字符<code>a</code>在字符串<code>s</code>的正确位置序号应该是 1，但是必须向<code>codePointAt()</code>方法传入 2。解决这个问题的一个办法是使用<code>for...of</code>循环，因为它会正确识别 32 位的 UTF-16 字符。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;𠮷a&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> ch </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> s) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(ch.</span><span style="color:#B392F0;">codePointAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 20bb7</span></span>
<span class="line"><span style="color:#6A737D;">// 61</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;𠮷a&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> ch </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> s) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(ch.</span><span style="color:#6F42C1;">codePointAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 20bb7</span></span>
<span class="line"><span style="color:#6A737D;">// 61</span></span></code></pre></div><p>另一种方法也可以，使用扩展运算符（<code>...</code>）进行展开运算。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">...</span><span style="color:#9ECBFF;">&#39;𠮷a&#39;</span><span style="color:#E1E4E8;">]; </span><span style="color:#6A737D;">// arr.length === 2</span></span>
<span class="line"><span style="color:#E1E4E8;">arr.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">ch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(ch.</span><span style="color:#B392F0;">codePointAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 20bb7</span></span>
<span class="line"><span style="color:#6A737D;">// 61</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#032F62;">&#39;𠮷a&#39;</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// arr.length === 2</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">ch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(ch.</span><span style="color:#6F42C1;">codePointAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 20bb7</span></span>
<span class="line"><span style="color:#6A737D;">// 61</span></span></code></pre></div><p><code>codePointAt()</code>方法是测试一个字符由两个字节还是由四个字节组成的最简单方法。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">is32Bit</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> c.</span><span style="color:#B392F0;">codePointAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0xFFFF</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">is32Bit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;𠮷&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#B392F0;">is32Bit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">is32Bit</span><span style="color:#24292E;">(</span><span style="color:#E36209;">c</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> c.</span><span style="color:#6F42C1;">codePointAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xFFFF</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">is32Bit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;𠮷&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#6F42C1;">is32Bit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span></code></pre></div><h2 id="实例方法-normalize" tabindex="-1">实例方法：normalize() <a class="header-anchor" href="#实例方法-normalize" aria-label="Permalink to &quot;实例方法：normalize()&quot;">​</a></h2><p>许多欧洲语言有语调符号和重音符号。为了表示它们，Unicode 提供了两种方法。一种是直接提供带重音符号的字符，比如<code>Ǒ</code>（\\u01D1）。另一种是提供合成符号（combining character），即原字符与重音符号的合成，两个字符合成一个字符，比如<code>O</code>（\\u004F）和<code>ˇ</code>（\\u030C）合成<code>Ǒ</code>（\\u004F\\u030C）。</p><p>这两种表示方法，在视觉和语义上都等价，但是 JavaScript 不能识别。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\u01D1</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\u004F\\u030C</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\u01D1</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\u004F\\u030C</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\u01D1</span><span style="color:#032F62;">&#39;</span><span style="color:#D73A49;">===</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\u004F\\u030C</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\u01D1</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\u004F\\u030C</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 2</span></span></code></pre></div><p>上面代码表示，JavaScript 将合成字符视为两个字符，导致两种表示方法不相等。</p><p>ES6 提供字符串实例的<code>normalize()</code>方法，用来将字符的不同表示方法统一为同样的形式，这称为 Unicode 正规化。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\u01D1</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">normalize</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\u004F\\u030C</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">normalize</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\u01D1</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">normalize</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\u004F\\u030C</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">normalize</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre></div><p><code>normalize</code>方法可以接受一个参数来指定<code>normalize</code>的方式，参数的四个可选值如下。</p><ul><li><code>NFC</code>，默认参数，表示“标准等价合成”（Normalization Form Canonical Composition），返回多个简单字符的合成字符。所谓“标准等价”指的是视觉和语义上的等价。</li><li><code>NFD</code>，表示“标准等价分解”（Normalization Form Canonical Decomposition），即在标准等价的前提下，返回合成字符分解的多个简单字符。</li><li><code>NFKC</code>，表示“兼容等价合成”（Normalization Form Compatibility Composition），返回合成字符。所谓“兼容等价”指的是语义上存在等价，但视觉上不等价，比如“囍”和“喜喜”。（这只是用来举例，<code>normalize</code>方法不能识别中文。）</li><li><code>NFKD</code>，表示“兼容等价分解”（Normalization Form Compatibility Decomposition），即在兼容等价的前提下，返回合成字符分解的多个简单字符。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\u004F\\u030C</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">normalize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;NFC&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\u004F\\u030C</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">normalize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;NFD&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\u004F\\u030C</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">normalize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;NFC&#39;</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\u004F\\u030C</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">normalize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;NFD&#39;</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 2</span></span></code></pre></div><p>上面代码表示，<code>NFC</code>参数返回字符的合成形式，<code>NFD</code>参数返回字符的分解形式。</p><p>不过，<code>normalize</code>方法目前不能识别三个或三个以上字符的合成。这种情况下，还是只能使用正则表达式，通过 Unicode 编号区间判断。</p><h2 id="实例方法-includes-startswith-endswith" tabindex="-1">实例方法：includes(), startsWith(), endsWith() <a class="header-anchor" href="#实例方法-includes-startswith-endswith" aria-label="Permalink to &quot;实例方法：includes(), startsWith(), endsWith()&quot;">​</a></h2><p>传统上，JavaScript 只有<code>indexOf</code>方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。</p><ul><li><strong>includes()</strong>：返回布尔值，表示是否找到了参数字符串。</li><li><strong>startsWith()</strong>：返回布尔值，表示参数字符串是否在原字符串的头部。</li><li><strong>endsWith()</strong>：返回布尔值，表示参数字符串是否在原字符串的尾部。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Hello world!&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">endsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;!&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;o&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Hello world!&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;!&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;o&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>这三个方法都支持第二个参数，表示开始搜索的位置。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Hello world!&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;world&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">endsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Hello world!&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;world&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span></code></pre></div><p>上面代码表示，使用第二个参数<code>n</code>时，<code>endsWith</code>的行为与其他两个方法有所不同。它针对前<code>n</code>个字符，而其他两个方法针对从第<code>n</code>个位置直到字符串结束。</p><h2 id="实例方法-repeat" tabindex="-1">实例方法：repeat() <a class="header-anchor" href="#实例方法-repeat" aria-label="Permalink to &quot;实例方法：repeat()&quot;">​</a></h2><p><code>repeat</code>方法返回一个新字符串，表示将原字符串重复<code>n</code>次。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;x&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;xxx&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;hellohello&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;na&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;x&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;xxx&quot;</span></span>
<span class="line"><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;hellohello&quot;</span></span>
<span class="line"><span style="color:#032F62;">&#39;na&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;&quot;</span></span></code></pre></div><p>参数如果是小数，会被取整。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;na&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2.9</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;nana&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;na&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2.9</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;nana&quot;</span></span></code></pre></div><p>如果<code>repeat</code>的参数是负数或者<code>Infinity</code>，会报错。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;na&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// RangeError</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;na&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// RangeError</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;na&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// RangeError</span></span>
<span class="line"><span style="color:#032F62;">&#39;na&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// RangeError</span></span></code></pre></div><p>但是，如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于<code>-0</code>，<code>repeat</code>视同为 0。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;na&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0.9</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;na&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.9</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;&quot;</span></span></code></pre></div><p>参数<code>NaN</code>等同于 0。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;na&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;na&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;&quot;</span></span></code></pre></div><p>如果<code>repeat</code>的参数是字符串，则会先转换成数字。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;na&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;na&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;na&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;3&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;nanana&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;na&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;na&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">&#39;na&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;3&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;nanana&quot;</span></span></code></pre></div><h2 id="实例方法-padstart-padend" tabindex="-1">实例方法：padStart()，padEnd() <a class="header-anchor" href="#实例方法-padstart-padend" aria-label="Permalink to &quot;实例方法：padStart()，padEnd()&quot;">​</a></h2><p>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。<code>padStart()</code>用于头部补全，<code>padEnd()</code>用于尾部补全。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;x&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padStart</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;ab&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &#39;ababx&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;x&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padStart</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;ab&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &#39;abax&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&#39;x&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padEnd</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;ab&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &#39;xabab&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;x&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padEnd</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;ab&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &#39;xaba&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;x&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;ab&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &#39;ababx&#39;</span></span>
<span class="line"><span style="color:#032F62;">&#39;x&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;ab&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &#39;abax&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&#39;x&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padEnd</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;ab&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &#39;xabab&#39;</span></span>
<span class="line"><span style="color:#032F62;">&#39;x&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padEnd</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;ab&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &#39;xaba&#39;</span></span></code></pre></div><p>上面代码中，<code>padStart()</code>和<code>padEnd()</code>一共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。</p><p>如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;xxx&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padStart</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;ab&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &#39;xxx&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;xxx&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padEnd</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;ab&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &#39;xxx&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;xxx&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;ab&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &#39;xxx&#39;</span></span>
<span class="line"><span style="color:#032F62;">&#39;xxx&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padEnd</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;ab&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &#39;xxx&#39;</span></span></code></pre></div><p>如果用来补全的字符串与原字符串，两者的长度之和超过了最大长度，则会截去超出位数的补全字符串。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;abc&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padStart</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;0123456789&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;0123456abc&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;abc&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;0123456789&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;0123456abc&#39;</span></span></code></pre></div><p>如果省略第二个参数，默认使用空格补全长度。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;x&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padStart</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &#39;   x&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;x&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padEnd</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &#39;x   &#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;x&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &#39;   x&#39;</span></span>
<span class="line"><span style="color:#032F62;">&#39;x&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padEnd</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &#39;x   &#39;</span></span></code></pre></div><p><code>padStart()</code>的常见用途是为数值补全指定位数。下面代码生成 10 位的数值字符串。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padStart</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;0&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;0000000001&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;12&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padStart</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;0&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;0000000012&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;123456&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padStart</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;0&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;0000123456&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;0&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;0000000001&quot;</span></span>
<span class="line"><span style="color:#032F62;">&#39;12&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;0&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;0000000012&quot;</span></span>
<span class="line"><span style="color:#032F62;">&#39;123456&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;0&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;0000123456&quot;</span></span></code></pre></div><p>另一个用途是提示字符串格式。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;12&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padStart</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;YYYY-MM-DD&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;YYYY-MM-12&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;09-12&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">padStart</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;YYYY-MM-DD&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;YYYY-09-12&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;12&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;YYYY-MM-DD&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;YYYY-MM-12&quot;</span></span>
<span class="line"><span style="color:#032F62;">&#39;09-12&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;YYYY-MM-DD&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;YYYY-09-12&quot;</span></span></code></pre></div><h2 id="实例方法-trimstart-trimend" tabindex="-1">实例方法：trimStart()，trimEnd() <a class="header-anchor" href="#实例方法-trimstart-trimend" aria-label="Permalink to &quot;实例方法：trimStart()，trimEnd()&quot;">​</a></h2><p><a href="https://github.com/tc39/proposal-string-left-right-trim" target="_blank" rel="noreferrer">ES2019</a> 对字符串实例新增了<code>trimStart()</code>和<code>trimEnd()</code>这两个方法。它们的行为与<code>trim()</code>一致，<code>trimStart()</code>消除字符串头部的空格，<code>trimEnd()</code>消除尾部的空格。它们返回的都是新字符串，不会修改原始字符串。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;  abc  &#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &quot;abc&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">trimStart</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &quot;abc  &quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">s.</span><span style="color:#B392F0;">trimEnd</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &quot;  abc&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">s</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;  abc  &#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// &quot;abc&quot;</span></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">trimStart</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// &quot;abc  &quot;</span></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">trimEnd</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// &quot;  abc&quot;</span></span></code></pre></div><p>上面代码中，<code>trimStart()</code>只消除头部的空格，保留尾部的空格。<code>trimEnd()</code>也是类似行为。</p><p>除了空格键，这两个方法对字符串头部（或尾部）的 tab 键、换行符等不可见的空白符号也有效。</p><p>浏览器还部署了额外的两个方法，<code>trimLeft()</code>是<code>trimStart()</code>的别名，<code>trimRight()</code>是<code>trimEnd()</code>的别名。</p><h2 id="实例方法-matchall" tabindex="-1">实例方法：matchAll() <a class="header-anchor" href="#实例方法-matchall" aria-label="Permalink to &quot;实例方法：matchAll()&quot;">​</a></h2><p><code>matchAll()</code>方法返回一个正则表达式在当前字符串的所有匹配，详见《正则的扩展》的一章。</p><h2 id="实例方法-replaceall" tabindex="-1">实例方法：replaceAll() <a class="header-anchor" href="#实例方法-replaceall" aria-label="Permalink to &quot;实例方法：replaceAll()&quot;">​</a></h2><p>历史上，字符串的实例方法<code>replace()</code>只能替换第一个匹配。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;aabbcc&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;_&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;aa_bcc&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;aabbcc&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;_&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;aa_bcc&#39;</span></span></code></pre></div><p>上面例子中，<code>replace()</code>只将第一个<code>b</code>替换成了下划线。</p><p>如果要替换所有的匹配，不得不使用正则表达式的<code>g</code>修饰符。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;aabbcc&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">b</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;_&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;aa__cc&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;aabbcc&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/b/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;_&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;aa__cc&#39;</span></span></code></pre></div><p>正则表达式毕竟不是那么方便和直观，<a href="https://github.com/tc39/proposal-string-replaceall" target="_blank" rel="noreferrer">ES2021</a> 引入了<code>replaceAll()</code>方法，可以一次性替换所有匹配。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;aabbcc&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;_&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;aa__cc&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;aabbcc&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;_&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;aa__cc&#39;</span></span></code></pre></div><p>它的用法与<code>replace()</code>相同，返回一个新字符串，不会改变原字符串。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;">(searchValue, replacement)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">String</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(searchValue, replacement)</span></span></code></pre></div><p>上面代码中，<code>searchValue</code>是搜索模式，可以是一个字符串，也可以是一个全局的正则表达式（带有<code>g</code>修饰符）。</p><p>如果<code>searchValue</code>是一个不带有<code>g</code>修饰符的正则表达式，<code>replaceAll()</code>会报错。这一点跟<code>replace()</code>不同。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 不报错</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;aabbcc&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">b</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;_&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;aabbcc&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">b</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;_&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 不报错</span></span>
<span class="line"><span style="color:#032F62;">&#39;aabbcc&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/b/</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;_&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#032F62;">&#39;aabbcc&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/b/</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;_&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>上面例子中，<code>/b/</code>不带有<code>g</code>修饰符，会导致<code>replaceAll()</code>报错。</p><p><code>replaceAll()</code>的第二个参数<code>replacement</code>是一个字符串，表示替换的文本，其中可以使用一些特殊字符串。</p><ul><li><code>$&amp;</code>：匹配的字符串。</li><li><code>$\`</code>：匹配结果前面的文本。</li><li><code>$&#39;</code>：匹配结果后面的文本。</li><li><code>$n</code>：匹配成功的第<code>n</code>组内容，<code>n</code>是从1开始的自然数。这个参数生效的前提是，第一个参数必须是正则表达式。</li><li><code>$$</code>：指代美元符号<code>$</code>。</li></ul><p>下面是一些例子。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// $&amp; 表示匹配的字符串，即\`b\`本身</span></span>
<span class="line"><span style="color:#6A737D;">// 所以返回结果与原字符串一致</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;abbc&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;$&amp;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;abbc&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// $\` 表示匹配结果之前的字符串</span></span>
<span class="line"><span style="color:#6A737D;">// 对于第一个\`b\`，$\` 指代\`a\`</span></span>
<span class="line"><span style="color:#6A737D;">// 对于第二个\`b\`，$\` 指代\`ab\`</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;abbc&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;$\`&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;aaabc&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// $&#39; 表示匹配结果之后的字符串</span></span>
<span class="line"><span style="color:#6A737D;">// 对于第一个\`b\`，$&#39; 指代\`bc\`</span></span>
<span class="line"><span style="color:#6A737D;">// 对于第二个\`b\`，$&#39; 指代\`c\`</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;abbc&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">\`$&#39;\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;abccc&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// $1 表示正则表达式的第一个组匹配，指代\`ab\`</span></span>
<span class="line"><span style="color:#6A737D;">// $2 表示正则表达式的第二个组匹配，指代\`bc\`</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;abbc&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(ab)(bc)</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;$2$1&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;bcab&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// $$ 指代 $</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;abc&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;$$&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;a$c&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// $&amp; 表示匹配的字符串，即\`b\`本身</span></span>
<span class="line"><span style="color:#6A737D;">// 所以返回结果与原字符串一致</span></span>
<span class="line"><span style="color:#032F62;">&#39;abbc&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;$&amp;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;abbc&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// $\` 表示匹配结果之前的字符串</span></span>
<span class="line"><span style="color:#6A737D;">// 对于第一个\`b\`，$\` 指代\`a\`</span></span>
<span class="line"><span style="color:#6A737D;">// 对于第二个\`b\`，$\` 指代\`ab\`</span></span>
<span class="line"><span style="color:#032F62;">&#39;abbc&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;$\`&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;aaabc&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// $&#39; 表示匹配结果之后的字符串</span></span>
<span class="line"><span style="color:#6A737D;">// 对于第一个\`b\`，$&#39; 指代\`bc\`</span></span>
<span class="line"><span style="color:#6A737D;">// 对于第二个\`b\`，$&#39; 指代\`c\`</span></span>
<span class="line"><span style="color:#032F62;">&#39;abbc&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">\`$&#39;\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;abccc&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// $1 表示正则表达式的第一个组匹配，指代\`ab\`</span></span>
<span class="line"><span style="color:#6A737D;">// $2 表示正则表达式的第二个组匹配，指代\`bc\`</span></span>
<span class="line"><span style="color:#032F62;">&#39;abbc&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(ab)(bc)/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;$2$1&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;bcab&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// $$ 指代 $</span></span>
<span class="line"><span style="color:#032F62;">&#39;abc&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;$$&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;a$c&#39;</span></span></code></pre></div><p><code>replaceAll()</code>的第二个参数<code>replacement</code>除了为字符串，也可以是一个函数，该函数的返回值将替换掉第一个参数<code>searchValue</code>匹配的文本。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;aabbcc&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;_&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;aa__cc&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;aabbcc&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;_&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;aa__cc&#39;</span></span></code></pre></div><p>上面例子中，<code>replaceAll()</code>的第二个参数是一个函数，该函数的返回值会替换掉所有<code>b</code>的匹配。</p><p>这个替换函数可以接受多个参数。第一个参数是捕捉到的匹配内容，第二个参数捕捉到是组匹配（有多少个组匹配，就有多少个对应的参数）。此外，最后还可以添加两个参数，倒数第二个参数是捕捉到的内容在整个字符串中的位置，最后一个参数是原字符串。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;123abc456&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">regex</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)(</span><span style="color:#79B8FF;">[a-z]</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)(</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">replacer</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">match</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">p1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">p2</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">p3</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">offset</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">string</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [p1, p2, p3].</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39; - &#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">str.</span><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;">(regex, replacer)</span></span>
<span class="line"><span style="color:#6A737D;">// 123 - abc - 456</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;123abc456&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">regex</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /(</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)(</span><span style="color:#005CC5;">[a-z]</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)(</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">replacer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">match</span><span style="color:#24292E;">, </span><span style="color:#E36209;">p1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">p2</span><span style="color:#24292E;">, </span><span style="color:#E36209;">p3</span><span style="color:#24292E;">, </span><span style="color:#E36209;">offset</span><span style="color:#24292E;">, </span><span style="color:#E36209;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [p1, p2, p3].</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39; - &#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(regex, replacer)</span></span>
<span class="line"><span style="color:#6A737D;">// 123 - abc - 456</span></span></code></pre></div><p>上面例子中，正则表达式有三个组匹配，所以<code>replacer()</code>函数的第一个参数<code>match</code>是捕捉到的匹配内容（即字符串<code>123abc456</code>），后面三个参数<code>p1</code>、<code>p2</code>、<code>p3</code>则依次为三个组匹配。</p><h2 id="实例方法-at" tabindex="-1">实例方法：at() <a class="header-anchor" href="#实例方法-at" aria-label="Permalink to &quot;实例方法：at()&quot;">​</a></h2><p><code>at()</code>方法接受一个整数作为参数，返回参数指定位置的字符，支持负索引（即倒数的位置）。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">str.</span><span style="color:#B392F0;">at</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;e&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">str.</span><span style="color:#B392F0;">at</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;o&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">at</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;e&quot;</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">at</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;o&quot;</span></span></code></pre></div><p>如果参数位置超出了字符串范围，<code>at()</code>返回<code>undefined</code>。</p><p>该方法来自数组添加的<code>at()</code>方法，目前还是一个第三阶段的提案，可以参考《数组》一章的介绍。</p>`,120),e=[o];function c(t,r,y,E,i,d){return a(),n("div",null,e)}const u=s(l,[["render",c]]);export{C as __pageData,u as default};
