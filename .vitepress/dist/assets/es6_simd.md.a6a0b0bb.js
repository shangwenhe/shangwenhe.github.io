import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.b2e9bf53.js";const d=JSON.parse('{"title":"SIMD","description":"","frontmatter":{},"headers":[],"relativePath":"es6/simd.md","filePath":"es6/simd.md"}'),p={name:"es6/simd.md"},o=l(`<h1 id="simd" tabindex="-1">SIMD <a class="header-anchor" href="#simd" aria-label="Permalink to &quot;SIMD&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>SIMD（发音<code>/sim-dee/</code>）是“Single Instruction/Multiple Data”的缩写，意为“单指令，多数据”。它是 JavaScript 操作 CPU 对应指令的接口，你可以看做这是一种不同的运算执行模式。与它相对的是 SISD（“Single Instruction/Single Data”），即“单指令，单数据”。</p><p>SIMD 的含义是使用一个指令，完成多个数据的运算；SISD 的含义是使用一个指令，完成单个数据的运算，这是 JavaScript 的默认运算模式。显而易见，SIMD 的执行效率要高于 SISD，所以被广泛用于 3D 图形运算、物理模拟等运算量超大的项目之中。</p><p>为了理解 SIMD，请看下面的例子。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">c[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">c[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">c[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">c[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">c </span><span style="color:#6A737D;">// Array[6, 8, 10, 12]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">c[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">c[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">c[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">c[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">c </span><span style="color:#6A737D;">// Array[6, 8, 10, 12]</span></span></code></pre></div><p>上面代码中，数组<code>a</code>和<code>b</code>的对应成员相加，结果放入数组<code>c</code>。它的运算模式是依次处理每个数组成员，一共有四个数组成员，所以需要运算 4 次。</p><p>如果采用 SIMD 模式，只要运算一次就够了。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(a, b); </span><span style="color:#6A737D;">// Float32x4[6, 8, 10, 12]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(a, b); </span><span style="color:#6A737D;">// Float32x4[6, 8, 10, 12]</span></span></code></pre></div><p>上面代码之中，数组<code>a</code>和<code>b</code>的四个成员的各自相加，只用一条指令就完成了。因此，速度比上一种写法提高了 4 倍。</p><p>一次 SIMD 运算，可以处理多个数据，这些数据被称为“通道”（lane）。上面代码中，一次运算了四个数据，因此就是四个通道。</p><p>SIMD 通常用于矢量运算。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">v </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> w </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> 〈v1, …, vn〉</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> 〈w1, …, wn〉</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> 〈v1</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">w1, …, vn</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">wn〉</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">v </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> w </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> 〈v1, …, vn〉</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> 〈w1, …, wn〉</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> 〈v1</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">w1, …, vn</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">wn〉</span></span></code></pre></div><p>上面代码中，<code>v</code>和<code>w</code>是两个多元矢量。它们的加运算，在 SIMD 下是一个指令、而不是 n 个指令完成的，这就大大提高了效率。这对于 3D 动画、图像处理、信号处理、数值处理、加密等运算是非常重要的。比如，Canvas 的<code>getImageData()</code>会将图像文件读成一个二进制数组，SIMD 就很适合对于这种数组的处理。</p><p>总的来说，SIMD 是数据并行处理（parallelism）的一种手段，可以加速一些运算密集型操作的速度。将来与 WebAssembly 结合以后，可以让 JavaScript 达到二进制代码的运行速度。</p><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><p>SIMD 提供 12 种数据类型，总长度都是 128 个二进制位。</p><ul><li>Float32x4：四个 32 位浮点数</li><li>Float64x2：两个 64 位浮点数</li><li>Int32x4：四个 32 位整数</li><li>Int16x8：八个 16 位整数</li><li>Int8x16：十六个 8 位整数</li><li>Uint32x4：四个无符号的 32 位整数</li><li>Uint16x8：八个无符号的 16 位整数</li><li>Uint8x16：十六个无符号的 8 位整数</li><li>Bool32x4：四个 32 位布尔值</li><li>Bool16x8：八个 16 位布尔值</li><li>Bool8x16：十六个 8 位布尔值</li><li>Bool64x2：两个 64 位布尔值</li></ul><p>每种数据类型被<code>x</code>符号分隔成两部分，后面的部分表示通道数，前面的部分表示每个通道的宽度和类型。比如，<code>Float32x4</code>就表示这个值有 4 个通道，每个通道是一个 32 位浮点数。</p><p>每个通道之中，可以放置四种数据。</p><ul><li>浮点数（float，比如 1.0）</li><li>带符号的整数（Int，比如-1）</li><li>无符号的整数（Uint，比如 1）</li><li>布尔值（Bool，包含<code>true</code>和<code>false</code>两种值）</li></ul><p>每种 SIMD 的数据类型都是一个函数方法，可以传入参数，生成对应的值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4.0</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4.0</span><span style="color:#24292E;">);</span></span></code></pre></div><p>上面代码中，变量<code>a</code>就是一个 128 位、包含四个 32 位浮点数（即四个通道）的值。</p><p>注意，这些数据类型方法都不是构造函数，前面不能加<code>new</code>，否则会报错。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> v </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// TypeError: SIMD.Float32x4 is not a constructor</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> v </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// TypeError: SIMD.Float32x4 is not a constructor</span></span></code></pre></div><h2 id="静态方法-数学运算" tabindex="-1">静态方法：数学运算 <a class="header-anchor" href="#静态方法-数学运算" aria-label="Permalink to &quot;静态方法：数学运算&quot;">​</a></h2><p>每种数据类型都有一系列运算符，支持基本的数学运算。</p><h3 id="simd-type-abs-simd-type-neg" tabindex="-1">SIMD.%type%.abs()，SIMD.%type%.neg() <a class="header-anchor" href="#simd-type-abs-simd-type-neg" aria-label="Permalink to &quot;SIMD.%type%.abs()，SIMD.%type%.neg()&quot;">​</a></h3><p><code>abs</code>方法接受一个 SIMD 值作为参数，将它的每个通道都转成绝对值，作为一个新的 SIMD 值返回。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">abs</span><span style="color:#E1E4E8;">(a)</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1, 2, 0, NaN]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">abs</span><span style="color:#24292E;">(a)</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1, 2, 0, NaN]</span></span></code></pre></div><p><code>neg</code>方法接受一个 SIMD 值作为参数，将它的每个通道都转成负值，作为一个新的 SIMD 值返回。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">neg</span><span style="color:#E1E4E8;">(a)</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1, 2, -3, -0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float64x2</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float64x2.</span><span style="color:#B392F0;">neg</span><span style="color:#E1E4E8;">(b)</span></span>
<span class="line"><span style="color:#6A737D;">// Float64x2[NaN, -Infinity]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">neg</span><span style="color:#24292E;">(a)</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1, 2, -3, -0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float64x2</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float64x2.</span><span style="color:#6F42C1;">neg</span><span style="color:#24292E;">(b)</span></span>
<span class="line"><span style="color:#6A737D;">// Float64x2[NaN, -Infinity]</span></span></code></pre></div><h3 id="simd-type-add-simd-type-addsaturate" tabindex="-1">SIMD.%type%.add()，SIMD.%type%.addSaturate() <a class="header-anchor" href="#simd-type-add-simd-type-addsaturate" aria-label="Permalink to &quot;SIMD.%type%.add()，SIMD.%type%.addSaturate()&quot;">​</a></h3><p><code>add</code>方法接受两个 SIMD 值作为参数，将它们的每个通道相加，作为一个新的 SIMD 值返回。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4.0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">15.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">20.0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(a, b);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4.0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">15.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20.0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(a, b);</span></span></code></pre></div><p>上面代码中，经过加法运算，新的 SIMD 值为<code>(6.0, 12.0, 18.0. 24.0)</code>。</p><p><code>addSaturate</code>方法跟<code>add</code>方法的作用相同，都是两个通道相加，但是溢出的处理不一致。对于<code>add</code>方法，如果两个值相加发生溢出，溢出的二进制位会被丢弃; <code>addSaturate</code>方法则是返回该数据类型的最大值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Uint16x8</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">65533</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">65534</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">65535</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">65535</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Uint16x8</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5000</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Uint16x8.</span><span style="color:#B392F0;">addSaturate</span><span style="color:#E1E4E8;">(a, b);</span></span>
<span class="line"><span style="color:#6A737D;">// Uint16x8[65534, 65535, 65535, 65535, 2, 2, 2, 2]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Int16x8</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">32765</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">32766</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">32767</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">32767</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Int16x8</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5000</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int16x8.</span><span style="color:#B392F0;">addSaturate</span><span style="color:#E1E4E8;">(c, d);</span></span>
<span class="line"><span style="color:#6A737D;">// Int16x8[32766, 32767, 32767, 32767, 2, 2, 2, 2]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Uint16x8</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">65533</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">65534</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">65535</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">65535</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Uint16x8</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5000</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Uint16x8.</span><span style="color:#6F42C1;">addSaturate</span><span style="color:#24292E;">(a, b);</span></span>
<span class="line"><span style="color:#6A737D;">// Uint16x8[65534, 65535, 65535, 65535, 2, 2, 2, 2]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Int16x8</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">32765</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">32766</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">32767</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">32767</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Int16x8</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5000</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int16x8.</span><span style="color:#6F42C1;">addSaturate</span><span style="color:#24292E;">(c, d);</span></span>
<span class="line"><span style="color:#6A737D;">// Int16x8[32766, 32767, 32767, 32767, 2, 2, 2, 2]</span></span></code></pre></div><p>上面代码中，<code>Uint16</code>的最大值是 65535，<code>Int16</code>的最大值是 32767。一旦发生溢出，就返回这两个值。</p><p>注意，<code>Uint32x4</code>和<code>Int32x4</code>这两种数据类型没有<code>addSaturate</code>方法。</p><h3 id="simd-type-sub-simd-type-subsaturate" tabindex="-1">SIMD.%type%.sub()，SIMD.%type%.subSaturate() <a class="header-anchor" href="#simd-type-sub-simd-type-subsaturate" aria-label="Permalink to &quot;SIMD.%type%.sub()，SIMD.%type%.subSaturate()&quot;">​</a></h3><p><code>sub</code>方法接受两个 SIMD 值作为参数，将它们的每个通道相减，作为一个新的 SIMD 值返回。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">sub</span><span style="color:#E1E4E8;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[-4, -5, 0, 1]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">sub</span><span style="color:#24292E;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[-4, -5, 0, 1]</span></span></code></pre></div><p><code>subSaturate</code>方法跟<code>sub</code>方法的作用相同，都是两个通道相减，但是溢出的处理不一致。对于<code>sub</code>方法，如果两个值相减发生溢出，溢出的二进制位会被丢弃; <code>subSaturate</code>方法则是返回该数据类型的最小值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Uint16x8</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Uint16x8</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Uint16x8.</span><span style="color:#B392F0;">subSaturate</span><span style="color:#E1E4E8;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Uint16x8[0, 0, 0, 0, 0, 0, 0, 0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Int16x8</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Int16x8</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">32767</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int16x8.</span><span style="color:#B392F0;">subSaturate</span><span style="color:#E1E4E8;">(c, d)</span></span>
<span class="line"><span style="color:#6A737D;">// Int16x8[-32768, 0, 0, 0, 0, 0, 0, 0, 0]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Uint16x8</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Uint16x8</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Uint16x8.</span><span style="color:#6F42C1;">subSaturate</span><span style="color:#24292E;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Uint16x8[0, 0, 0, 0, 0, 0, 0, 0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Int16x8</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Int16x8</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">32767</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int16x8.</span><span style="color:#6F42C1;">subSaturate</span><span style="color:#24292E;">(c, d)</span></span>
<span class="line"><span style="color:#6A737D;">// Int16x8[-32768, 0, 0, 0, 0, 0, 0, 0, 0]</span></span></code></pre></div><p>上面代码中，<code>Uint16</code>的最小值是<code>0</code>，<code>Int16</code>的最小值是<code>-32678</code>。一旦运算发生溢出，就返回最小值。</p><h3 id="simd-type-mul-simd-type-div-simd-type-sqrt" tabindex="-1">SIMD.%type%.mul()，SIMD.%type%.div()，SIMD.%type%.sqrt() <a class="header-anchor" href="#simd-type-mul-simd-type-div-simd-type-sqrt" aria-label="Permalink to &quot;SIMD.%type%.mul()，SIMD.%type%.div()，SIMD.%type%.sqrt()&quot;">​</a></h3><p><code>mul</code>方法接受两个 SIMD 值作为参数，将它们的每个通道相乘，作为一个新的 SIMD 值返回。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">mul</span><span style="color:#E1E4E8;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[-3, -6, 9, 12]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">mul</span><span style="color:#24292E;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[-3, -6, 9, 12]</span></span></code></pre></div><p><code>div</code>方法接受两个 SIMD 值作为参数，将它们的每个通道相除，作为一个新的 SIMD 值返回。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">div</span><span style="color:#E1E4E8;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[0.5, 0.5, 0.5, 0.5]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">div</span><span style="color:#24292E;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[0.5, 0.5, 0.5, 0.5]</span></span></code></pre></div><p><code>sqrt</code>方法接受一个 SIMD 值作为参数，求出每个通道的平方根，作为一个新的 SIMD 值返回。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float64x2</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float64x2.</span><span style="color:#B392F0;">sqrt</span><span style="color:#E1E4E8;">(b)</span></span>
<span class="line"><span style="color:#6A737D;">// Float64x2[2, 2.8284271247461903]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float64x2</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float64x2.</span><span style="color:#6F42C1;">sqrt</span><span style="color:#24292E;">(b)</span></span>
<span class="line"><span style="color:#6A737D;">// Float64x2[2, 2.8284271247461903]</span></span></code></pre></div><h3 id="simd-floattype-reciprocalapproximation-simd-type-reciprocalsqrtapproximation" tabindex="-1">SIMD.%FloatType%.reciprocalApproximation()，SIMD.%type%.reciprocalSqrtApproximation() <a class="header-anchor" href="#simd-floattype-reciprocalapproximation-simd-type-reciprocalsqrtapproximation" aria-label="Permalink to &quot;SIMD.%FloatType%.reciprocalApproximation()，SIMD.%type%.reciprocalSqrtApproximation()&quot;">​</a></h3><p><code>reciprocalApproximation</code>方法接受一个 SIMD 值作为参数，求出每个通道的倒数（<code>1 / x</code>），作为一个新的 SIMD 值返回。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">reciprocalApproximation</span><span style="color:#E1E4E8;">(a);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1, 0.5, 0.3333333432674408, 0.25]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">reciprocalApproximation</span><span style="color:#24292E;">(a);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1, 0.5, 0.3333333432674408, 0.25]</span></span></code></pre></div><p><code>reciprocalSqrtApproximation</code>方法接受一个 SIMD 值作为参数，求出每个通道的平方根的倒数（<code>1 / (x^0.5)</code>），作为一个新的 SIMD 值返回。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">reciprocalSqrtApproximation</span><span style="color:#E1E4E8;">(a)</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1, 0.7071067690849304, 0.5773502588272095, 0.5]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">reciprocalSqrtApproximation</span><span style="color:#24292E;">(a)</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1, 0.7071067690849304, 0.5773502588272095, 0.5]</span></span></code></pre></div><p>注意，只有浮点数的数据类型才有这两个方法。</p><h3 id="simd-integertype-shiftleftbyscalar" tabindex="-1">SIMD.%IntegerType%.shiftLeftByScalar() <a class="header-anchor" href="#simd-integertype-shiftleftbyscalar" aria-label="Permalink to &quot;SIMD.%IntegerType%.shiftLeftByScalar()&quot;">​</a></h3><p><code>shiftLeftByScalar</code>方法接受一个 SIMD 值作为参数，然后将每个通道的值左移指定的位数，作为一个新的 SIMD 值返回。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Int32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">shiftLeftByScalar</span><span style="color:#E1E4E8;">(a, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[2, 4, 8, 16]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Int32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">shiftLeftByScalar</span><span style="color:#24292E;">(a, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[2, 4, 8, 16]</span></span></code></pre></div><p>如果左移后，新的值超出了当前数据类型的位数，溢出的部分会被丢弃。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ix4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Int32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> jx4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">shiftLeftByScalar</span><span style="color:#E1E4E8;">(ix4, </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[0, 0, 0, 0]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> ix4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Int32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> jx4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">shiftLeftByScalar</span><span style="color:#24292E;">(ix4, </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[0, 0, 0, 0]</span></span></code></pre></div><p>注意，只有整数的数据类型才有这个方法。</p><h3 id="simd-integertype-shiftrightbyscalar" tabindex="-1">SIMD.%IntegerType%.shiftRightByScalar() <a class="header-anchor" href="#simd-integertype-shiftrightbyscalar" aria-label="Permalink to &quot;SIMD.%IntegerType%.shiftRightByScalar()&quot;">​</a></h3><p><code>shiftRightByScalar</code>方法接受一个 SIMD 值作为参数，然后将每个通道的值右移指定的位数，返回一个新的 SIMD 值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Int32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">shiftRightByScalar</span><span style="color:#E1E4E8;">(a, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[0, 1, 2, -4]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Int32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">shiftRightByScalar</span><span style="color:#24292E;">(a, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[0, 1, 2, -4]</span></span></code></pre></div><p>如果原来通道的值是带符号的值，则符号位保持不变，不受右移影响。如果是不带符号位的值，则右移后头部会补<code>0</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Uint32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Uint32x4.</span><span style="color:#B392F0;">shiftRightByScalar</span><span style="color:#E1E4E8;">(a, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Uint32x4[0, 1, 2, 2147483644]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Uint32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Uint32x4.</span><span style="color:#6F42C1;">shiftRightByScalar</span><span style="color:#24292E;">(a, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Uint32x4[0, 1, 2, 2147483644]</span></span></code></pre></div><p>上面代码中，<code>-8</code>右移一位变成了<code>2147483644</code>，是因为对于 32 位无符号整数来说，<code>-8</code>的二进制形式是<code>11111111111111111111111111111000</code>，右移一位就变成了<code>01111111111111111111111111111100</code>，相当于<code>2147483644</code>。</p><p>注意，只有整数的数据类型才有这个方法。</p><h2 id="静态方法-通道处理" tabindex="-1">静态方法：通道处理 <a class="header-anchor" href="#静态方法-通道处理" aria-label="Permalink to &quot;静态方法：通道处理&quot;">​</a></h2><h3 id="simd-type-check" tabindex="-1">SIMD.%type%.check() <a class="header-anchor" href="#simd-type-check" aria-label="Permalink to &quot;SIMD.%type%.check()&quot;">​</a></h3><p><code>check</code>方法用于检查一个值是否为当前类型的 SIMD 值。如果是的，就返回这个值，否则就报错。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(a);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1, 2, 3, 9]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]) </span><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(a) </span><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hello world&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 报错</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(a);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1, 2, 3, 9]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]) </span><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(a) </span><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello world&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 报错</span></span></code></pre></div><h3 id="simd-type-extractlane-simd-type-replacelane" tabindex="-1">SIMD.%type%.extractLane()，SIMD.%type%.replaceLane() <a class="header-anchor" href="#simd-type-extractlane-simd-type-replacelane" aria-label="Permalink to &quot;SIMD.%type%.extractLane()，SIMD.%type%.replaceLane()&quot;">​</a></h3><p><code>extractLane</code>方法用于返回给定通道的值。它接受两个参数，分别是 SIMD 值和通道编号。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">extractLane</span><span style="color:#E1E4E8;">(t, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">extractLane</span><span style="color:#24292E;">(t, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 3</span></span></code></pre></div><p><code>replaceLane</code>方法用于替换指定通道的值，并返回一个新的 SIMD 值。它接受三个参数，分别是原来的 SIMD 值、通道编号和新的通道值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">replaceLane</span><span style="color:#E1E4E8;">(t, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1, 2, 42, 4]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">replaceLane</span><span style="color:#24292E;">(t, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1, 2, 42, 4]</span></span></code></pre></div><h3 id="simd-type-load" tabindex="-1">SIMD.%type%.load() <a class="header-anchor" href="#simd-type-load" aria-label="Permalink to &quot;SIMD.%type%.load()&quot;">​</a></h3><p><code>load</code>方法用于从二进制数组读入数据，生成一个新的 SIMD 值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Int32Array</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(a, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[1, 2, 3, 4]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Int32Array</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(a, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[3, 4, 5, 6]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Int32Array</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(a, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[1, 2, 3, 4]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Int32Array</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(a, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[3, 4, 5, 6]</span></span></code></pre></div><p><code>load</code>方法接受两个参数：一个二进制数组和开始读取的位置（从 0 开始）。如果位置不合法（比如<code>-1</code>或者超出二进制数组的大小），就会抛出一个错误。</p><p>这个方法还有三个变种<code>load1()</code>、<code>load2()</code>、<code>load3()</code>，表示从指定位置开始，只加载一个通道、二个通道、三个通道的值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 格式</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(tarray, index)</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">load1</span><span style="color:#E1E4E8;">(tarray, index)</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">load2</span><span style="color:#E1E4E8;">(tarray, index)</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">load3</span><span style="color:#E1E4E8;">(tarray, index)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 实例</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Int32Array</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">load1</span><span style="color:#E1E4E8;">(a, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[1, 0, 0, 0]</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">load2</span><span style="color:#E1E4E8;">(a, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[1, 2, 0, 0]</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">load3</span><span style="color:#E1E4E8;">(a, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[1, 2, 3,0]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 格式</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(tarray, index)</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">load1</span><span style="color:#24292E;">(tarray, index)</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">load2</span><span style="color:#24292E;">(tarray, index)</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">load3</span><span style="color:#24292E;">(tarray, index)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 实例</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Int32Array</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">load1</span><span style="color:#24292E;">(a, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[1, 0, 0, 0]</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">load2</span><span style="color:#24292E;">(a, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[1, 2, 0, 0]</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">load3</span><span style="color:#24292E;">(a, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[1, 2, 3,0]</span></span></code></pre></div><h3 id="simd-type-store" tabindex="-1">SIMD.%type%.store() <a class="header-anchor" href="#simd-type-store" aria-label="Permalink to &quot;SIMD.%type%.store()&quot;">​</a></h3><p><code>store</code>方法用于将一个 SIMD 值，写入一个二进制数组。它接受三个参数，分别是二进制数组、开始写入的数组位置、SIMD 值。它返回写入值以后的二进制数组。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> t1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Int32Array</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> v1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Int32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">store</span><span style="color:#E1E4E8;">(t1, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, v1)</span></span>
<span class="line"><span style="color:#6A737D;">// Int32Array[1, 2, 3, 4, 0, 0, 0, 0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> t2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Int32Array</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> v2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Int32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">store</span><span style="color:#E1E4E8;">(t2, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, v2)</span></span>
<span class="line"><span style="color:#6A737D;">// Int32Array[0, 0, 1, 2, 3, 4, 0, 0]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> t1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Int32Array</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> v1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Int32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">store</span><span style="color:#24292E;">(t1, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, v1)</span></span>
<span class="line"><span style="color:#6A737D;">// Int32Array[1, 2, 3, 4, 0, 0, 0, 0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> t2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Int32Array</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> v2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Int32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">store</span><span style="color:#24292E;">(t2, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, v2)</span></span>
<span class="line"><span style="color:#6A737D;">// Int32Array[0, 0, 1, 2, 3, 4, 0, 0]</span></span></code></pre></div><p>上面代码中，<code>t1</code>是一个二进制数组，<code>v1</code>是一个 SIMD 值，只有四个通道。所以写入<code>t1</code>以后，只有前四个位置有值，后四个位置都是 0。而<code>t2</code>是从 2 号位置开始写入，所以前两个位置和后两个位置都是 0。</p><p>这个方法还有三个变种<code>store1()</code>、<code>store2()</code>和<code>store3()</code>，表示只写入一个通道、二个通道和三个通道的值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> tarray </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Int32Array</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Int32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">store1</span><span style="color:#E1E4E8;">(tarray, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, value);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32Array[1, 0, 0, 0, 0, 0, 0, 0]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> tarray </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Int32Array</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Int32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">store1</span><span style="color:#24292E;">(tarray, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, value);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32Array[1, 0, 0, 0, 0, 0, 0, 0]</span></span></code></pre></div><h3 id="simd-type-splat" tabindex="-1">SIMD.%type%.splat() <a class="header-anchor" href="#simd-type-splat" aria-label="Permalink to &quot;SIMD.%type%.splat()&quot;">​</a></h3><p><code>splat</code>方法返回一个新的 SIMD 值，该值的所有通道都会设成同一个预先给定的值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">splat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[3, 3, 3, 3]</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float64x2.</span><span style="color:#B392F0;">splat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Float64x2[3, 3]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">splat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[3, 3, 3, 3]</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float64x2.</span><span style="color:#6F42C1;">splat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Float64x2[3, 3]</span></span></code></pre></div><p>如果省略参数，所有整数型的 SIMD 值都会设定<code>0</code>，浮点型的 SIMD 值都会设成<code>NaN</code>。</p><h3 id="simd-type-swizzle" tabindex="-1">SIMD.%type%.swizzle() <a class="header-anchor" href="#simd-type-swizzle" aria-label="Permalink to &quot;SIMD.%type%.swizzle()&quot;">​</a></h3><p><code>swizzle</code>方法返回一个新的 SIMD 值，重新排列原有的 SIMD 值的通道顺序。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">swizzle</span><span style="color:#E1E4E8;">(t, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[2,3,1,4]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">swizzle</span><span style="color:#24292E;">(t, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[2,3,1,4]</span></span></code></pre></div><p>上面代码中，<code>swizzle</code>方法的第一个参数是原有的 SIMD 值，后面的参数对应将要返回的 SIMD 值的四个通道。它的意思是新的 SIMD 的四个通道，依次是原来 SIMD 值的 1 号通道、2 号通道、0 号通道、3 号通道。由于 SIMD 值最多可以有 16 个通道，所以<code>swizzle</code>方法除了第一个参数以外，最多还可以接受 16 个参数。</p><p>下面是另一个例子。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4.0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1.0, 2.0, 3.0, 4.0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">swizzle</span><span style="color:#E1E4E8;">(a, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1.0, 1.0, 2.0, 2.0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">swizzle</span><span style="color:#E1E4E8;">(a, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[4.0, 4.0, 4.0, 4.0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">swizzle</span><span style="color:#E1E4E8;">(a, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[4.0, 3.0, 2.0, 1.0]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4.0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1.0, 2.0, 3.0, 4.0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">swizzle</span><span style="color:#24292E;">(a, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1.0, 1.0, 2.0, 2.0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">swizzle</span><span style="color:#24292E;">(a, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[4.0, 4.0, 4.0, 4.0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">swizzle</span><span style="color:#24292E;">(a, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[4.0, 3.0, 2.0, 1.0]</span></span></code></pre></div><h3 id="simd-type-shuffle" tabindex="-1">SIMD.%type%.shuffle() <a class="header-anchor" href="#simd-type-shuffle" aria-label="Permalink to &quot;SIMD.%type%.shuffle()&quot;">​</a></h3><p><code>shuffle</code>方法从两个 SIMD 值之中取出指定通道，返回一个新的 SIMD 值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">shuffle</span><span style="color:#E1E4E8;">(a, b, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[2, 6, 8, 3]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">shuffle</span><span style="color:#24292E;">(a, b, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[2, 6, 8, 3]</span></span></code></pre></div><p>上面代码中，<code>a</code>和<code>b</code>一共有 8 个通道，依次编号为 0 到 7。<code>shuffle</code>根据编号，取出相应的通道，返回一个新的 SIMD 值。</p><h2 id="静态方法-比较运算" tabindex="-1">静态方法：比较运算 <a class="header-anchor" href="#静态方法-比较运算" aria-label="Permalink to &quot;静态方法：比较运算&quot;">​</a></h2><h3 id="simd-type-equal-simd-type-notequal" tabindex="-1">SIMD.%type%.equal()，SIMD.%type%.notEqual() <a class="header-anchor" href="#simd-type-equal-simd-type-notequal" aria-label="Permalink to &quot;SIMD.%type%.equal()，SIMD.%type%.notEqual()&quot;">​</a></h3><p><code>equal</code>方法用来比较两个 SIMD 值<code>a</code>和<code>b</code>的每一个通道，根据两者是否精确相等（<code>a === b</code>），得到一个布尔值。最后，所有通道的比较结果，组成一个新的 SIMD 值，作为掩码返回。<code>notEqual</code>方法则是比较两个通道是否不相等（<code>a !== b</code>）。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">equal</span><span style="color:#E1E4E8;">(a,b)</span></span>
<span class="line"><span style="color:#6A737D;">// Bool32x4[true, false, false, true]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">notEqual</span><span style="color:#E1E4E8;">(a,b);</span></span>
<span class="line"><span style="color:#6A737D;">// Bool32x4[false, true, true, false]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">equal</span><span style="color:#24292E;">(a,b)</span></span>
<span class="line"><span style="color:#6A737D;">// Bool32x4[true, false, false, true]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">notEqual</span><span style="color:#24292E;">(a,b);</span></span>
<span class="line"><span style="color:#6A737D;">// Bool32x4[false, true, true, false]</span></span></code></pre></div><h3 id="simd-type-greaterthan-simd-type-greaterthanorequal" tabindex="-1">SIMD.%type%.greaterThan()，SIMD.%type%.greaterThanOrEqual() <a class="header-anchor" href="#simd-type-greaterthan-simd-type-greaterthanorequal" aria-label="Permalink to &quot;SIMD.%type%.greaterThan()，SIMD.%type%.greaterThanOrEqual()&quot;">​</a></h3><p><code>greatThan</code>方法用来比较两个 SIMD 值<code>a</code>和<code>b</code>的每一个通道，如果在该通道中，<code>a</code>较大就得到<code>true</code>，否则得到<code>false</code>。最后，所有通道的比较结果，组成一个新的 SIMD 值，作为掩码返回。<code>greaterThanOrEqual</code>则是比较<code>a</code>是否大于等于<code>b</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">greaterThan</span><span style="color:#E1E4E8;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Bool32x4[false, true, false, true]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">greaterThanOrEqual</span><span style="color:#E1E4E8;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Bool32x4[true, true, false, true]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">greaterThan</span><span style="color:#24292E;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Bool32x4[false, true, false, true]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">greaterThanOrEqual</span><span style="color:#24292E;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Bool32x4[true, true, false, true]</span></span></code></pre></div><h3 id="simd-type-lessthan-simd-type-lessthanorequal" tabindex="-1">SIMD.%type%.lessThan()，SIMD.%type%.lessThanOrEqual() <a class="header-anchor" href="#simd-type-lessthan-simd-type-lessthanorequal" aria-label="Permalink to &quot;SIMD.%type%.lessThan()，SIMD.%type%.lessThanOrEqual()&quot;">​</a></h3><p><code>lessThan</code>方法用来比较两个 SIMD 值<code>a</code>和<code>b</code>的每一个通道，如果在该通道中，<code>a</code>较小就得到<code>true</code>，否则得到<code>false</code>。最后，所有通道的比较结果，会组成一个新的 SIMD 值，作为掩码返回。<code>lessThanOrEqual</code>方法则是比较<code>a</code>是否等于<code>b</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">lessThan</span><span style="color:#E1E4E8;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Bool32x4[false, true, true, false]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">lessThanOrEqual</span><span style="color:#E1E4E8;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Bool32x4[true, true, true, false]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">lessThan</span><span style="color:#24292E;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Bool32x4[false, true, true, false]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">lessThanOrEqual</span><span style="color:#24292E;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Bool32x4[true, true, true, false]</span></span></code></pre></div><h3 id="simd-type-select" tabindex="-1">SIMD.%type%.select() <a class="header-anchor" href="#simd-type-select" aria-label="Permalink to &quot;SIMD.%type%.select()&quot;">​</a></h3><p><code>select</code>方法通过掩码生成一个新的 SIMD 值。它接受三个参数，分别是掩码和两个 SIMD 值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> mask </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Bool32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">select</span><span style="color:#E1E4E8;">(mask, a, b);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1, 6, 7, 4]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> mask </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Bool32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">(mask, a, b);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1, 6, 7, 4]</span></span></code></pre></div><p>上面代码中，<code>select</code>方法接受掩码和两个 SIMD 值作为参数。当某个通道对应的掩码为<code>true</code>时，会选择第一个 SIMD 值的对应通道，否则选择第二个 SIMD 值的对应通道。</p><p>这个方法通常与比较运算符结合使用。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> mask </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">lessThan</span><span style="color:#E1E4E8;">(a,b);</span></span>
<span class="line"><span style="color:#6A737D;">// Bool32x4[false, false, true, true]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">select</span><span style="color:#E1E4E8;">(mask, a, b);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[0, 6, 3, 4]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> mask </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">lessThan</span><span style="color:#24292E;">(a,b);</span></span>
<span class="line"><span style="color:#6A737D;">// Bool32x4[false, false, true, true]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">(mask, a, b);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[0, 6, 3, 4]</span></span></code></pre></div><p>上面代码中，先通过<code>lessThan</code>方法生成一个掩码，然后通过<code>select</code>方法生成一个由每个通道的较小值组成的新的 SIMD 值。</p><h3 id="simd-booleantype-alltrue-simd-booleantype-anytrue" tabindex="-1">SIMD.%BooleanType%.allTrue()，SIMD.%BooleanType%.anyTrue() <a class="header-anchor" href="#simd-booleantype-alltrue-simd-booleantype-anytrue" aria-label="Permalink to &quot;SIMD.%BooleanType%.allTrue()，SIMD.%BooleanType%.anyTrue()&quot;">​</a></h3><p><code>allTrue</code>方法接受一个 SIMD 值作为参数，然后返回一个布尔值，表示该 SIMD 值的所有通道是否都为<code>true</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Bool32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Bool32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Bool32x4.</span><span style="color:#B392F0;">allTrue</span><span style="color:#E1E4E8;">(a); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Bool32x4.</span><span style="color:#B392F0;">allTrue</span><span style="color:#E1E4E8;">(b); </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Bool32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Bool32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Bool32x4.</span><span style="color:#6F42C1;">allTrue</span><span style="color:#24292E;">(a); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Bool32x4.</span><span style="color:#6F42C1;">allTrue</span><span style="color:#24292E;">(b); </span><span style="color:#6A737D;">// false</span></span></code></pre></div><p><code>anyTrue</code>方法则是只要有一个通道为<code>true</code>，就返回<code>true</code>，否则返回<code>false</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Bool32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Bool32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Bool32x4.</span><span style="color:#B392F0;">anyTrue</span><span style="color:#E1E4E8;">(a); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Bool32x4.</span><span style="color:#B392F0;">anyTrue</span><span style="color:#E1E4E8;">(b); </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Bool32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Bool32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Bool32x4.</span><span style="color:#6F42C1;">anyTrue</span><span style="color:#24292E;">(a); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Bool32x4.</span><span style="color:#6F42C1;">anyTrue</span><span style="color:#24292E;">(b); </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>注意，只有四种布尔值数据类型（<code>Bool32x4</code>、<code>Bool16x8</code>、<code>Bool8x16</code>、<code>Bool64x2</code>）才有这两个方法。</p><p>这两个方法通常与比较运算符结合使用。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ax4    </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4.0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> bx4    </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8.0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ix4    </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">lessThan</span><span style="color:#E1E4E8;">(ax4, bx4);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b1     </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">allTrue</span><span style="color:#E1E4E8;">(ix4); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b2     </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">anyTrue</span><span style="color:#E1E4E8;">(ix4); </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> ax4    </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4.0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> bx4    </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8.0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> ix4    </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">lessThan</span><span style="color:#24292E;">(ax4, bx4);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b1     </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">allTrue</span><span style="color:#24292E;">(ix4); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b2     </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">anyTrue</span><span style="color:#24292E;">(ix4); </span><span style="color:#6A737D;">// true</span></span></code></pre></div><h3 id="simd-type-min-simd-type-minnum" tabindex="-1">SIMD.%type%.min()，SIMD.%type%.minNum() <a class="header-anchor" href="#simd-type-min-simd-type-minnum" aria-label="Permalink to &quot;SIMD.%type%.min()，SIMD.%type%.minNum()&quot;">​</a></h3><p><code>min</code>方法接受两个 SIMD 值作为参数，将两者的对应通道的较小值，组成一个新的 SIMD 值返回。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5.2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5.5</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(a, b);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[-1, -4, 3, 5.2]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5.2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5.5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(a, b);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[-1, -4, 3, 5.2]</span></span></code></pre></div><p>如果有一个通道的值是<code>NaN</code>，则会优先返回<code>NaN</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float64x2</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float64x2</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1337</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float64x2.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(c, d);</span></span>
<span class="line"><span style="color:#6A737D;">// Float64x2[NaN, 42]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float64x2</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float64x2</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1337</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float64x2.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(c, d);</span></span>
<span class="line"><span style="color:#6A737D;">// Float64x2[NaN, 42]</span></span></code></pre></div><p><code>minNum</code>方法与<code>min</code>的作用一模一样，唯一的区别是如果有一个通道的值是<code>NaN</code>，则会优先返回另一个通道的值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ax4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> bx4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> cx4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(ax4, bx4);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1.0, 1.0, NaN, NaN]</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> dx4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">minNum</span><span style="color:#E1E4E8;">(ax4, bx4);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1.0, 1.0, 3.0, NaN]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> ax4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> bx4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> cx4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(ax4, bx4);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1.0, 1.0, NaN, NaN]</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> dx4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">minNum</span><span style="color:#24292E;">(ax4, bx4);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[1.0, 1.0, 3.0, NaN]</span></span></code></pre></div><h3 id="simd-type-max-simd-type-maxnum" tabindex="-1">SIMD.%type%.max()，SIMD.%type%.maxNum() <a class="header-anchor" href="#simd-type-max-simd-type-maxnum" aria-label="Permalink to &quot;SIMD.%type%.max()，SIMD.%type%.maxNum()&quot;">​</a></h3><p><code>max</code>方法接受两个 SIMD 值作为参数，将两者的对应通道的较大值，组成一个新的 SIMD 值返回。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5.2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5.5</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(a, b);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[0, -2, 6, 5.5]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5.2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5.5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(a, b);</span></span>
<span class="line"><span style="color:#6A737D;">// Float32x4[0, -2, 6, 5.5]</span></span></code></pre></div><p>如果有一个通道的值是<code>NaN</code>，则会优先返回<code>NaN</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float64x2</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float64x2</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1337</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float64x2.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(c, d)</span></span>
<span class="line"><span style="color:#6A737D;">// Float64x2[NaN, Infinity]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float64x2</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float64x2</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1337</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float64x2.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(c, d)</span></span>
<span class="line"><span style="color:#6A737D;">// Float64x2[NaN, Infinity]</span></span></code></pre></div><p><code>maxNum</code>方法与<code>max</code>的作用一模一样，唯一的区别是如果有一个通道的值是<code>NaN</code>，则会优先返回另一个通道的值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float64x2</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float64x2</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1337</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float64x2.</span><span style="color:#B392F0;">maxNum</span><span style="color:#E1E4E8;">(c, d)</span></span>
<span class="line"><span style="color:#6A737D;">// Float64x2[1337, Infinity]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float64x2</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float64x2</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1337</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float64x2.</span><span style="color:#6F42C1;">maxNum</span><span style="color:#24292E;">(c, d)</span></span>
<span class="line"><span style="color:#6A737D;">// Float64x2[1337, Infinity]</span></span></code></pre></div><h2 id="静态方法-位运算" tabindex="-1">静态方法：位运算 <a class="header-anchor" href="#静态方法-位运算" aria-label="Permalink to &quot;静态方法：位运算&quot;">​</a></h2><h3 id="simd-type-and-simd-type-or-simd-type-xor-simd-type-not" tabindex="-1">SIMD.%type%.and()，SIMD.%type%.or()，SIMD.%type%.xor()，SIMD.%type%.not() <a class="header-anchor" href="#simd-type-and-simd-type-or-simd-type-xor-simd-type-not" aria-label="Permalink to &quot;SIMD.%type%.and()，SIMD.%type%.or()，SIMD.%type%.xor()，SIMD.%type%.not()&quot;">​</a></h3><p><code>and</code>方法接受两个 SIMD 值作为参数，返回两者对应的通道进行二进制<code>AND</code>运算（<code>&amp;</code>）后得到的新的 SIMD 值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Int32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Int32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[1, 0, 4, 0]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Int32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Int32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[1, 0, 4, 0]</span></span></code></pre></div><p>上面代码中，以通道<code>0</code>为例，<code>1</code>的二进制形式是<code>0001</code>，<code>5</code>的二进制形式是<code>01001</code>，所以进行<code>AND</code>运算以后，得到<code>0001</code>。</p><p><code>or</code>方法接受两个 SIMD 值作为参数，返回两者对应的通道进行二进制<code>OR</code>运算（<code>|</code>）后得到的新的 SIMD 值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Int32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Int32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">or</span><span style="color:#E1E4E8;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[5, 7, 5, 13]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Int32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Int32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">or</span><span style="color:#24292E;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[5, 7, 5, 13]</span></span></code></pre></div><p><code>xor</code>方法接受两个 SIMD 值作为参数，返回两者对应的通道进行二进制“异或”运算（<code>^</code>）后得到的新的 SIMD 值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Int32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Int32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">xor</span><span style="color:#E1E4E8;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[4, 7, 1, 13]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Int32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Int32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">xor</span><span style="color:#24292E;">(a, b)</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[4, 7, 1, 13]</span></span></code></pre></div><p><code>not</code>方法接受一个 SIMD 值作为参数，返回每个通道进行二进制“否”运算（<code>~</code>）后得到的新的 SIMD 值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Int32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">not</span><span style="color:#E1E4E8;">(a)</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[-2, -3, -5, -9]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Int32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">not</span><span style="color:#24292E;">(a)</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[-2, -3, -5, -9]</span></span></code></pre></div><p>上面代码中，<code>1</code>的否运算之所以得到<code>-2</code>，是因为在计算机内部，负数采用”2 的补码“这种形式进行表示。也就是说，整数<code>n</code>的负数形式<code>-n</code>，是对每一个二进制位取反以后，再加上 1。因此，直接取反就相当于负数形式再减去 1，比如<code>1</code>的负数形式是<code>-1</code>，再减去 1，就得到了<code>-2</code>。</p><h2 id="静态方法-数据类型转换" tabindex="-1">静态方法：数据类型转换 <a class="header-anchor" href="#静态方法-数据类型转换" aria-label="Permalink to &quot;静态方法：数据类型转换&quot;">​</a></h2><p>SIMD 提供以下方法，用来将一种数据类型转为另一种数据类型。</p><ul><li><code>SIMD.%type%.fromFloat32x4()</code></li><li><code>SIMD.%type%.fromFloat32x4Bits()</code></li><li><code>SIMD.%type%.fromFloat64x2Bits()</code></li><li><code>SIMD.%type%.fromInt32x4()</code></li><li><code>SIMD.%type%.fromInt32x4Bits()</code></li><li><code>SIMD.%type%.fromInt16x8Bits()</code></li><li><code>SIMD.%type%.fromInt8x16Bits()</code></li><li><code>SIMD.%type%.fromUint32x4()</code></li><li><code>SIMD.%type%.fromUint32x4Bits()</code></li><li><code>SIMD.%type%.fromUint16x8Bits()</code></li><li><code>SIMD.%type%.fromUint8x16Bits()</code></li></ul><p>带有<code>Bits</code>后缀的方法，会原封不动地将二进制位拷贝到新的数据类型；不带后缀的方法，则会进行数据类型转换。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4.0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">fromFloat32x4</span><span style="color:#E1E4E8;">(t);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[1, 2, 3, 4]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int32x4.</span><span style="color:#B392F0;">fromFloat32x4Bits</span><span style="color:#E1E4E8;">(t);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[1065353216, 1073741824, 1077936128, 1082130432]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4.0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">fromFloat32x4</span><span style="color:#24292E;">(t);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[1, 2, 3, 4]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int32x4.</span><span style="color:#6F42C1;">fromFloat32x4Bits</span><span style="color:#24292E;">(t);</span></span>
<span class="line"><span style="color:#6A737D;">// Int32x4[1065353216, 1073741824, 1077936128, 1082130432]</span></span></code></pre></div><p>上面代码中，<code>fromFloat32x4</code>是将浮点数转为整数，然后存入新的数据类型；<code>fromFloat32x4Bits</code>则是将二进制位原封不动地拷贝进入新的数据类型，然后进行解读。</p><p><code>Bits</code>后缀的方法，还可以用于通道数目不对等的拷贝。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4.0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Int16x8.</span><span style="color:#B392F0;">fromFloat32x4Bits</span><span style="color:#E1E4E8;">(t);</span></span>
<span class="line"><span style="color:#6A737D;">// Int16x8[0, 16256, 0, 16384, 0, 16448, 0, 16512]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4.0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Int16x8.</span><span style="color:#6F42C1;">fromFloat32x4Bits</span><span style="color:#24292E;">(t);</span></span>
<span class="line"><span style="color:#6A737D;">// Int16x8[0, 16256, 0, 16384, 0, 16448, 0, 16512]</span></span></code></pre></div><p>上面代码中，原始 SIMD 值<code>t</code>是 4 通道的，而目标值是 8 通道的。</p><p>如果数据转换时，原通道的数据大小，超过了目标通道的最大宽度，就会报错。</p><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><h3 id="simd-type-prototype-tostring" tabindex="-1">SIMD.%type%.prototype.toString() <a class="header-anchor" href="#simd-type-prototype-tostring" aria-label="Permalink to &quot;SIMD.%type%.prototype.toString()&quot;">​</a></h3><p><code>toString</code>方法返回一个 SIMD 值的字符串形式。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Float32x4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">33</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">44</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">a.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &quot;SIMD.Float32x4(11, 22, 33, 44)&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Float32x4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">22</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">33</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">44</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">a.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// &quot;SIMD.Float32x4(11, 22, 33, 44)&quot;</span></span></code></pre></div><h2 id="实例-求平均值" tabindex="-1">实例：求平均值 <a class="header-anchor" href="#实例-求平均值" aria-label="Permalink to &quot;实例：求平均值&quot;">​</a></h2><p>正常模式下，计算<code>n</code>个值的平均值，需要运算<code>n</code>次。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">average</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">list</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> list.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> n; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    sum </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> list[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> n;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">average</span><span style="color:#24292E;">(</span><span style="color:#E36209;">list</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> list.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    sum </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> list[i];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> n;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>使用 SIMD，可以将计算次数减少到<code>n</code>次的四分之一。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">average</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">list</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> list.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">splat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> n; i </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      sum,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(list, i)</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">extractLane</span><span style="color:#E1E4E8;">(sum, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">extractLane</span><span style="color:#E1E4E8;">(sum, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">extractLane</span><span style="color:#E1E4E8;">(sum, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">SIMD</span><span style="color:#E1E4E8;">.Float32x4.</span><span style="color:#B392F0;">extractLane</span><span style="color:#E1E4E8;">(sum, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> n;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">average</span><span style="color:#24292E;">(</span><span style="color:#E36209;">list</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> list.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">splat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      sum,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(list, i)</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">extractLane</span><span style="color:#24292E;">(sum, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">extractLane</span><span style="color:#24292E;">(sum, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">extractLane</span><span style="color:#24292E;">(sum, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">SIMD</span><span style="color:#24292E;">.Float32x4.</span><span style="color:#6F42C1;">extractLane</span><span style="color:#24292E;">(sum, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> total </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> n;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面代码先是每隔四位，将所有的值读入一个 SIMD，然后立刻累加。然后，得到累加值四个通道的总和，再除以<code>n</code>就可以了。</p>`,179),e=[o];function t(c,r,y,E,F,i){return a(),n("div",null,e)}const D=s(p,[["render",t]]);export{d as __pageData,D as default};
