import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.681fc4ae.js";const u=JSON.parse('{"title":"字符串的扩展","description":"","frontmatter":{},"headers":[],"relativePath":"es6/string.md","filePath":"es6/string.md"}'),p={name:"es6/string.md"},o=l(`<h1 id="字符串的扩展" tabindex="-1">字符串的扩展 <a class="header-anchor" href="#字符串的扩展" aria-label="Permalink to &quot;字符串的扩展&quot;">​</a></h1><p>本章介绍 ES6 对字符串的改造和增强，下一章介绍字符串对象的新增方法。</p><h2 id="字符的-unicode-表示法" tabindex="-1">字符的 Unicode 表示法 <a class="header-anchor" href="#字符的-unicode-表示法" aria-label="Permalink to &quot;字符的 Unicode 表示法&quot;">​</a></h2><p>ES6 加强了对 Unicode 的支持，允许采用<code>\\uxxxx</code>形式表示一个字符，其中<code>xxxx</code>表示字符的 Unicode 码点。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\u0061</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;a&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\u0061</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;a&quot;</span></span></code></pre></div><p>但是，这种表示法只限于码点在<code>\\u0000</code>~<code>\\uFFFF</code>之间的字符。超出这个范围的字符，必须用两个双字节的形式表示。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\uD842\\uDFB7</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;𠮷&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\u20BB</span><span style="color:#9ECBFF;">7&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot; 7&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\uD842\\uDFB7</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;𠮷&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\u20BB</span><span style="color:#032F62;">7&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot; 7&quot;</span></span></code></pre></div><p>上面代码表示，如果直接在<code>\\u</code>后面跟上超过<code>0xFFFF</code>的数值（比如<code>\\u20BB7</code>），JavaScript 会理解成<code>\\u20BB+7</code>。由于<code>\\u20BB</code>是一个不可打印字符，所以只会显示一个空格，后面跟着一个<code>7</code>。</p><p>ES6 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\u{20BB7}</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;𠮷&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\u{41}\\u{42}\\u{43}</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;ABC&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> hello </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">hell\\u{6</span><span style="color:#79B8FF;">F</span><span style="color:#E1E4E8;">} </span><span style="color:#6A737D;">// 123</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\u{1F680}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\uD83D\\uDE80</span><span style="color:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\u{20BB7}</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;𠮷&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\u{41}\\u{42}\\u{43}</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;ABC&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> hello </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">123</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">hell\\u{6</span><span style="color:#005CC5;">F</span><span style="color:#24292E;">} </span><span style="color:#6A737D;">// 123</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\u{1F680}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\uD83D\\uDE80</span><span style="color:#032F62;">&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre></div><p>上面代码中，最后一个例子表明，大括号表示法与四字节的 UTF-16 编码是等价的。</p><p>有了这种表示法之后，JavaScript 共有 6 种方法可以表示一个字符。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\z</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;z&#39;</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\172</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;z&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\x7A</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;z&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\u007A</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;z&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\u{7A}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;z&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\z</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;z&#39;</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\172</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;z&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\x7A</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;z&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\u007A</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;z&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\u{7A}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;z&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span></code></pre></div><h2 id="字符串的遍历器接口" tabindex="-1">字符串的遍历器接口 <a class="header-anchor" href="#字符串的遍历器接口" aria-label="Permalink to &quot;字符串的遍历器接口&quot;">​</a></h2><p>ES6 为字符串添加了遍历器接口（详见《Iterator》一章），使得字符串可以被<code>for...of</code>循环遍历。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> codePoint </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(codePoint)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;f&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;o&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;o&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> codePoint </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(codePoint)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;f&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;o&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;o&quot;</span></span></code></pre></div><p>除了遍历字符串，这个遍历器最大的优点是可以识别大于<code>0xFFFF</code>的码点，传统的<code>for</code>循环无法识别这样的码点。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> text </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">fromCodePoint</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0x20BB7</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> text.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(text[i]);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// &quot; &quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot; &quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> text) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;𠮷&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> text </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">fromCodePoint</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0x20BB7</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> text.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(text[i]);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// &quot; &quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot; &quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> text) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;𠮷&quot;</span></span></code></pre></div><p>上面代码中，字符串<code>text</code>只有一个字符，但是<code>for</code>循环会认为它包含两个字符（都不可打印），而<code>for...of</code>循环会正确识别出这一个字符。</p><h2 id="直接输入-u-2028-和-u-2029" tabindex="-1">直接输入 U+2028 和 U+2029 <a class="header-anchor" href="#直接输入-u-2028-和-u-2029" aria-label="Permalink to &quot;直接输入 U+2028 和 U+2029&quot;">​</a></h2><p>JavaScript 字符串允许直接输入字符，以及输入字符的转义形式。举例来说，“中”的 Unicode 码点是 U+4e2d，你可以直接在字符串里面输入这个汉字，也可以输入它的转义形式<code>\\u4e2d</code>，两者是等价的。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;中&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\u4e2d</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;中&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\u4e2d</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>但是，JavaScript 规定有5个字符，不能在字符串里面直接使用，只能使用转义形式。</p><ul><li>U+005C：反斜杠（reverse solidus)</li><li>U+000D：回车（carriage return）</li><li>U+2028：行分隔符（line separator）</li><li>U+2029：段分隔符（paragraph separator）</li><li>U+000A：换行符（line feed）</li></ul><p>举例来说，字符串里面不能直接包含反斜杠，一定要转义写成<code>\\\\</code>或者<code>\\u005c</code>。</p><p>这个规定本身没有问题，麻烦在于 JSON 格式允许字符串里面直接使用 U+2028（行分隔符）和 U+2029（段分隔符）。这样一来，服务器输出的 JSON 被<code>JSON.parse</code>解析，就有可能直接报错。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">json</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&quot;</span><span style="color:#79B8FF;">\\u2028</span><span style="color:#9ECBFF;">&quot;&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(json); </span><span style="color:#6A737D;">// 可能报错</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">json</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&quot;</span><span style="color:#005CC5;">\\u2028</span><span style="color:#032F62;">&quot;&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(json); </span><span style="color:#6A737D;">// 可能报错</span></span></code></pre></div><p>JSON 格式已经冻结（RFC 7159），没法修改了。为了消除这个报错，<a href="https://github.com/tc39/proposal-json-superset" target="_blank" rel="noreferrer">ES2019</a> 允许 JavaScript 字符串直接输入 U+2028（行分隔符）和 U+2029（段分隔符）。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">PS</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&#39;</span><span style="color:#79B8FF;">\\u2029</span><span style="color:#9ECBFF;">&#39;&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">PS</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&#39;</span><span style="color:#005CC5;">\\u2029</span><span style="color:#032F62;">&#39;&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>根据这个提案，上面的代码不会报错。</p><p>注意，模板字符串现在就允许直接输入这两个字符。另外，正则表达式依然不允许直接输入这两个字符，这是没有问题的，因为 JSON 本来就不允许直接包含正则表达式。</p><h2 id="json-stringify-的改造" tabindex="-1">JSON.stringify() 的改造 <a class="header-anchor" href="#json-stringify-的改造" aria-label="Permalink to &quot;JSON.stringify() 的改造&quot;">​</a></h2><p>根据标准，JSON 数据必须是 UTF-8 编码。但是，现在的<code>JSON.stringify()</code>方法有可能返回不符合 UTF-8 标准的字符串。</p><p>具体来说，UTF-8 标准规定，<code>0xD800</code>到<code>0xDFFF</code>之间的码点，不能单独使用，必须配对使用。比如，<code>\\uD834\\uDF06</code>是两个码点，但是必须放在一起配对使用，代表字符<code>𝌆</code>。这是为了表示码点大于<code>0xFFFF</code>的字符的一种变通方法。单独使用<code>\\uD834</code>和<code>\\uDF06</code>这两个码点是不合法的，或者颠倒顺序也不行，因为<code>\\uDF06\\uD834</code>并没有对应的字符。</p><p><code>JSON.stringify()</code>的问题在于，它可能返回<code>0xD800</code>到<code>0xDFFF</code>之间的单个码点。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\u{D834}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;\\u{D834}&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\u{D834}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;\\u{D834}&quot;</span></span></code></pre></div><p>为了确保返回的是合法的 UTF-8 字符，<a href="https://github.com/tc39/proposal-well-formed-stringify" target="_blank" rel="noreferrer">ES2019</a> 改变了<code>JSON.stringify()</code>的行为。如果遇到<code>0xD800</code>到<code>0xDFFF</code>之间的单个码点，或者不存在的配对形式，它会返回转义字符串，留给应用自己决定下一步的处理。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\u{D834}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;&quot;\\\\uD834&quot;&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\uDF06\\uD834</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;&quot;\\\\udf06\\\\ud834&quot;&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\u{D834}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;&quot;\\\\uD834&quot;&quot;</span></span>
<span class="line"><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\uDF06\\uD834</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;&quot;\\\\udf06\\\\ud834&quot;&quot;</span></span></code></pre></div><h2 id="模板字符串" tabindex="-1">模板字符串 <a class="header-anchor" href="#模板字符串" aria-label="Permalink to &quot;模板字符串&quot;">​</a></h2><p>传统的 JavaScript 语言，输出模板通常是这样写的（下面使用了 jQuery 的方法）。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#result&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;There are &lt;b&gt;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> basket.count </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&lt;/b&gt; &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;items in your basket, &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;&lt;em&gt;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> basket.onSale </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;&lt;/em&gt; are on sale!&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#result&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;There are &lt;b&gt;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> basket.count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&lt;/b&gt; &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;items in your basket, &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;&lt;em&gt;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> basket.onSale </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;&lt;/em&gt; are on sale!&#39;</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>上面这种写法相当繁琐不方便，ES6 引入了模板字符串解决这个问题。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#result&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">  There are &lt;b&gt;\${</span><span style="color:#E1E4E8;">basket</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">count</span><span style="color:#9ECBFF;">}&lt;/b&gt; items</span></span>
<span class="line"><span style="color:#9ECBFF;">   in your basket, &lt;em&gt;\${</span><span style="color:#E1E4E8;">basket</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">onSale</span><span style="color:#9ECBFF;">}&lt;/em&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">  are on sale!</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#result&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">  There are &lt;b&gt;\${</span><span style="color:#24292E;">basket</span><span style="color:#032F62;">.</span><span style="color:#24292E;">count</span><span style="color:#032F62;">}&lt;/b&gt; items</span></span>
<span class="line"><span style="color:#032F62;">   in your basket, &lt;em&gt;\${</span><span style="color:#24292E;">basket</span><span style="color:#032F62;">.</span><span style="color:#24292E;">onSale</span><span style="color:#032F62;">}&lt;/em&gt;</span></span>
<span class="line"><span style="color:#032F62;">  are on sale!</span></span>
<span class="line"><span style="color:#032F62;">\`</span><span style="color:#24292E;">);</span></span></code></pre></div><p>模板字符串（template string）是增强版的字符串，用反引号（\`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 普通字符串</span></span>
<span class="line"><span style="color:#9ECBFF;">\`In JavaScript &#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39; is a line-feed.\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 多行字符串</span></span>
<span class="line"><span style="color:#9ECBFF;">\`In JavaScript this is</span></span>
<span class="line"><span style="color:#9ECBFF;"> not legal.\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`string text line 1</span></span>
<span class="line"><span style="color:#9ECBFF;">string text line 2\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 字符串中嵌入变量</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Bob&quot;</span><span style="color:#E1E4E8;">, time </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;today&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#9ECBFF;">\`Hello \${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}, how are you \${</span><span style="color:#E1E4E8;">time</span><span style="color:#9ECBFF;">}?\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 普通字符串</span></span>
<span class="line"><span style="color:#032F62;">\`In JavaScript &#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39; is a line-feed.\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 多行字符串</span></span>
<span class="line"><span style="color:#032F62;">\`In JavaScript this is</span></span>
<span class="line"><span style="color:#032F62;"> not legal.\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`string text line 1</span></span>
<span class="line"><span style="color:#032F62;">string text line 2\`</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 字符串中嵌入变量</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Bob&quot;</span><span style="color:#24292E;">, time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;today&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#032F62;">\`Hello \${</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}, how are you \${</span><span style="color:#24292E;">time</span><span style="color:#032F62;">}?\`</span></span></code></pre></div><p>上面代码中的模板字符串，都是用反引号表示。如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> greeting </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span><span style="color:#79B8FF;">\\\`</span><span style="color:#9ECBFF;">Yo</span><span style="color:#79B8FF;">\\\`</span><span style="color:#9ECBFF;"> World!\`</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> greeting </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span><span style="color:#005CC5;">\\\`</span><span style="color:#032F62;">Yo</span><span style="color:#005CC5;">\\\`</span><span style="color:#032F62;"> World!\`</span><span style="color:#24292E;">;</span></span></code></pre></div><p>如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#list&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">html</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;ul&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">  &lt;li&gt;first&lt;/li&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">  &lt;li&gt;second&lt;/li&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;/ul&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#list&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">html</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">&lt;ul&gt;</span></span>
<span class="line"><span style="color:#032F62;">  &lt;li&gt;first&lt;/li&gt;</span></span>
<span class="line"><span style="color:#032F62;">  &lt;li&gt;second&lt;/li&gt;</span></span>
<span class="line"><span style="color:#032F62;">&lt;/ul&gt;</span></span>
<span class="line"><span style="color:#032F62;">\`</span><span style="color:#24292E;">);</span></span></code></pre></div><p>上面代码中，所有模板字符串的空格和换行，都是被保留的，比如<code>&lt;ul&gt;</code>标签前面会有一个换行。如果你不想要这个换行，可以使用<code>trim</code>方法消除它。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#list&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">html</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;ul&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">  &lt;li&gt;first&lt;/li&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">  &lt;li&gt;second&lt;/li&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;/ul&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#list&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">html</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">&lt;ul&gt;</span></span>
<span class="line"><span style="color:#032F62;">  &lt;li&gt;first&lt;/li&gt;</span></span>
<span class="line"><span style="color:#032F62;">  &lt;li&gt;second&lt;/li&gt;</span></span>
<span class="line"><span style="color:#032F62;">&lt;/ul&gt;</span></span>
<span class="line"><span style="color:#032F62;">\`</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">());</span></span></code></pre></div><p>模板字符串中嵌入变量，需要将变量名写在<code>\${}</code>之中。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">authorize</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">action</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">user.</span><span style="color:#B392F0;">hasPrivilege</span><span style="color:#E1E4E8;">(action)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 传统写法为</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// &#39;User &#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// + user.name</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// + &#39; is not authorized to do &#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// + action</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// + &#39;.&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">\`User \${</span><span style="color:#E1E4E8;">user</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">} is not authorized to do \${</span><span style="color:#E1E4E8;">action</span><span style="color:#9ECBFF;">}.\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">authorize</span><span style="color:#24292E;">(</span><span style="color:#E36209;">user</span><span style="color:#24292E;">, </span><span style="color:#E36209;">action</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">user.</span><span style="color:#6F42C1;">hasPrivilege</span><span style="color:#24292E;">(action)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 传统写法为</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// &#39;User &#39;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// + user.name</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// + &#39; is not authorized to do &#39;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// + action</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// + &#39;.&#39;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">\`User \${</span><span style="color:#24292E;">user</span><span style="color:#032F62;">.</span><span style="color:#24292E;">name</span><span style="color:#032F62;">} is not authorized to do \${</span><span style="color:#24292E;">action</span><span style="color:#032F62;">}.\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">x</span><span style="color:#9ECBFF;">} + \${</span><span style="color:#E1E4E8;">y</span><span style="color:#9ECBFF;">} = \${</span><span style="color:#E1E4E8;">x</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">y</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;1 + 2 = 3&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">x</span><span style="color:#9ECBFF;">} + \${</span><span style="color:#E1E4E8;">y</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">*</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">} = \${</span><span style="color:#E1E4E8;">x</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">y</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">*</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;1 + 4 = 5&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {x: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, y: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">obj</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">x</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">obj</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">y</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;3&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">x</span><span style="color:#032F62;">} + \${</span><span style="color:#24292E;">y</span><span style="color:#032F62;">} = \${</span><span style="color:#24292E;">x</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> </span><span style="color:#24292E;">y</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;1 + 2 = 3&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">x</span><span style="color:#032F62;">} + \${</span><span style="color:#24292E;">y</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">*</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">} = \${</span><span style="color:#24292E;">x</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> </span><span style="color:#24292E;">y</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">*</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;1 + 4 = 5&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {x: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, y: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">obj</span><span style="color:#032F62;">.</span><span style="color:#24292E;">x</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> </span><span style="color:#24292E;">obj</span><span style="color:#032F62;">.</span><span style="color:#24292E;">y</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;3&quot;</span></span></code></pre></div><p>模板字符串之中还能调用函数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello World&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">\`foo \${</span><span style="color:#B392F0;">fn</span><span style="color:#9ECBFF;">()</span><span style="color:#9ECBFF;">} bar\`</span></span>
<span class="line"><span style="color:#6A737D;">// foo Hello World bar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello World&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">\`foo \${</span><span style="color:#6F42C1;">fn</span><span style="color:#032F62;">()</span><span style="color:#032F62;">} bar\`</span></span>
<span class="line"><span style="color:#6A737D;">// foo Hello World bar</span></span></code></pre></div><p>如果大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的<code>toString</code>方法。</p><p>如果模板字符串中的变量没有声明，将报错。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 变量place没有声明</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`Hello, \${</span><span style="color:#E1E4E8;">place</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 报错</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 变量place没有声明</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`Hello, \${</span><span style="color:#24292E;">place</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 报错</span></span></code></pre></div><p>由于模板字符串的大括号内部，就是执行 JavaScript 代码，因此如果大括号内部是一个字符串，将会原样输出。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">\`Hello \${&#39;World&#39;}\`</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;Hello World&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">\`Hello \${&#39;World&#39;}\`</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;Hello World&quot;</span></span></code></pre></div><p>模板字符串甚至还能嵌套。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tmpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">addrs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">  &lt;table&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">  \${</span><span style="color:#E1E4E8;">addrs</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">map</span><span style="color:#9ECBFF;">(</span><span style="color:#79B8FF;">addr</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">    &lt;tr&gt;&lt;td&gt;\${</span><span style="color:#E1E4E8;">addr</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">first</span><span style="color:#9ECBFF;">}&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">    &lt;tr&gt;&lt;td&gt;\${</span><span style="color:#E1E4E8;">addr</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">last</span><span style="color:#9ECBFF;">}&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">  \`</span><span style="color:#9ECBFF;">).</span><span style="color:#B392F0;">join</span><span style="color:#9ECBFF;">(</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#9ECBFF;">  &lt;/table&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tmpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">addrs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">  &lt;table&gt;</span></span>
<span class="line"><span style="color:#032F62;">  \${</span><span style="color:#24292E;">addrs</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">map</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">addr</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#032F62;"> </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">    &lt;tr&gt;&lt;td&gt;\${</span><span style="color:#24292E;">addr</span><span style="color:#032F62;">.</span><span style="color:#24292E;">first</span><span style="color:#032F62;">}&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#032F62;">    &lt;tr&gt;&lt;td&gt;\${</span><span style="color:#24292E;">addr</span><span style="color:#032F62;">.</span><span style="color:#24292E;">last</span><span style="color:#032F62;">}&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#032F62;">  \`</span><span style="color:#032F62;">).</span><span style="color:#6F42C1;">join</span><span style="color:#032F62;">(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#032F62;">  &lt;/table&gt;</span></span>
<span class="line"><span style="color:#032F62;">\`</span><span style="color:#24292E;">;</span></span></code></pre></div><p>上面代码中，模板字符串的变量之中，又嵌入了另一个模板字符串，使用方法如下。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    { first: </span><span style="color:#9ECBFF;">&#39;&lt;Jane&gt;&#39;</span><span style="color:#E1E4E8;">, last: </span><span style="color:#9ECBFF;">&#39;Bond&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    { first: </span><span style="color:#9ECBFF;">&#39;Lars&#39;</span><span style="color:#E1E4E8;">, last: </span><span style="color:#9ECBFF;">&#39;&lt;Croft&gt;&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">tmpl</span><span style="color:#E1E4E8;">(data));</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;table&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#6A737D;">//   &lt;tr&gt;&lt;td&gt;&lt;Jane&gt;&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   &lt;tr&gt;&lt;td&gt;Bond&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#6A737D;">//   &lt;tr&gt;&lt;td&gt;Lars&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   &lt;tr&gt;&lt;td&gt;&lt;Croft&gt;&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;/table&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    { first: </span><span style="color:#032F62;">&#39;&lt;Jane&gt;&#39;</span><span style="color:#24292E;">, last: </span><span style="color:#032F62;">&#39;Bond&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { first: </span><span style="color:#032F62;">&#39;Lars&#39;</span><span style="color:#24292E;">, last: </span><span style="color:#032F62;">&#39;&lt;Croft&gt;&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">tmpl</span><span style="color:#24292E;">(data));</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;table&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#6A737D;">//   &lt;tr&gt;&lt;td&gt;&lt;Jane&gt;&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   &lt;tr&gt;&lt;td&gt;Bond&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#6A737D;">//   &lt;tr&gt;&lt;td&gt;Lars&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   &lt;tr&gt;&lt;td&gt;&lt;Croft&gt;&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;/table&gt;</span></span></code></pre></div><p>如果需要引用模板字符串本身，在需要时执行，可以写成函数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`Hello \${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}!\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Jack&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &quot;Hello Jack!&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">name</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`Hello \${</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}!\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Jack&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &quot;Hello Jack!&quot;</span></span></code></pre></div><p>上面代码中，模板字符串写成了一个函数的返回值。执行这个函数，就相当于执行这个模板字符串了。</p><h2 id="实例-模板编译" tabindex="-1">实例：模板编译 <a class="header-anchor" href="#实例-模板编译" aria-label="Permalink to &quot;实例：模板编译&quot;">​</a></h2><p>下面，我们来看一个通过模板字符串，生成正式模板的实例。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;ul&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">  &lt;% for(let i=0; i &lt; data.supplies.length; i++) { %&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">    &lt;li&gt;&lt;%= data.supplies[i] %&gt;&lt;/li&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">  &lt;% } %&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;/ul&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">&lt;ul&gt;</span></span>
<span class="line"><span style="color:#032F62;">  &lt;% for(let i=0; i &lt; data.supplies.length; i++) { %&gt;</span></span>
<span class="line"><span style="color:#032F62;">    &lt;li&gt;&lt;%= data.supplies[i] %&gt;&lt;/li&gt;</span></span>
<span class="line"><span style="color:#032F62;">  &lt;% } %&gt;</span></span>
<span class="line"><span style="color:#032F62;">&lt;/ul&gt;</span></span>
<span class="line"><span style="color:#032F62;">\`</span><span style="color:#24292E;">;</span></span></code></pre></div><p>上面代码在模板字符串之中，放置了一个常规模板。该模板使用<code>&lt;%...%&gt;</code>放置 JavaScript 代码，使用<code>&lt;%= ... %&gt;</code>输出 JavaScript 表达式。</p><p>怎么编译这个模板字符串呢？</p><p>一种思路是将其转换为 JavaScript 表达式字符串。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">echo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&lt;ul&gt;&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> data.supplies.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">echo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&lt;li&gt;&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">echo</span><span style="color:#E1E4E8;">(data.supplies[i]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">echo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&lt;/li&gt;&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#B392F0;">echo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&lt;/ul&gt;&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">echo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&lt;ul&gt;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> data.supplies.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">echo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&lt;li&gt;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">echo</span><span style="color:#24292E;">(data.supplies[i]);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">echo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&lt;/li&gt;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6F42C1;">echo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&lt;/ul&gt;&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>这个转换使用正则表达式就行了。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> evalExpr </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">&lt;%=(</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">+?</span><span style="color:#DBEDFF;">)%&gt;</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> expr </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">&lt;%(</span><span style="color:#79B8FF;">[\\s\\S]</span><span style="color:#F97583;">+?</span><span style="color:#DBEDFF;">)%&gt;</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> template</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(evalExpr, </span><span style="color:#9ECBFF;">&#39;\`); </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  echo( $1 ); </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  echo(\`&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(expr, </span><span style="color:#9ECBFF;">&#39;\`); </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;"> $1 </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  echo(\`&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;echo(\`&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> template </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;\`);&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> evalExpr </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /&lt;%=(</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">+?</span><span style="color:#032F62;">)%&gt;/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> expr </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /&lt;%(</span><span style="color:#005CC5;">[\\s\\S]</span><span style="color:#D73A49;">+?</span><span style="color:#032F62;">)%&gt;/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> template</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(evalExpr, </span><span style="color:#032F62;">&#39;\`); </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  echo( $1 ); </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  echo(\`&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(expr, </span><span style="color:#032F62;">&#39;\`); </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;"> $1 </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  echo(\`&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;echo(\`&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> template </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;\`);&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>然后，将<code>template</code>封装在一个函数里面返回，就可以了。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> script </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#9ECBFF;">\`(function parse(data){</span></span>
<span class="line"><span style="color:#9ECBFF;">  let output = &quot;&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">  function echo(html){</span></span>
<span class="line"><span style="color:#9ECBFF;">    output += html;</span></span>
<span class="line"><span style="color:#9ECBFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">  \${</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">template</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">  return output;</span></span>
<span class="line"><span style="color:#9ECBFF;">})\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> script;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> script </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#032F62;">\`(function parse(data){</span></span>
<span class="line"><span style="color:#032F62;">  let output = &quot;&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">  function echo(html){</span></span>
<span class="line"><span style="color:#032F62;">    output += html;</span></span>
<span class="line"><span style="color:#032F62;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">  \${</span><span style="color:#032F62;"> </span><span style="color:#24292E;">template</span><span style="color:#032F62;"> </span><span style="color:#032F62;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">  return output;</span></span>
<span class="line"><span style="color:#032F62;">})\`</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> script;</span></span></code></pre></div><p>将上面的内容拼装成一个模板编译函数<code>compile</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">template</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">evalExpr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">&lt;%=(</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">+?</span><span style="color:#DBEDFF;">)%&gt;</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">expr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">&lt;%(</span><span style="color:#79B8FF;">[\\s\\S]</span><span style="color:#F97583;">+?</span><span style="color:#DBEDFF;">)%&gt;</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> template</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(evalExpr, </span><span style="color:#9ECBFF;">&#39;\`); </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  echo( $1 ); </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  echo(\`&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(expr, </span><span style="color:#9ECBFF;">&#39;\`); </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;"> $1 </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  echo(\`&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;echo(\`&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> template </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;\`);&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> script </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">\`(function parse(data){</span></span>
<span class="line"><span style="color:#9ECBFF;">    let output = &quot;&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    function echo(html){</span></span>
<span class="line"><span style="color:#9ECBFF;">      output += html;</span></span>
<span class="line"><span style="color:#9ECBFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    \${</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">template</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    return output;</span></span>
<span class="line"><span style="color:#9ECBFF;">  })\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> script;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(</span><span style="color:#E36209;">template</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">evalExpr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /&lt;%=(</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">+?</span><span style="color:#032F62;">)%&gt;/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">expr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /&lt;%(</span><span style="color:#005CC5;">[\\s\\S]</span><span style="color:#D73A49;">+?</span><span style="color:#032F62;">)%&gt;/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> template</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(evalExpr, </span><span style="color:#032F62;">&#39;\`); </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  echo( $1 ); </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  echo(\`&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(expr, </span><span style="color:#032F62;">&#39;\`); </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;"> $1 </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  echo(\`&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;echo(\`&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> template </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;\`);&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> script </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">\`(function parse(data){</span></span>
<span class="line"><span style="color:#032F62;">    let output = &quot;&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    function echo(html){</span></span>
<span class="line"><span style="color:#032F62;">      output += html;</span></span>
<span class="line"><span style="color:#032F62;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    \${</span><span style="color:#032F62;"> </span><span style="color:#24292E;">template</span><span style="color:#032F62;"> </span><span style="color:#032F62;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    return output;</span></span>
<span class="line"><span style="color:#032F62;">  })\`</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> script;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>compile</code>函数的用法如下。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> parse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(template));</span></span>
<span class="line"><span style="color:#E1E4E8;">div.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">({ supplies: [ </span><span style="color:#9ECBFF;">&quot;broom&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;mop&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;cleaner&quot;</span><span style="color:#E1E4E8;"> ] });</span></span>
<span class="line"><span style="color:#6A737D;">//   &lt;ul&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//     &lt;li&gt;broom&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//     &lt;li&gt;mop&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//     &lt;li&gt;cleaner&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   &lt;/ul&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> parse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(template));</span></span>
<span class="line"><span style="color:#24292E;">div.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">({ supplies: [ </span><span style="color:#032F62;">&quot;broom&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;mop&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;cleaner&quot;</span><span style="color:#24292E;"> ] });</span></span>
<span class="line"><span style="color:#6A737D;">//   &lt;ul&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//     &lt;li&gt;broom&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//     &lt;li&gt;mop&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//     &lt;li&gt;cleaner&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//   &lt;/ul&gt;</span></span></code></pre></div><h2 id="标签模板" tabindex="-1">标签模板 <a class="header-anchor" href="#标签模板" aria-label="Permalink to &quot;标签模板&quot;">​</a></h2><p>模板字符串的功能，不仅仅是上面这些。它可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。这被称为“标签模板”功能（tagged template）。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">alert</span><span style="color:#9ECBFF;">\`hello\`</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">alert</span><span style="color:#032F62;">\`hello\`</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">])</span></span></code></pre></div><p>标签模板其实不是模板，而是函数调用的一种特殊形式。“标签”指的就是函数，紧跟在后面的模板字符串就是它的参数。</p><p>但是，如果模板字符里面有变量，就不是简单的调用了，而是会将模板字符串先处理成多个参数，再调用函数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">tag</span><span style="color:#9ECBFF;">\`Hello \${</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">a</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">b</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">} world \${</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">a</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">*</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">b</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;Hello &#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39; world &#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">tag</span><span style="color:#032F62;">\`Hello \${</span><span style="color:#032F62;"> </span><span style="color:#24292E;">a</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> </span><span style="color:#24292E;">b</span><span style="color:#032F62;"> </span><span style="color:#032F62;">} world \${</span><span style="color:#032F62;"> </span><span style="color:#24292E;">a</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">*</span><span style="color:#032F62;"> </span><span style="color:#24292E;">b</span><span style="color:#032F62;"> </span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;Hello &#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39; world &#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">], </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">);</span></span></code></pre></div><p>上面代码中，模板字符串前面有一个标识名<code>tag</code>，它是一个函数。整个表达式的返回值，就是<code>tag</code>函数处理模板字符串后的返回值。</p><p>函数<code>tag</code>依次会接收到多个参数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">stringArr</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value2</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">stringArr</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">values</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">(</span><span style="color:#E36209;">stringArr</span><span style="color:#24292E;">, </span><span style="color:#E36209;">value1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">value2</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">(</span><span style="color:#E36209;">stringArr</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">values</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>tag</code>函数的第一个参数是一个数组，该数组的成员是模板字符串中那些没有变量替换的部分，也就是说，变量替换只发生在数组的第一个成员与第二个成员之间、第二个成员与第三个成员之间，以此类推。</p><p><code>tag</code>函数的其他参数，都是模板字符串各个变量被替换后的值。由于本例中，模板字符串含有两个变量，因此<code>tag</code>会接受到<code>value1</code>和<code>value2</code>两个参数。</p><p><code>tag</code>函数所有参数的实际值如下。</p><ul><li>第一个参数：<code>[&#39;Hello &#39;, &#39; world &#39;, &#39;&#39;]</code></li><li>第二个参数: 15</li><li>第三个参数：50</li></ul><p>也就是说，<code>tag</code>函数实际上以下面的形式调用。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;Hello &#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39; world &#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;Hello &#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39; world &#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">], </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">)</span></span></code></pre></div><p>我们可以按照需要编写<code>tag</code>函数的代码。下面是<code>tag</code>函数的一种写法，以及运行结果。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">v1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">v2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(s[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(s[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(s[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(v1);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(v2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;OK&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">tag</span><span style="color:#9ECBFF;">\`Hello \${</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">a</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">b</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">} world \${</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">a</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">*</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">b</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;Hello &quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot; world &quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// 15</span></span>
<span class="line"><span style="color:#6A737D;">// 50</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;OK&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">(</span><span style="color:#E36209;">s</span><span style="color:#24292E;">, </span><span style="color:#E36209;">v1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">v2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(v1);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(v2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;OK&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">tag</span><span style="color:#032F62;">\`Hello \${</span><span style="color:#032F62;"> </span><span style="color:#24292E;">a</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> </span><span style="color:#24292E;">b</span><span style="color:#032F62;"> </span><span style="color:#032F62;">} world \${</span><span style="color:#032F62;"> </span><span style="color:#24292E;">a</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">*</span><span style="color:#032F62;"> </span><span style="color:#24292E;">b</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;Hello &quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot; world &quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// 15</span></span>
<span class="line"><span style="color:#6A737D;">// 50</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;OK&quot;</span></span></code></pre></div><p>下面是一个更复杂的例子。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">passthru</span><span style="color:#9ECBFF;">\`The total is \${</span><span style="color:#E1E4E8;">total</span><span style="color:#9ECBFF;">} (\${</span><span style="color:#E1E4E8;">total</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">1.05</span><span style="color:#9ECBFF;">} with tax)\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">passthru</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">literals</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> literals.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> literals[i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      result </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">msg </span><span style="color:#6A737D;">// &quot;The total is 30 (31.5 with tax)&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">passthru</span><span style="color:#032F62;">\`The total is \${</span><span style="color:#24292E;">total</span><span style="color:#032F62;">} (\${</span><span style="color:#24292E;">total</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">1.05</span><span style="color:#032F62;">} with tax)\`</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">passthru</span><span style="color:#24292E;">(</span><span style="color:#E36209;">literals</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> literals.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> literals[i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      result </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">[i];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">msg </span><span style="color:#6A737D;">// &quot;The total is 30 (31.5 with tax)&quot;</span></span></code></pre></div><p>上面这个例子展示了，如何将各个参数按照原来的位置拼合回去。</p><p><code>passthru</code>函数采用 rest 参数的写法如下。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">passthru</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">literals</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">values</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> output </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> index;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; index </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> values.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; index</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    output </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> literals[index] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> values[index];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  output </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> literals[index]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> output;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">passthru</span><span style="color:#24292E;">(</span><span style="color:#E36209;">literals</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">values</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> output </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> index;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; index </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> values.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; index</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    output </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> literals[index] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> values[index];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  output </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> literals[index]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> output;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>“标签模板”的一个重要应用，就是过滤 HTML 字符串，防止用户输入恶意内容。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> message </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">SaferHTML</span><span style="color:#9ECBFF;">\`&lt;p&gt;\${</span><span style="color:#E1E4E8;">sender</span><span style="color:#9ECBFF;">} has sent you a message.&lt;/p&gt;\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SaferHTML</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">templateData</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> templateData[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">[i]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Escape special characters in the substitution.</span></span>
<span class="line"><span style="color:#E1E4E8;">    s </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> arg.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">&amp;</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&amp;amp;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">&lt;</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&amp;lt;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">&gt;</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&amp;gt;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Don&#39;t escape special characters in the template.</span></span>
<span class="line"><span style="color:#E1E4E8;">    s </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> templateData[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> message </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">SaferHTML</span><span style="color:#032F62;">\`&lt;p&gt;\${</span><span style="color:#24292E;">sender</span><span style="color:#032F62;">} has sent you a message.&lt;/p&gt;\`</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SaferHTML</span><span style="color:#24292E;">(</span><span style="color:#E36209;">templateData</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> templateData[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">[i]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Escape special characters in the substitution.</span></span>
<span class="line"><span style="color:#24292E;">    s </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> arg.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/&amp;/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&amp;amp;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/&lt;/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&amp;lt;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/&gt;/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&amp;gt;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Don&#39;t escape special characters in the template.</span></span>
<span class="line"><span style="color:#24292E;">    s </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> templateData[i];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面代码中，<code>sender</code>变量往往是用户提供的，经过<code>SaferHTML</code>函数处理，里面的特殊字符都会被转义。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> sender </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&lt;script&gt;alert(&quot;abc&quot;)&lt;/script&gt;&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 恶意代码</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SaferHTML</span><span style="color:#9ECBFF;">\`&lt;p&gt;\${</span><span style="color:#E1E4E8;">sender</span><span style="color:#9ECBFF;">} has sent you a message.&lt;/p&gt;\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">message</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;p&gt;&amp;lt;script&amp;gt;alert(&quot;abc&quot;)&amp;lt;/script&amp;gt; has sent you a message.&lt;/p&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sender </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&lt;script&gt;alert(&quot;abc&quot;)&lt;/script&gt;&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 恶意代码</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SaferHTML</span><span style="color:#032F62;">\`&lt;p&gt;\${</span><span style="color:#24292E;">sender</span><span style="color:#032F62;">} has sent you a message.&lt;/p&gt;\`</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">message</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;p&gt;&amp;lt;script&amp;gt;alert(&quot;abc&quot;)&amp;lt;/script&amp;gt; has sent you a message.&lt;/p&gt;</span></span></code></pre></div><p>标签模板的另一个应用，就是多语言转换（国际化处理）。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">i18n</span><span style="color:#9ECBFF;">\`Welcome to \${</span><span style="color:#E1E4E8;">siteName</span><span style="color:#9ECBFF;">}, you are visitor number \${</span><span style="color:#E1E4E8;">visitorNumber</span><span style="color:#9ECBFF;">}!\`</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;欢迎访问xxx，您是第xxxx位访问者！&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">i18n</span><span style="color:#032F62;">\`Welcome to \${</span><span style="color:#24292E;">siteName</span><span style="color:#032F62;">}, you are visitor number \${</span><span style="color:#24292E;">visitorNumber</span><span style="color:#032F62;">}!\`</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;欢迎访问xxx，您是第xxxx位访问者！&quot;</span></span></code></pre></div><p>模板字符串本身并不能取代 Mustache 之类的模板库，因为没有条件判断和循环处理功能，但是通过标签函数，你可以自己添加这些功能。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 下面的hashTemplate函数</span></span>
<span class="line"><span style="color:#6A737D;">// 是一个自定义的模板处理函数</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> libraryHtml </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hashTemplate</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">  &lt;ul&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">    #for book in \${</span><span style="color:#E1E4E8;">myBooks</span><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#9ECBFF;">      &lt;li&gt;&lt;i&gt;#{book.title}&lt;/i&gt; by #{book.author}&lt;/li&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">    #end</span></span>
<span class="line"><span style="color:#9ECBFF;">  &lt;/ul&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 下面的hashTemplate函数</span></span>
<span class="line"><span style="color:#6A737D;">// 是一个自定义的模板处理函数</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> libraryHtml </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hashTemplate</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">  &lt;ul&gt;</span></span>
<span class="line"><span style="color:#032F62;">    #for book in \${</span><span style="color:#24292E;">myBooks</span><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#032F62;">      &lt;li&gt;&lt;i&gt;#{book.title}&lt;/i&gt; by #{book.author}&lt;/li&gt;</span></span>
<span class="line"><span style="color:#032F62;">    #end</span></span>
<span class="line"><span style="color:#032F62;">  &lt;/ul&gt;</span></span>
<span class="line"><span style="color:#032F62;">\`</span><span style="color:#24292E;">;</span></span></code></pre></div><p>除此之外，你甚至可以使用标签模板，在 JavaScript 语言之中嵌入其他语言。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">jsx</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">  &lt;div&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">    &lt;input</span></span>
<span class="line"><span style="color:#9ECBFF;">      ref=&#39;input&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">      onChange=&#39;\${</span><span style="color:#79B8FF;">this</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">handleChange</span><span style="color:#9ECBFF;">}&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">      defaultValue=&#39;\${</span><span style="color:#79B8FF;">this</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">state</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">value</span><span style="color:#9ECBFF;">}&#39; /&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">      \${</span><span style="color:#79B8FF;">this</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">state</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">value</span><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#9ECBFF;">   &lt;/div&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">jsx</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">  &lt;div&gt;</span></span>
<span class="line"><span style="color:#032F62;">    &lt;input</span></span>
<span class="line"><span style="color:#032F62;">      ref=&#39;input&#39;</span></span>
<span class="line"><span style="color:#032F62;">      onChange=&#39;\${</span><span style="color:#005CC5;">this</span><span style="color:#032F62;">.</span><span style="color:#24292E;">handleChange</span><span style="color:#032F62;">}&#39;</span></span>
<span class="line"><span style="color:#032F62;">      defaultValue=&#39;\${</span><span style="color:#005CC5;">this</span><span style="color:#032F62;">.</span><span style="color:#24292E;">state</span><span style="color:#032F62;">.</span><span style="color:#24292E;">value</span><span style="color:#032F62;">}&#39; /&gt;</span></span>
<span class="line"><span style="color:#032F62;">      \${</span><span style="color:#005CC5;">this</span><span style="color:#032F62;">.</span><span style="color:#24292E;">state</span><span style="color:#032F62;">.</span><span style="color:#24292E;">value</span><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#032F62;">   &lt;/div&gt;</span></span>
<span class="line"><span style="color:#032F62;">\`</span></span></code></pre></div><p>上面的代码通过<code>jsx</code>函数，将一个 DOM 字符串转为 React 对象。你可以在 GitHub 找到<code>jsx</code>函数的<a href="https://gist.github.com/lygaret/a68220defa69174bdec5" target="_blank" rel="noreferrer">具体实现</a>。</p><p>下面则是一个假想的例子，通过<code>java</code>函数，在 JavaScript 代码之中运行 Java 代码。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">java</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">class HelloWorldApp {</span></span>
<span class="line"><span style="color:#9ECBFF;">  public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#9ECBFF;">    System.out.println(&quot;Hello World!&quot;); // Display the string.</span></span>
<span class="line"><span style="color:#9ECBFF;">  }</span></span>
<span class="line"><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#E1E4E8;">HelloWorldApp.</span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">java</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">class HelloWorldApp {</span></span>
<span class="line"><span style="color:#032F62;">  public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#032F62;">    System.out.println(&quot;Hello World!&quot;); // Display the string.</span></span>
<span class="line"><span style="color:#032F62;">  }</span></span>
<span class="line"><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#24292E;">HelloWorldApp.</span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">();</span></span></code></pre></div><p>模板处理函数的第一个参数（模板字符串数组），还有一个<code>raw</code>属性。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#9ECBFF;">\`123\`</span></span>
<span class="line"><span style="color:#6A737D;">// [&quot;123&quot;, raw: Array[1]]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#032F62;">\`123\`</span></span>
<span class="line"><span style="color:#6A737D;">// [&quot;123&quot;, raw: Array[1]]</span></span></code></pre></div><p>上面代码中，<code>console.log</code>接受的参数，实际上是一个数组。该数组有一个<code>raw</code>属性，保存的是转义后的原字符串。</p><p>请看下面的例子。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tag</span><span style="color:#9ECBFF;">\`First line</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">Second line\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">strings</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(strings.raw[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// strings.raw[0] 为 &quot;First line\\\\nSecond line&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 打印输出 &quot;First line\\nSecond line&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tag</span><span style="color:#032F62;">\`First line</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">Second line\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">(</span><span style="color:#E36209;">strings</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(strings.raw[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// strings.raw[0] 为 &quot;First line\\\\nSecond line&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 打印输出 &quot;First line\\nSecond line&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面代码中，<code>tag</code>函数的第一个参数<code>strings</code>，有一个<code>raw</code>属性，也指向一个数组。该数组的成员与<code>strings</code>数组完全一致。比如，<code>strings</code>数组是<code>[&quot;First line\\nSecond line&quot;]</code>，那么<code>strings.raw</code>数组就是<code>[&quot;First line\\\\nSecond line&quot;]</code>。两者唯一的区别，就是字符串里面的斜杠都被转义了。比如，strings.raw 数组会将<code>\\n</code>视为<code>\\\\</code>和<code>n</code>两个字符，而不是换行符。这是为了方便取得转义之前的原始模板而设计的。</p><h2 id="模板字符串的限制" tabindex="-1">模板字符串的限制 <a class="header-anchor" href="#模板字符串的限制" aria-label="Permalink to &quot;模板字符串的限制&quot;">​</a></h2><p>前面提到标签模板里面，可以内嵌其他语言。但是，模板字符串默认会将字符串转义，导致无法嵌入其他语言。</p><p>举例来说，标签模板里面可以嵌入 LaTEX 语言。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">latex</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">strings</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> document </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">latex</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">ewcommand{</span><span style="color:#79B8FF;">\\f</span><span style="color:#9ECBFF;">un}{</span><span style="color:#79B8FF;">\\t</span><span style="color:#9ECBFF;">extbf{Fun!}}  // 正常工作</span></span>
<span class="line"><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">ewcommand{</span><span style="color:#79B8FF;">\\u</span><span style="color:#9ECBFF;">nicode}{</span><span style="color:#79B8FF;">\\t</span><span style="color:#9ECBFF;">extbf{Unicode!}} // 报错</span></span>
<span class="line"><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">ewcommand{</span><span style="color:#79B8FF;">\\x</span><span style="color:#9ECBFF;">erxes}{</span><span style="color:#79B8FF;">\\t</span><span style="color:#9ECBFF;">extbf{King!}} // 报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">Breve over the h goes </span><span style="color:#79B8FF;">\\u</span><span style="color:#9ECBFF;">{h}ere // 报错</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">latex</span><span style="color:#24292E;">(</span><span style="color:#E36209;">strings</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> document </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">latex</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">ewcommand{</span><span style="color:#005CC5;">\\f</span><span style="color:#032F62;">un}{</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">extbf{Fun!}}  // 正常工作</span></span>
<span class="line"><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">ewcommand{</span><span style="color:#005CC5;">\\u</span><span style="color:#032F62;">nicode}{</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">extbf{Unicode!}} // 报错</span></span>
<span class="line"><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">ewcommand{</span><span style="color:#005CC5;">\\x</span><span style="color:#032F62;">erxes}{</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">extbf{King!}} // 报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">Breve over the h goes </span><span style="color:#005CC5;">\\u</span><span style="color:#032F62;">{h}ere // 报错</span></span>
<span class="line"><span style="color:#032F62;">\`</span></span></code></pre></div><p>上面代码中，变量<code>document</code>内嵌的模板字符串，对于 LaTEX 语言来说完全是合法的，但是 JavaScript 引擎会报错。原因就在于字符串的转义。</p><p>模板字符串会将<code>\\u00FF</code>和<code>\\u{42}</code>当作 Unicode 字符进行转义，所以<code>\\unicode</code>解析时报错；而<code>\\x56</code>会被当作十六进制字符串转义，所以<code>\\xerxes</code>会报错。也就是说，<code>\\u</code>和<code>\\x</code>在 LaTEX 里面有特殊含义，但是 JavaScript 将它们转义了。</p><p>为了解决这个问题，ES2018 <a href="https://tc39.github.io/proposal-template-literal-revision/" target="_blank" rel="noreferrer">放松</a>了对标签模板里面的字符串转义的限制。如果遇到不合法的字符串转义，就返回<code>undefined</code>，而不是报错，并且从<code>raw</code>属性上面可以得到原始字符串。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">strs</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  strs[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">  strs.raw[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">unicode and </span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">u{55}&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">tag</span><span style="color:#9ECBFF;">\`</span><span style="color:#79B8FF;">\\u</span><span style="color:#9ECBFF;">nicode and </span><span style="color:#79B8FF;">\\u{55}</span><span style="color:#9ECBFF;">\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">(</span><span style="color:#E36209;">strs</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  strs[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span></span>
<span class="line"><span style="color:#24292E;">  strs.raw[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">unicode and </span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">u{55}&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">tag</span><span style="color:#032F62;">\`</span><span style="color:#005CC5;">\\u</span><span style="color:#032F62;">nicode and </span><span style="color:#005CC5;">\\u{55}</span><span style="color:#032F62;">\`</span></span></code></pre></div><p>上面代码中，模板字符串原本是应该报错的，但是由于放松了对字符串转义的限制，所以不报错了，JavaScript 引擎将第一个字符设置为<code>undefined</code>，但是<code>raw</code>属性依然可以得到原始字符串，因此<code>tag</code>函数还是可以对原字符串进行处理。</p><p>注意，这种对字符串转义的放松，只在标签模板解析字符串时生效，不是标签模板的场合，依然会报错。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> bad </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`bad escape sequence: </span><span style="color:#79B8FF;">\\u</span><span style="color:#9ECBFF;">nicode\`</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 报错</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> bad </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`bad escape sequence: </span><span style="color:#005CC5;">\\u</span><span style="color:#032F62;">nicode\`</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 报错</span></span></code></pre></div>`,136),e=[o];function t(c,r,y,E,i,F){return a(),n("div",null,e)}const g=s(p,[["render",t]]);export{u as __pageData,g as default};
