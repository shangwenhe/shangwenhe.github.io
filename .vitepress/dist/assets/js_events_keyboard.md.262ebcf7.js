import{_ as e,o as a,c as s,Q as o}from"./chunks/framework.b2e9bf53.js";const b=JSON.parse('{"title":"键盘事件","description":"","frontmatter":{},"headers":[],"relativePath":"js/events/keyboard.md","filePath":"js/events/keyboard.md"}'),n={name:"js/events/keyboard.md"},l=o(`<h1 id="键盘事件" tabindex="-1">键盘事件 <a class="header-anchor" href="#键盘事件" aria-label="Permalink to &quot;键盘事件&quot;">​</a></h1><h2 id="键盘事件的种类" tabindex="-1">键盘事件的种类 <a class="header-anchor" href="#键盘事件的种类" aria-label="Permalink to &quot;键盘事件的种类&quot;">​</a></h2><p>键盘事件由用户击打键盘触发，主要有<code>keydown</code>、<code>keypress</code>、<code>keyup</code>三个事件，它们都继承了<code>KeyboardEvent</code>接口。</p><ul><li><code>keydown</code>：按下键盘时触发。</li><li><code>keypress</code>：按下有值的键时触发，即按下 Ctrl、Alt、Shift、Meta 这样无值的键，这个事件不会触发。对于有值的键，按下时先触发<code>keydown</code>事件，再触发这个事件。</li><li><code>keyup</code>：松开键盘时触发该事件。</li></ul><p>如果用户一直按键不松开，就会连续触发键盘事件，触发的顺序如下。</p><ol><li>keydown</li><li>keypress</li><li>keydown</li><li>keypress</li><li>...（重复以上过程）</li><li>keyup</li></ol><h2 id="keyboardevent-接口概述" tabindex="-1">KeyboardEvent 接口概述 <a class="header-anchor" href="#keyboardevent-接口概述" aria-label="Permalink to &quot;KeyboardEvent 接口概述&quot;">​</a></h2><p><code>KeyboardEvent</code>接口用来描述用户与键盘的互动。这个接口继承了<code>Event</code>接口，并且定义了自己的实例属性和实例方法。</p><p>浏览器原生提供<code>KeyboardEvent</code>构造函数，用来新建键盘事件的实例。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KeyboardEvent</span><span style="color:#E1E4E8;">(type, options)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KeyboardEvent</span><span style="color:#24292E;">(type, options)</span></span></code></pre></div><p><code>KeyboardEvent</code>构造函数接受两个参数。第一个参数是字符串，表示事件类型；第二个参数是一个事件配置对象，该参数可选。除了<code>Event</code>接口提供的属性，还可以配置以下字段，它们都是可选。</p><ul><li><code>key</code>：字符串，当前按下的键，默认为空字符串。</li><li><code>code</code>：字符串，表示当前按下的键的字符串形式，默认为空字符串。</li><li><code>location</code>：整数，当前按下的键的位置，默认为<code>0</code>。</li><li><code>ctrlKey</code>：布尔值，是否按下 Ctrl 键，默认为<code>false</code>。</li><li><code>shiftKey</code>：布尔值，是否按下 Shift 键，默认为<code>false</code>。</li><li><code>altKey</code>：布尔值，是否按下 Alt 键，默认为<code>false</code>。</li><li><code>metaKey</code>：布尔值，是否按下 Meta 键，默认为<code>false</code>。</li><li><code>repeat</code>：布尔值，是否重复按键，默认为<code>false</code>。</li></ul><h2 id="keyboardevent-的实例属性" tabindex="-1">KeyboardEvent 的实例属性 <a class="header-anchor" href="#keyboardevent-的实例属性" aria-label="Permalink to &quot;KeyboardEvent 的实例属性&quot;">​</a></h2><h3 id="keyboardevent-altkey-keyboardevent-ctrlkey-keyboardevent-metakey-keyboardevent-shiftkey" tabindex="-1">KeyboardEvent.altKey，KeyboardEvent.ctrlKey，KeyboardEvent.metaKey，KeyboardEvent.shiftKey <a class="header-anchor" href="#keyboardevent-altkey-keyboardevent-ctrlkey-keyboardevent-metakey-keyboardevent-shiftkey" aria-label="Permalink to &quot;KeyboardEvent.altKey，KeyboardEvent.ctrlKey，KeyboardEvent.metaKey，KeyboardEvent.shiftKey&quot;">​</a></h3><p>以下属性都是只读属性，返回一个布尔值，表示是否按下对应的键。</p><ul><li><code>KeyboardEvent.altKey</code>：是否按下 Alt 键</li><li><code>KeyboardEvent.ctrlKey</code>：是否按下 Ctrl 键</li><li><code>KeyboardEvent.metaKey</code>：是否按下 meta 键（Mac 系统是一个四瓣的小花，Windows 系统是 windows 键）</li><li><code>KeyboardEvent.shiftKey</code>：是否按下 Shift 键</li></ul><p>下面是一个示例。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">showChar</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ALT: &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> e.altKey);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;CTRL: &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> e.ctrlKey);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Meta: &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> e.metaKey);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Shift: &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> e.shiftKey);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">document.body.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;keydown&#39;</span><span style="color:#E1E4E8;">, showChar, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">showChar</span><span style="color:#24292E;">(</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ALT: &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> e.altKey);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;CTRL: &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> e.ctrlKey);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Meta: &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> e.metaKey);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Shift: &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> e.shiftKey);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">document.body.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;keydown&#39;</span><span style="color:#24292E;">, showChar, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="keyboardevent-code" tabindex="-1">KeyboardEvent.code <a class="header-anchor" href="#keyboardevent-code" aria-label="Permalink to &quot;KeyboardEvent.code&quot;">​</a></h3><p><code>KeyboardEvent.code</code>属性返回一个字符串，表示当前按下的键的字符串形式。该属性只读。</p><p>下面是一些常用键的字符串形式，其他键请查<a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code/code_values" target="_blank" rel="noreferrer">文档</a>。</p><ul><li>数字键0 - 9：返回<code>digit0</code> - <code>digit9</code></li><li>字母键A - z：返回<code>KeyA</code> - <code>KeyZ</code></li><li>功能键F1 - F12：返回 <code>F1</code> - <code>F12</code></li><li>方向键：返回<code>ArrowDown</code>、<code>ArrowUp</code>、<code>ArrowLeft</code>、<code>ArrowRight</code></li><li>Alt 键：返回<code>AltLeft</code>或<code>AltRight</code></li><li>Shift 键：返回<code>ShiftLeft</code>或<code>ShiftRight</code></li><li>Ctrl 键：返回<code>ControlLeft</code>或<code>ControlRight</code></li></ul><h3 id="keyboardevent-key" tabindex="-1">KeyboardEvent.key <a class="header-anchor" href="#keyboardevent-key" aria-label="Permalink to &quot;KeyboardEvent.key&quot;">​</a></h3><p><code>KeyboardEvent.key</code>属性返回一个字符串，表示按下的键名。该属性只读。</p><p>如果按下的键代表可打印字符，则返回这个字符，比如数字、字母。</p><p>如果按下的键代表不可打印的特殊字符，则返回预定义的键值，比如 Backspace，Tab，Enter，Shift，Control，Alt，CapsLock，Esc，Spacebar，PageUp，PageDown，End，Home，Left，Right，Up，Down，PrintScreen，Insert，Del，Win，F1～F12，NumLock，Scroll 等。</p><p>如果同时按下一个控制键和一个符号键，则返回符号键的键名。比如，按下 Ctrl + a，则返回<code>a</code>；按下 Shift + a，则返回大写的<code>A</code>。</p><p>如果无法识别键名，返回字符串<code>Unidentified</code>。</p><h3 id="keyboardevent-location" tabindex="-1">KeyboardEvent.location <a class="header-anchor" href="#keyboardevent-location" aria-label="Permalink to &quot;KeyboardEvent.location&quot;">​</a></h3><p><code>KeyboardEvent.location</code>属性返回一个整数，表示按下的键处在键盘的哪一个区域。它可能取以下值。</p><ul><li>0：处在键盘的主区域，或者无法判断处于哪一个区域。</li><li>1：处在键盘的左侧，只适用那些有两个位置的键（比如 Ctrl 和 Shift 键）。</li><li>2：处在键盘的右侧，只适用那些有两个位置的键（比如 Ctrl 和 Shift 键）。</li><li>3：处在数字小键盘。</li></ul><h3 id="keyboardevent-repeat" tabindex="-1">KeyboardEvent.repeat <a class="header-anchor" href="#keyboardevent-repeat" aria-label="Permalink to &quot;KeyboardEvent.repeat&quot;">​</a></h3><p><code>KeyboardEvent.repeat</code>返回一个布尔值，代表该键是否被按着不放，以便判断是否重复这个键，即浏览器会持续触发<code>keydown</code>和<code>keypress</code>事件，直到用户松开手为止。</p><h2 id="keyboardevent-的实例方法" tabindex="-1">KeyboardEvent 的实例方法 <a class="header-anchor" href="#keyboardevent-的实例方法" aria-label="Permalink to &quot;KeyboardEvent 的实例方法&quot;">​</a></h2><h3 id="keyboardevent-getmodifierstate" tabindex="-1">KeyboardEvent.getModifierState() <a class="header-anchor" href="#keyboardevent-getmodifierstate" aria-label="Permalink to &quot;KeyboardEvent.getModifierState()&quot;">​</a></h3><p><code>KeyboardEvent.getModifierState()</code>方法返回一个布尔值，表示是否按下或激活指定的功能键。它的常用参数如下。</p><ul><li><code>Alt</code>：Alt 键</li><li><code>CapsLock</code>：大写锁定键</li><li><code>Control</code>：Ctrl 键</li><li><code>Meta</code>：Meta 键</li><li><code>NumLock</code>：数字键盘开关键</li><li><code>Shift</code>：Shift 键</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  event.</span><span style="color:#B392F0;">getModifierState</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Control&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">  event.</span><span style="color:#B392F0;">getModifierState</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Alt&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">  event.</span><span style="color:#B392F0;">getModifierState</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Meta&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  event.</span><span style="color:#6F42C1;">getModifierState</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Control&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">  event.</span><span style="color:#6F42C1;">getModifierState</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Alt&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">  event.</span><span style="color:#6F42C1;">getModifierState</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Meta&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面代码表示，只要<code>Control</code>、<code>Alt</code>、<code>Meta</code>里面，同时按下任意两个或两个以上的键就返回。</p>`,39),t=[l];function p(c,r,d,i,y,E){return a(),s("div",null,t)}const v=e(n,[["render",p]]);export{b as __pageData,v as default};
