import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.681fc4ae.js";const I=JSON.parse('{"title":"mktemp 命令，trap 命令","description":"","frontmatter":{},"headers":[],"relativePath":"bash/mktemp.md","filePath":"bash/mktemp.md"}'),l={name:"bash/mktemp.md"},o=p(`<h1 id="mktemp-命令-trap-命令" tabindex="-1">mktemp 命令，trap 命令 <a class="header-anchor" href="#mktemp-命令-trap-命令" aria-label="Permalink to &quot;mktemp 命令，trap 命令&quot;">​</a></h1><p>Bash 脚本有时需要创建临时文件或临时目录。常见的做法是，在<code>/tmp</code>目录里面创建文件或目录，这样做有很多弊端，使用<code>mktemp</code>命令是最安全的做法。</p><h2 id="临时文件的安全问题" tabindex="-1">临时文件的安全问题 <a class="header-anchor" href="#临时文件的安全问题" aria-label="Permalink to &quot;临时文件的安全问题&quot;">​</a></h2><p>直接创建临时文件，尤其在<code>/tmp</code>目录里面，往往会导致安全问题。</p><p>首先，<code>/tmp</code>目录是所有人可读写的，任何用户都可以往该目录里面写文件。创建的临时文件也是所有人可读的。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">touch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/tmp/info.txt</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-l</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/tmp/info.txt</span></span>
<span class="line"><span style="color:#B392F0;">-rw-r--r--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ruanyf</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ruanyf</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12</span><span style="color:#9ECBFF;">月</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">28</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">17</span><span style="color:#9ECBFF;">:12</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/tmp/info.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">touch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/tmp/info.txt</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-l</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/tmp/info.txt</span></span>
<span class="line"><span style="color:#6F42C1;">-rw-r--r--</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ruanyf</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ruanyf</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span><span style="color:#032F62;">月</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">28</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">17</span><span style="color:#032F62;">:12</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/tmp/info.txt</span></span></code></pre></div><p>上面命令在<code>/tmp</code>目录直接创建文件，该文件默认是所有人可读的。</p><p>其次，如果攻击者知道临时文件的文件名，他可以创建符号链接，链接到临时文件，可能导致系统运行异常。攻击者也可能向脚本提供一些恶意数据。因此，临时文件最好使用不可预测、每次都不一样的文件名，防止被利用。</p><p>最后，临时文件使用完毕，应该删除。但是，脚本意外退出时，往往会忽略清理临时文件。</p><p>生成临时文件应该遵循下面的规则。</p><blockquote><ul><li>创建前检查文件是否已经存在。</li><li>确保临时文件已成功创建。</li><li>临时文件必须有权限的限制。</li><li>临时文件要使用不可预测的文件名。</li><li>脚本退出时，要删除临时文件（使用<code>trap</code>命令）。</li></ul></blockquote><h2 id="mktemp-命令的用法" tabindex="-1">mktemp 命令的用法 <a class="header-anchor" href="#mktemp-命令的用法" aria-label="Permalink to &quot;mktemp 命令的用法&quot;">​</a></h2><p><code>mktemp</code>命令就是为安全创建临时文件而设计的。虽然在创建临时文件之前，它不会检查临时文件是否存在，但是它支持唯一文件名和清除机制，因此可以减轻安全攻击的风险。</p><p>直接运行<code>mktemp</code>命令，就能生成一个临时文件。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mktemp</span></span>
<span class="line"><span style="color:#B392F0;">/tmp/tmp.4GcsWSG4vj</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-l</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/tmp/tmp.4GcsWSG4vj</span></span>
<span class="line"><span style="color:#B392F0;">-rw-------</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ruanyf</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ruanyf</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12</span><span style="color:#9ECBFF;">月</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">28</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12</span><span style="color:#9ECBFF;">:49</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/tmp/tmp.4GcsWSG4vj</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mktemp</span></span>
<span class="line"><span style="color:#6F42C1;">/tmp/tmp.4GcsWSG4vj</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-l</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/tmp/tmp.4GcsWSG4vj</span></span>
<span class="line"><span style="color:#6F42C1;">-rw-------</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ruanyf</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ruanyf</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span><span style="color:#032F62;">月</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">28</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span><span style="color:#032F62;">:49</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/tmp/tmp.4GcsWSG4vj</span></span></code></pre></div><p>上面命令中，<code>mktemp</code>命令生成的临时文件名是随机的，而且权限是只有用户本人可读写。</p><p>Bash 脚本使用<code>mktemp</code>命令的用法如下。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">TMPFILE</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">mktemp</span><span style="color:#9ECBFF;">)</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Our temp file is </span><span style="color:#E1E4E8;">$TMPFILE</span><span style="color:#9ECBFF;">&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">TMPFILE</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">mktemp</span><span style="color:#032F62;">)</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Our temp file is </span><span style="color:#24292E;">$TMPFILE</span><span style="color:#032F62;">&quot;</span></span></code></pre></div><p>为了确保临时文件创建成功，<code>mktemp</code>命令后面最好使用 OR 运算符（<code>||</code>），保证创建失败时退出脚本。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">TMPFILE</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">mktemp</span><span style="color:#9ECBFF;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">exit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Our temp file is </span><span style="color:#E1E4E8;">$TMPFILE</span><span style="color:#9ECBFF;">&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">TMPFILE</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">mktemp</span><span style="color:#032F62;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">exit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Our temp file is </span><span style="color:#24292E;">$TMPFILE</span><span style="color:#032F62;">&quot;</span></span></code></pre></div><p>为了保证脚本退出时临时文件被删除，可以使用<code>trap</code>命令指定退出时的清除操作。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">trap</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;rm -f &quot;$TMPFILE&quot;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">EXIT</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">TMPFILE</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">mktemp</span><span style="color:#9ECBFF;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">exit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Our temp file is </span><span style="color:#E1E4E8;">$TMPFILE</span><span style="color:#9ECBFF;">&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">trap</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;rm -f &quot;$TMPFILE&quot;&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">EXIT</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">TMPFILE</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">mktemp</span><span style="color:#032F62;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">exit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Our temp file is </span><span style="color:#24292E;">$TMPFILE</span><span style="color:#032F62;">&quot;</span></span></code></pre></div><h2 id="mktemp-命令的参数" tabindex="-1">mktemp 命令的参数 <a class="header-anchor" href="#mktemp-命令的参数" aria-label="Permalink to &quot;mktemp 命令的参数&quot;">​</a></h2><p><code>-d</code>参数可以创建一个临时目录。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mktemp</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span></span>
<span class="line"><span style="color:#B392F0;">/tmp/tmp.Wcau5UjmN6</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mktemp</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span></span>
<span class="line"><span style="color:#6F42C1;">/tmp/tmp.Wcau5UjmN6</span></span></code></pre></div><p><code>-p</code>参数可以指定临时文件所在的目录。默认是使用<code>$TMPDIR</code>环境变量指定的目录，如果这个变量没设置，那么使用<code>/tmp</code>目录。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mktemp</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/ruanyf/</span></span>
<span class="line"><span style="color:#B392F0;">/home/ruanyf/tmp.FOKEtvs2H3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mktemp</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/ruanyf/</span></span>
<span class="line"><span style="color:#6F42C1;">/home/ruanyf/tmp.FOKEtvs2H3</span></span></code></pre></div><p><code>-t</code>参数可以指定临时文件的文件名模板，模板的末尾必须至少包含三个连续的<code>X</code>字符，表示随机字符，建议至少使用六个<code>X</code>。默认的文件名模板是<code>tmp.</code>后接十个随机字符。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mktemp</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-t</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mytemp.XXXXXXX</span></span>
<span class="line"><span style="color:#B392F0;">/tmp/mytemp.yZ1HgZV</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mktemp</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-t</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mytemp.XXXXXXX</span></span>
<span class="line"><span style="color:#6F42C1;">/tmp/mytemp.yZ1HgZV</span></span></code></pre></div><h2 id="trap-命令" tabindex="-1">trap 命令 <a class="header-anchor" href="#trap-命令" aria-label="Permalink to &quot;trap 命令&quot;">​</a></h2><p><code>trap</code>命令用来在 Bash 脚本中响应系统信号。</p><p>最常见的系统信号就是 SIGINT（中断），即按 Ctrl + C 所产生的信号。<code>trap</code>命令的<code>-l</code>参数，可以列出所有的系统信号。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">trap</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-l</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;">) SIGHUP	 2) SIGINT	 3) SIGQUIT	 4) SIGILL	 5) SIGTRAP</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">6</span><span style="color:#E1E4E8;">) SIGABRT	 7) SIGBUS	 8) SIGFPE	 9) SIGKILL	10) SIGUSR1</span></span>
<span class="line"><span style="color:#B392F0;">11</span><span style="color:#E1E4E8;">) SIGSEGV	12) SIGUSR2	13) SIGPIPE	14) SIGALRM	15) SIGTERM</span></span>
<span class="line"><span style="color:#B392F0;">16</span><span style="color:#E1E4E8;">) SIGSTKFLT	17) SIGCHLD	18) SIGCONT	19) SIGSTOP	20) SIGTSTP</span></span>
<span class="line"><span style="color:#B392F0;">21</span><span style="color:#E1E4E8;">) SIGTTIN	22) SIGTTOU	23) SIGURG	24) SIGXCPU	25) SIGXFSZ</span></span>
<span class="line"><span style="color:#B392F0;">26</span><span style="color:#E1E4E8;">) SIGVTALRM	27) SIGPROF	28) SIGWINCH	29) SIGIO	30) SIGPWR</span></span>
<span class="line"><span style="color:#B392F0;">31</span><span style="color:#E1E4E8;">) SIGSYS	34) SIGRTMIN	35) SIGRTMIN+1	36) SIGRTMIN+2	37) SIGRTMIN+3</span></span>
<span class="line"><span style="color:#B392F0;">38</span><span style="color:#E1E4E8;">) SIGRTMIN+4	39) SIGRTMIN+5	40) SIGRTMIN+6	41) SIGRTMIN+7	42) SIGRTMIN+8</span></span>
<span class="line"><span style="color:#B392F0;">43</span><span style="color:#E1E4E8;">) SIGRTMIN+9	44) SIGRTMIN+10	45) SIGRTMIN+11	46) SIGRTMIN+12	47) SIGRTMIN+13</span></span>
<span class="line"><span style="color:#B392F0;">48</span><span style="color:#E1E4E8;">) SIGRTMIN+14	49) SIGRTMIN+15	50) SIGRTMAX-14	51) SIGRTMAX-13	52) SIGRTMAX-12</span></span>
<span class="line"><span style="color:#B392F0;">53</span><span style="color:#E1E4E8;">) SIGRTMAX-11	54) SIGRTMAX-10	55) SIGRTMAX-9	56) SIGRTMAX-8	57) SIGRTMAX-7</span></span>
<span class="line"><span style="color:#B392F0;">58</span><span style="color:#E1E4E8;">) SIGRTMAX-6	59) SIGRTMAX-5	60) SIGRTMAX-4	61) SIGRTMAX-3	62) SIGRTMAX-2</span></span>
<span class="line"><span style="color:#B392F0;">63</span><span style="color:#E1E4E8;">) SIGRTMAX-1	64) SIGRTMAX</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">trap</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-l</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">1</span><span style="color:#24292E;">) SIGHUP	 2) SIGINT	 3) SIGQUIT	 4) SIGILL	 5) SIGTRAP</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">6</span><span style="color:#24292E;">) SIGABRT	 7) SIGBUS	 8) SIGFPE	 9) SIGKILL	10) SIGUSR1</span></span>
<span class="line"><span style="color:#6F42C1;">11</span><span style="color:#24292E;">) SIGSEGV	12) SIGUSR2	13) SIGPIPE	14) SIGALRM	15) SIGTERM</span></span>
<span class="line"><span style="color:#6F42C1;">16</span><span style="color:#24292E;">) SIGSTKFLT	17) SIGCHLD	18) SIGCONT	19) SIGSTOP	20) SIGTSTP</span></span>
<span class="line"><span style="color:#6F42C1;">21</span><span style="color:#24292E;">) SIGTTIN	22) SIGTTOU	23) SIGURG	24) SIGXCPU	25) SIGXFSZ</span></span>
<span class="line"><span style="color:#6F42C1;">26</span><span style="color:#24292E;">) SIGVTALRM	27) SIGPROF	28) SIGWINCH	29) SIGIO	30) SIGPWR</span></span>
<span class="line"><span style="color:#6F42C1;">31</span><span style="color:#24292E;">) SIGSYS	34) SIGRTMIN	35) SIGRTMIN+1	36) SIGRTMIN+2	37) SIGRTMIN+3</span></span>
<span class="line"><span style="color:#6F42C1;">38</span><span style="color:#24292E;">) SIGRTMIN+4	39) SIGRTMIN+5	40) SIGRTMIN+6	41) SIGRTMIN+7	42) SIGRTMIN+8</span></span>
<span class="line"><span style="color:#6F42C1;">43</span><span style="color:#24292E;">) SIGRTMIN+9	44) SIGRTMIN+10	45) SIGRTMIN+11	46) SIGRTMIN+12	47) SIGRTMIN+13</span></span>
<span class="line"><span style="color:#6F42C1;">48</span><span style="color:#24292E;">) SIGRTMIN+14	49) SIGRTMIN+15	50) SIGRTMAX-14	51) SIGRTMAX-13	52) SIGRTMAX-12</span></span>
<span class="line"><span style="color:#6F42C1;">53</span><span style="color:#24292E;">) SIGRTMAX-11	54) SIGRTMAX-10	55) SIGRTMAX-9	56) SIGRTMAX-8	57) SIGRTMAX-7</span></span>
<span class="line"><span style="color:#6F42C1;">58</span><span style="color:#24292E;">) SIGRTMAX-6	59) SIGRTMAX-5	60) SIGRTMAX-4	61) SIGRTMAX-3	62) SIGRTMAX-2</span></span>
<span class="line"><span style="color:#6F42C1;">63</span><span style="color:#24292E;">) SIGRTMAX-1	64) SIGRTMAX</span></span></code></pre></div><p><code>trap</code>的命令格式如下。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">trap</span><span style="color:#E1E4E8;"> [动作] [信号1] [信号2] ...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">trap</span><span style="color:#24292E;"> [动作] [信号1] [信号2] ...</span></span></code></pre></div><p>上面代码中，“动作”是一个 Bash 命令，“信号”常用的有以下几个。</p><blockquote><ul><li>HUP：编号1，脚本与所在的终端脱离联系。</li><li>INT：编号2，用户按下 Ctrl + C，意图让脚本终止运行。</li><li>QUIT：编号3，用户按下 Ctrl + 斜杠，意图退出脚本。</li><li>KILL：编号9，该信号用于杀死进程。</li><li>TERM：编号15，这是<code>kill</code>命令发出的默认信号。</li><li>EXIT：编号0，这不是系统信号，而是 Bash 脚本特有的信号，不管什么情况，只要退出脚本就会产生。</li></ul></blockquote><p><code>trap</code>命令响应<code>EXIT</code>信号的写法如下。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">trap</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;rm -f &quot;$TMPFILE&quot;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">EXIT</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">trap</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;rm -f &quot;$TMPFILE&quot;&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">EXIT</span></span></code></pre></div><p>上面命令中，脚本遇到<code>EXIT</code>信号时，就会执行<code>rm -f &quot;$TMPFILE&quot;</code>。</p><p>trap 命令的常见使用场景，就是在 Bash 脚本中指定退出时执行的清理命令。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">trap</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;rm -f &quot;$TMPFILE&quot;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">EXIT</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">TMPFILE</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">mktemp</span><span style="color:#9ECBFF;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">exit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#B392F0;">ls</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> $TMPFILE</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-qi</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;kernel&quot;</span><span style="color:#E1E4E8;"> $TMPFILE; </span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;find&#39;</span></span>
<span class="line"><span style="color:#F97583;">fi</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">trap</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;rm -f &quot;$TMPFILE&quot;&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">EXIT</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">TMPFILE</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">mktemp</span><span style="color:#032F62;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">exit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#6F42C1;">ls</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> $TMPFILE</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-qi</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;kernel&quot;</span><span style="color:#24292E;"> $TMPFILE; </span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;find&#39;</span></span>
<span class="line"><span style="color:#D73A49;">fi</span></span></code></pre></div><p>上面代码中，不管是脚本正常执行结束，还是用户按 Ctrl + C 终止，都会产生<code>EXIT</code>信号，从而触发删除临时文件。</p><p>注意，<code>trap</code>命令必须放在脚本的开头。否则，它上方的任何命令导致脚本退出，都不会被它捕获。</p><p>如果<code>trap</code>需要触发多条命令，可以封装一个 Bash 函数。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">egress</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">command1</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">command2</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">command3</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">trap</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">egress</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">EXIT</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">egress</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">command1</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">command2</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">command3</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">trap</span><span style="color:#24292E;"> </span><span style="color:#032F62;">egress</span><span style="color:#24292E;"> </span><span style="color:#032F62;">EXIT</span></span></code></pre></div><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ul><li><a href="https://www.putorius.net/working-with-temporary-files.html" target="_blank" rel="noreferrer">Working with Temporary Files and Directories in Shell Scripts</a>, Steven Vona</li><li><a href="https://www.putorius.net/using-trap-to-exit-bash-scripts-cleanly.html" target="_blank" rel="noreferrer">Using Trap to Exit Bash Scripts Cleanly</a></li><li><a href="https://mywiki.wooledge.org/SignalTrap" target="_blank" rel="noreferrer">Sending and Trapping Signals</a></li></ul>`,48),e=[o];function t(c,r,y,E,i,F){return a(),n("div",null,e)}const h=s(l,[["render",t]]);export{I as __pageData,h as default};
