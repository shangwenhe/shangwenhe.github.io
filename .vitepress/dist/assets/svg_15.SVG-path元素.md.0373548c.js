import{_ as a,o as l,c as o,a as n,Q as s,k as t}from"./chunks/framework.681fc4ae.js";const f=JSON.parse('{"title":"SVG path元素","description":"","frontmatter":{},"headers":[],"relativePath":"svg/15.SVG-path元素.md","filePath":"svg/15.SVG-path元素.md"}'),p={name:"svg/15.SVG-path元素.md"},e=s('<h1 id="svg-path元素" tabindex="-1">SVG path元素 <a class="header-anchor" href="#svg-path元素" aria-label="Permalink to &quot;SVG path元素&quot;">​</a></h1><hr><blockquote></blockquote><ul><li><a href="#svg-path教程视频版">SVG Path教程视频版</a></li><li><a href="#path示例">Path示例</a></li><li><a href="#设置和移动画笔">设置和移动画笔</a></li><li><a href="#线条">线条</a></li><li><a href="#移动虚拟画笔绘图">移动虚拟画笔绘图</a></li><li><a href="#弧线">弧线</a></li><li><a href="#二次贝塞尔曲线">二次贝塞尔曲线</a></li><li><a href="#三次贝塞尔曲线">三次贝塞尔曲线</a></li><li><a href="#闭合路径">闭合路径</a></li><li><a href="#组合命令">组合命令</a></li><li><a href="#填充路径">填充路径</a></li><li><a href="#标记">标记</a></li><li><a href="#符号缩写">符号缩写</a></li><li><a href="#路径命令">路径命令</a></li></ul><p>SVG<code>&lt;path&gt;</code>元素用于绘制组合线条、弧线、曲线等填充或非填充的高级形状。<code>&lt;path&gt;</code>元素可能是所有SVG形状中最高级功能最多的形状。它可能也是最难掌握的元素。</p><h2 id="svg-path教程视频版" tabindex="-1">SVG Path教程视频版 <a class="header-anchor" href="#svg-path教程视频版" aria-label="Permalink to &quot;SVG Path教程视频版&quot;">​</a></h2><p>视频版教程如下：</p>',7),c=t("iframe",{width:"560",height:"315",src:"//www.youtube.com/embed/k6TWzfLGAKo?list=PLL8woMHwr36F2tCFnWTbVBQAGQ6nTcXOO",frameborder:"0",allowfullscreen:""},null,-1),r=s(`<h2 id="path示例" tabindex="-1">Path示例 <a class="header-anchor" href="#path示例" aria-label="Permalink to &quot;Path示例&quot;">​</a></h2><p>让我们从一个简单的SVG<code>&lt;path&gt;</code>示例开始：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">svg</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">xmlns</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://www.w3.org/2000/svg&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">xmlns:xlink</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://www.w3.org/1999/xlink&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;M50,50</span></span>
<span class="line"><span style="color:#9ECBFF;">             A30,30 0 0,1 35,20</span></span>
<span class="line"><span style="color:#9ECBFF;">             L100,100</span></span>
<span class="line"><span style="color:#9ECBFF;">             M110,110</span></span>
<span class="line"><span style="color:#9ECBFF;">             L100,0&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;stroke:#660000; fill:none;&quot;</span><span style="color:#E1E4E8;">/&gt;    </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">svg</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">svg</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xmlns</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.w3.org/2000/svg&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">xmlns:xlink</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.w3.org/1999/xlink&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">path</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">d</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;M50,50</span></span>
<span class="line"><span style="color:#032F62;">             A30,30 0 0,1 35,20</span></span>
<span class="line"><span style="color:#032F62;">             L100,100</span></span>
<span class="line"><span style="color:#032F62;">             M110,110</span></span>
<span class="line"><span style="color:#032F62;">             L100,0&quot;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">style</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;stroke:#660000; fill:none;&quot;</span><span style="color:#24292E;">/&gt;    </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">svg</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>下面是最终结果图片：</p><svg width="320" height="70"><path d="M50,50 A30,30 0 0,1 35,20 L100,100 M110,110 L100,0" style="stroke:#660000;fill:none;"></path></svg><p>注意看图像如何包含一个圆弧和两条线段，已经第二条线如何不与第一个圆弧和线连接。</p><p><code>&lt;path&gt;</code>元素的所有绘图都在<code>d</code>属性中指定。<code>d</code>属性包含绘制命令。上面的例子中，M发出“移至”命令，A发出“弧”命令，L发出“线段”命令。这些命令都作用在一个“虚拟画笔”。这支笔可以移动，绘制形状等。</p><h2 id="设置和移动画笔" tabindex="-1">设置和移动画笔 <a class="header-anchor" href="#设置和移动画笔" aria-label="Permalink to &quot;设置和移动画笔&quot;">​</a></h2><p><code>&lt;path&gt;</code>元素的<code>d</code>属性中的第一个绘图命令应始终是移动命令。在你绘制任何东西之前，你都应该将虚拟画笔移动到某个位置。可以通过<code>M</code>命令做到这一点。示例代码如下：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">svg</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">xmlns</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://www.w3.org/2000/svg&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">xmlns:xlink</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://www.w3.org/1999/xlink&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;M50,50&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;stroke:#660000; fill:none;&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">svg</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">svg</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xmlns</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.w3.org/2000/svg&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">xmlns:xlink</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.w3.org/1999/xlink&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">path</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">d</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;M50,50&quot;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">style</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;stroke:#660000; fill:none;&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">svg</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>上述例子中，将虚拟画笔移动到了点50,50处。下一个绘制命令将从这个点开始。</p><h2 id="线条" tabindex="-1">线条 <a class="header-anchor" href="#线条" aria-label="Permalink to &quot;线条&quot;">​</a></h2><p>使用<code>&lt;path&gt;</code>元素绘制一条线可能是最简单的命令。绘制线条使用<code>L</code>和<code>l</code>（小写L）命令完成。示例如下：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">svg</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">xmlns</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://www.w3.org/2000/svg&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">xmlns:xlink</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://www.w3.org/1999/xlink&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;M50,50</span></span>
<span class="line"><span style="color:#9ECBFF;">             L100,100&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;stroke:#660000; fill:none;&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">svg</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">svg</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xmlns</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.w3.org/2000/svg&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">xmlns:xlink</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.w3.org/1999/xlink&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">path</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">d</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;M50,50</span></span>
<span class="line"><span style="color:#032F62;">             L100,100&quot;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">style</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;stroke:#660000; fill:none;&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">svg</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>这个例子绘制了一条从点50,50（M命令的点）到点100,100（L命令的点）的线段。结果如下图：</p><svg width="500" height="100"><path d="M50,50
            L100,100" style="stroke:#660000;fill:none;"></path></svg>`,16),y=s(`<p>如果虚拟画笔定位在<code>50,50</code>点，并且你使用了<code>l100,100</code>命令，线段将绘制到点<code>50+100,50+100 = 150,150</code>。如果使用<code>L100,100</code>命令，线段将被精确地绘制到点<code>100,100</code>，而不会考虑虚拟画笔的位置。</p><h2 id="移动虚拟画笔绘图" tabindex="-1">移动虚拟画笔绘图 <a class="header-anchor" href="#移动虚拟画笔绘图" aria-label="Permalink to &quot;移动虚拟画笔绘图&quot;">​</a></h2><p>路径形状始终会从虚拟画笔的最后一个点绘制到一个新点。每一个绘制命令都带有一个终点。执行命令后，虚拟画笔将位于该绘图命令的结束点。下一个绘图命令将从该点开始。</p><h2 id="弧线" tabindex="-1">弧线 <a class="header-anchor" href="#弧线" aria-label="Permalink to &quot;弧线&quot;">​</a></h2><p>对<code>&lt;path&gt;</code>元素使用<code>A</code>和<code>a</code>命令可以绘制圆弧。与线段一样，大写命令（<code>A</code>）对其终点使用绝对坐标，而小写名（<code>a</code>）使用相对坐标（相对于起点）。示例如下：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">svg</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">xmlns</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://www.w3.org/2000/svg&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">xmlns:xlink</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://www.w3.org/1999/xlink&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;M50,50</span></span>
<span class="line"><span style="color:#9ECBFF;">             A30,50 0 0,1 100,100&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;stroke:#660000; fill:none;&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">svg</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">svg</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xmlns</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.w3.org/2000/svg&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">xmlns:xlink</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.w3.org/1999/xlink&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">path</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">d</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;M50,50</span></span>
<span class="line"><span style="color:#032F62;">             A30,50 0 0,1 100,100&quot;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">style</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;stroke:#660000; fill:none;&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">svg</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>结果图片如下：</p><svg width="500" height="100"><path d="M50,50
         A30,50 0 0,1 100,100&lt;/b&gt;" style="stroke:#660000;fill:none;"></path></svg><p>这个例子绘制了一条从点<code>50,50</code>到点<code>100,100</code>（<code>A</code>命令最终指定）的圆弧。</p><p>圆弧的半径有<code>A</code>命令上的前两个参数指定。第一个参数是<code>rx</code>（x方向上的半径），第二个参数是<code>ry</code>（y方向上的半径）。将<code>rx</code>和<code>ry</code>设置为相同的值会生成一个圆形的圆弧。将<code>rx</code>和<code>ry</code>设置为不同的值会生成一个椭圆的圆弧。上面的例子中，<code>rx</code>被设置为<code>30</code>，<code>ry</code>被设置为<code>50</code>。</p><p><code>A</code>命令上的第三个参数是<code>x-axis-rotation</code>。这将设置相对于正常x轴旋转一定角度的弧的x轴。上面的例子中<code>x-axis-rotation</code>被设置为<code>0</code>。大部分情况下，你不需要改变这个参数。</p><p>第四和第五个参数分别是<code>large-arc-flag</code>和<code>sweep-flag</code>。<code>large-arc-flag</code>参数决定了绘制满足起点、终点、<code>rx</code>和<code>ry</code>的大圆弧还是小圆弧。下面一个例子中，绘制了4个圆弧，每个圆弧带有<code>large-arc-flag</code>和<code>sweep-flag</code>的不同组合：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;M40,20 A30,30 0 0,0 60,70&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;stroke: #cccc00; stroke-width:1; fill:none;&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;M40,20 A30,30 0 1,0 60,70&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;stroke: #ff0000; stroke-width:2; fill:none;&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;M40,20 A30,30 0 1,1 60,70&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;stroke: #00ff00; stroke-width:3; fill:none;&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;M40,20 A30,30 0 0,1 60,70&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;stroke: #0000ff; stroke-width:4; fill:none;&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">path</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">d</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;M40,20 A30,30 0 0,0 60,70&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;stroke: #cccc00; stroke-width:1; fill:none;&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">path</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">path</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">d</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;M40,20 A30,30 0 1,0 60,70&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;stroke: #ff0000; stroke-width:2; fill:none;&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">path</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">path</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">d</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;M40,20 A30,30 0 1,1 60,70&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;stroke: #00ff00; stroke-width:3; fill:none;&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">path</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">path</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">d</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;M40,20 A30,30 0 0,1 60,70&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;stroke: #0000ff; stroke-width:4; fill:none;&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">path</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>结果如下：</p><svg width="500" height="120"><path d="M40,20     A30,30 0 0,0 60,70" style="stroke:#cccc00;stroke-width:1;fill:none;"></path><path d="M40,20     A30,30 0 1,0 60,70" style="stroke:#ff0000;stroke-width:2;fill:none;"></path><path d="M40,20     A30,30 0 1,1 60,70" style="stroke:#00ff00;stroke-width:3;fill:none;"></path><path d="M40,20     A30,30 0 0,1 60,70" style="stroke:#0000ff;stroke-width:4;fill:none;"></path></svg><p>四个不同的圆弧都是从点<code>40,20</code>绘制到点<code>60,70</code>。一个长圆弧、一个小圆弧、以及它们两个的镜像。<code>large-arc-flag</code>决定了绘制大圆弧还是小圆弧。<code>sweep-flag</code>决定了圆弧是否为从起点到终点的镜像。其实，<code>sweep-flag</code>控制了圆弧绘制的方向（顺时针或逆时针），这就导致了“镜像”效果。</p><p>绘制的第一个圆弧是黄色弧。<code>large-arc-flag</code>被设置为0表示将绘制较小的弧。<code>sweep-flag</code>也被设置为0表示圆弧非镜像版。下面是一个黄色圆弧：</p><svg width="500" height="120"><path d="M40,20     A30,30 0 0,0 60,70" style="stroke:#cccc00;stroke-width:2;fill:none;"></path></svg><p>第二个圆弧是红色弧。<code>large-arc-flag</code>被设置为1表示绘制从点<code>40,20</code>到点<code>60,70</code>之间的两个可能的圆弧中较大的那个。下面将黄色和红色圆弧绘制在一起说明他们的区别：</p><svg width="500" height="120"><path d="M40,20     A30,30 0 0,0 60,70" style="stroke:#cccc00;stroke-width:2;fill:none;"></path><pre><code>&lt;path d=&quot;M40,20     A30,30 0 1,0 60,70&quot; style=&quot;stroke: #ff0000; stroke-width:2; fill:none;&quot;&gt;&lt;/path&gt;
</code></pre></svg><p>绿色和蓝色圆弧（从前面例子中的所有四个圆弧看出）与黄色和红色圆弧相同，只是它们的<code>sweep-flag</code>被设置为1。这就意味着，它们将从起点到终点的轴上绘制镜像版的弧。</p><h2 id="二次贝塞尔曲线" tabindex="-1">二次贝塞尔曲线 <a class="header-anchor" href="#二次贝塞尔曲线" aria-label="Permalink to &quot;二次贝塞尔曲线&quot;">​</a></h2><p>也可以使用<code>&lt;path&gt;</code>元素绘制二次贝塞尔曲线。可以通过<code>Q</code>和<code>q</code>命令完成绘制二次贝塞尔曲线。和线段一样，大写命令（<code>Q</code>）使用绝对坐标，小写命令（<code>q</code>）使用相对坐标（相对于起点）。下面是一个简单的二次曲线例子：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;M50,50 Q50,100 100,100&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;stroke: #006666; fill:none;&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">path</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">d</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;M50,50 Q50,100 100,100&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">style</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;stroke: #006666; fill:none;&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div><p>结果图片如下：</p><svg width="500" height="150"><path d="M50,50 Q50,200 100,100" style="stroke:#006666;fill:none;"></path></svg><p>该示例从点<code>50,50</code>到点<code>100,100</code>绘制了一条二次贝塞尔曲线，控制点为<code>50,200</code>。控制点是<code>Q</code>命令上设置的前两个参数。</p><p>控制点就像磁铁一样拉动曲线。曲线上的点越接近控制点，控制点拉入越多，意味着更接近控制点。下面是在图像上绘制控制点的更多示例：</p><svg width="500" height="210"><path d="M50,50 Q50,75 100,100" style="stroke:#006666;fill:none;"></path><circle cx="50" cy="75" r="2" style="fill:#0000ff;"></circle><path d="M200,50 Q200,100 250,100" style="stroke:#006666;fill:none;"></path><circle cx="200" cy="100" r="2" style="fill:#0000ff;"></circle><path d="M350,50 Q350,150  400,100" style="stroke:#006666;fill:none;"></path><circle cx="350" cy="150" r="2" style="fill:#0000ff;"></circle></svg><p>事实上，如果你从起点到控制点绘制一条线，再从控制点到终点绘制另一条线，那么这两条线的中点之间的连线将是曲线的切线。如图所示：</p><svg width="500" height="175"><line x1="50" y1="50" x2="50" y2="150" style="stroke:#000000;stroke-width:1;"></line><line x1="50" y1="150" x2="200" y2="100" style="stroke:#000000;stroke-width:1;"></line><line x1="50" y1="100" x2="125" y2="125" style="stroke:#000000;stroke-width:1;"></line><path d="M50,50 Q50,150  200,100" style="stroke:#00cc00;stroke-width:2;fill:none;"></path><circle cx="50" cy="150" r="3" style="fill:#0000ff;"></circle></svg><h2 id="三次贝塞尔曲线" tabindex="-1">三次贝塞尔曲线 <a class="header-anchor" href="#三次贝塞尔曲线" aria-label="Permalink to &quot;三次贝塞尔曲线&quot;">​</a></h2><p>使用<code>C</code>和<code>c</code>命令绘制三次贝塞尔曲线。三次贝塞尔曲线类似于二次贝塞尔曲线，但是它有两个控制点。和线段一样，大写命令（<code>C</code>）使用其终点的绝对坐标，而小写命令（<code>c</code>）使用相对坐标（相对于起始点）。示例代码如下：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;M50,50 C75,80 125,20 150,50&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;stroke: #006666; fill:none;&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">path</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">d</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;M50,50 C75,80 125,20 150,50&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">style</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;stroke: #006666; fill:none;&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div><p>下面是绘制了控制点的图像：</p><svg width="500" height="150"><path d="M50,50 C75,80 125,20 150,50" style="stroke:#006666;fill:none;"></path><circle cx="75" cy="80" r="2" style="fill:#0000ff;"></circle><circle cx="125" cy="20" r="2" style="fill:#0000ff;"></circle></svg><p>你可以使用三次贝塞尔曲线创建高级曲线。如下图几个例子：</p><svg width="500" height="125"><path d="M50,50 C10,100  190,100 150,50" style="stroke:#006666;fill:none;"></path><circle cx="10" cy="100" r="2" style="fill:#0000ff;"></circle><circle cx="190" cy="100" r="2" style="fill:#0000ff;"></circle><path d="M360,50 C310,10  490,90 440,50" style="stroke:#006666;fill:none;"></path><circle cx="310" cy="10" r="2" style="fill:#0000ff;"></circle><circle cx="490" cy="90" r="2" style="fill:#0000ff;"></circle></svg><h2 id="闭合路径" tabindex="-1">闭合路径 <a class="header-anchor" href="#闭合路径" aria-label="Permalink to &quot;闭合路径&quot;">​</a></h2><p><code>&lt;path&gt;</code>元素具有可用于闭合路径的快捷命令，意味着绘制一条从终点到起点的线段。闭合命令为<code>Z</code>（或者<code>z</code>，闭合路径的大小写命令没有区别）。示例如下：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;M50,50 L100,50 L100,100 Z&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;stroke: #006666; fill:none;&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">path</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">d</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;M50,50 L100,50 L100,100 Z&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">style</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;stroke: #006666; fill:none;&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div><p>下面是结果图片：</p><svg width="500" height="150"><path d="M50,50 L100,50 L100,100 Z" style="stroke:#006666;fill:none;"></path></svg><h2 id="组合命令" tabindex="-1">组合命令 <a class="header-anchor" href="#组合命令" aria-label="Permalink to &quot;组合命令&quot;">​</a></h2><p>你可以在同一个<code>&lt;path&gt;</code>元素中组合路径命令，代码如下：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;M100,100</span></span>
<span class="line"><span style="color:#9ECBFF;">         L150,100</span></span>
<span class="line"><span style="color:#9ECBFF;">         a50,25 0 0,0 150,100</span></span>
<span class="line"><span style="color:#9ECBFF;">         q50,-50 70,-170</span></span>
<span class="line"><span style="color:#9ECBFF;">         Z&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;stroke: #006666; fill: none;&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">path</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">d</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;M100,100</span></span>
<span class="line"><span style="color:#032F62;">         L150,100</span></span>
<span class="line"><span style="color:#032F62;">         a50,25 0 0,0 150,100</span></span>
<span class="line"><span style="color:#032F62;">         q50,-50 70,-170</span></span>
<span class="line"><span style="color:#032F62;">         Z&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">style</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;stroke: #006666; fill: none;&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div><p>这个例子绘制了一条直线、一个圆弧、一条二次贝塞尔曲线，并绘制了一条返回起始点的直线来闭合路径。结果如下图：</p><svg width="500" height="225"><path d="M100,100 L150,100 a50,25 0 0,0 150,100 q50,-50 70,-170 Z" style="stroke:#006666;fill:none;"></path></svg><h2 id="填充路径" tabindex="-1">填充路径 <a class="header-anchor" href="#填充路径" aria-label="Permalink to &quot;填充路径&quot;">​</a></h2><p>你可以使用CSS属性<code>fill</code>来填充路径，示例代码如下：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;M100,100 L150,100 L150,150  Z&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;stroke: #0000cc;</span></span>
<span class="line"><span style="color:#9ECBFF;">             stroke-width: 2px;</span></span>
<span class="line"><span style="color:#9ECBFF;">             fill  : #ccccff;&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">path</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">d</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;M100,100 L150,100 L150,150  Z&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">style</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;stroke: #0000cc;</span></span>
<span class="line"><span style="color:#032F62;">             stroke-width: 2px;</span></span>
<span class="line"><span style="color:#032F62;">             fill  : #ccccff;&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div><p>结果如图所示：</p><svg width="500" height="110"><path d="M50,50 L150,50 L150,100  Z" style="stroke:#0000cc;stroke-width:2px;fill:#ccccff;"></path></svg><p>可以发现图形内部用浅蓝色填充。</p><h2 id="标记" tabindex="-1">标记 <a class="header-anchor" href="#标记" aria-label="Permalink to &quot;标记&quot;">​</a></h2><p>你可以在<code>&lt;path&gt;</code>元素上使用标记。标记是位于路径的开始、中间和结束处的小符号，用来显示路径的方向。例如，在路径开始处的圆形或正方形，以及在结束处的箭头。</p><p>在<a href="./16.SVG-marker元素.html">marker元素</a>章节将会对标记作详细介绍。</p><h2 id="符号缩写" tabindex="-1">符号缩写 <a class="header-anchor" href="#符号缩写" aria-label="Permalink to &quot;符号缩写&quot;">​</a></h2><p>如果你需要多次使用相同的命令，可以省略命令字母，仅仅需要提供一组额外的参数。示例如下：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;M10,10   l100,0  0,50  -100,0  0,-50&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;stroke: #000000; fill:none;&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">path</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">d</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;M10,10   l100,0  0,50  -100,0  0,-50&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">style</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;stroke: #000000; fill:none;&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><p>此例子演示了如何将其他参数传递给<code>l</code>命令，如同<code>l</code>位于每组参数前面一样。这也适用于其他路径命令。结果图片如下：</p><svg width="500" height="100"><path d="M10,10   l100,0  0,50  -100,0  0,-50" style="stroke:#000000;fill:none;"></path></svg><h2 id="路径命令" tabindex="-1">路径命令 <a class="header-anchor" href="#路径命令" aria-label="Permalink to &quot;路径命令&quot;">​</a></h2><p>下面是SVG<code>path</code>元素中可能的命令的一个列表。每个命令由一个字母和一组数字（坐标等）组成，它们是该命令的参数。大写命令通常将坐标参数解释为绝对坐标。小写命令通常将坐标参数解释为当前虚拟画笔的相对位置。</p><table><thead><tr><th>命令</th><th>参数</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>M</td><td>x,y</td><td>移至</td><td>将虚拟画笔移动到指定点x,y处而不绘制图。</td></tr><tr><td>m</td><td>x,y</td><td>移至</td><td>将虚拟画笔移动至相对于其当前坐标的x,y处而不进行绘图操作。</td></tr><tr><td>L</td><td>x,y</td><td>线路</td><td>从虚拟画笔当前位置绘制一条到x,y点的直线。</td></tr><tr><td>l</td><td>x,y</td><td>线路</td><td>从虚拟画笔当前位置绘制一条到相对于画笔当前位置的x,y点的直线。</td></tr><tr><td>H</td><td>x</td><td>水平线</td><td>绘制一条到指定点（x坐标由参数指定，y坐标为虚拟画笔当前的纵坐标）的水平线。</td></tr><tr><td>h</td><td>x</td><td>水平线</td><td>绘制一条到指定点（x坐标为虚拟画笔当前横坐标+指定的x，y坐标为虚拟画笔当前的纵坐标）的水平线。</td></tr><tr><td>V</td><td>y</td><td>垂直线</td><td>绘制一条到指定点（x坐标为虚拟画笔当前横坐标，y坐标由参数指定）的垂直线。</td></tr><tr><td>v</td><td>y</td><td>垂直线</td><td>绘制一条到指定点（x坐标为虚拟画笔当前横坐标，y坐标为虚拟画笔当前的纵坐标+参数指定的值）的垂直线。</td></tr><tr><td>C</td><td>x1,y1 x2,y2 x,y</td><td>曲线</td><td>从画笔当前点到x,y点绘制一条三次贝塞尔曲线。x1,y1和x2,y2是曲线的开始和结束控制点，控制其如何弯曲。</td></tr><tr><td>c</td><td>x1,y1 x2,y2 x,y</td><td>曲线</td><td>与C相同，但是坐标点为相对于画笔坐标的位置。</td></tr><tr><td>S</td><td>x2,y2 x,y</td><td>平滑曲线缩写</td><td>从画笔位置到点x,y绘制一条三次贝塞尔曲线。x2,y2为结束控制点。开始控制点与前一条曲线的结束控制点相同。</td></tr><tr><td>s</td><td>x2,y2 x,y</td><td>平滑曲线缩写</td><td>与S相同，但是坐标点为相对于画笔坐标的位置。</td></tr><tr><td>Q</td><td>x1,y1 x,y</td><td>二次贝塞尔曲线</td><td>从画笔当前坐标到x,y点绘制一条二次贝塞尔曲线。x1,y1是控制曲线如何弯曲的控制点。</td></tr><tr><td>q</td><td>x1,y1 x,y</td><td>二次贝塞尔曲线</td><td>与Q相同，但是坐标点为相对于画笔坐标的位置。</td></tr><tr><td>T</td><td>x,y</td><td>平滑二次贝塞尔曲线缩写</td><td>从画笔位置到点x,y绘制一条三次贝塞尔曲线。控制点与所使用的的最后一个控制点相同。</td></tr><tr><td>t</td><td>x,y</td><td>平滑二次贝塞尔曲线缩写</td><td>与T相同，但是坐标点为相对于画笔坐标的位置。</td></tr><tr><td>A</td><td>rx,ry x-axis-rotation large-arc-flag,sweepflag x,y</td><td>椭圆弧</td><td>从当前点到x,y点绘制一条椭圆弧。rx和ry为椭圆在x和y方向上的半径。x-rotation确定圆弧围绕x轴旋转的角度。当rx和ry的值不同时，它才会有效果。large-arc-flag似乎没有被使用（可以为0或1）。值（0或1）都不会改变圆弧。</td></tr><tr><td>a</td><td>rx,ry x-axis-rotation large-arc-flag,sweepflag x,y</td><td>椭圆弧</td><td>与A相同，但是坐标点为相对于画笔坐标的位置。</td></tr><tr><td>Z</td><td></td><td>闭合路径</td><td>通过从当前点到第一个点绘制一条线来关闭路径。</td></tr><tr><td>z</td><td></td><td>闭合路径</td><td>通过从当前点到第一个点绘制一条线来关闭路径。</td></tr></tbody></table>`,65);function d(E,i,h,g,u,F){return l(),o("div",null,[e,c,r,n(" `L`和`l`命令之间的区别在于，大写版本（`L`）命令后跟的是一个绝对定位的点，而小写版本（`l`）命令后跟的是一个相对定位的点。相对点是虚拟画笔开始绘制线之前的点加上`l`命令后跟的坐标。 "),y])}const k=a(p,[["render",d]]);export{f as __pageData,k as default};
