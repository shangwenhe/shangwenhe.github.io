import{_ as e,o as a,c as s,Q as o}from"./chunks/framework.681fc4ae.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"npm/command/npm-link.md","filePath":"npm/command/npm-link.md"}'),l={name:"npm/command/npm-link.md"},n=o('<h2 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">link</span><span style="color:#E1E4E8;"> (in </span><span style="color:#9ECBFF;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dir</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">link</span><span style="color:#E1E4E8;"> [&lt;@scope&gt;/]</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">pkg</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">[@</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#79B8FF;">alias</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ln</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">link</span><span style="color:#24292E;"> (in </span><span style="color:#032F62;">package</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dir</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">link</span><span style="color:#24292E;"> [&lt;@scope&gt;/]</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">pkg</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[@</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">version</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#005CC5;">alias</span><span style="color:#24292E;">: </span><span style="color:#032F62;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ln</span></span></code></pre></div><h2 id="描述" tabindex="-1">描述 <a class="header-anchor" href="#描述" aria-label="Permalink to &quot;描述&quot;">​</a></h2><p>这对于安装您自己的东西很方便，这样您就可以对其进行工作并进行迭代测试，而无需不断重建。</p><p>包链接是一个两步过程。</p><p>首先，<code>npm link</code>在包文件夹中，将在全局文件夹中创建一个符号链接，该符号链接链接到执行命令的<code>{prefix}/lib/node_modules/&lt;package&gt;</code>包。<code>npm link</code>它还会将包中的任何 bin 链接到<code>{prefix}/bin/{name}</code>. 请注意，<code>npm link</code>使用全局前缀（请参阅 参考资料 获取<code>npm prefix -g</code>其值）。</p><p>接下来，在其他位置，将创建从全局安装到当前文件夹的<code>npm link package-name</code>符号链接。<code>package-name``node_modules/</code></p><p>请注意，<code>package-name</code>取自<code>package.json</code>，<em>而不是</em>目录名称。</p><p>包名称可以选择以范围为前缀。看<code>scope</code>。范围前面必须有 @ 符号，后面是斜杠。</p><p>为 创建 tarball 时<code>npm publish</code>，链接的包将通过解析符号链接“快照”到其当前状态（如果它们包含在<code>bundleDependencies</code>.</p><p>例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/projects/node-redis</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># go into the package directory</span></span>\n<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">link</span><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;"># creates global link</span></span>\n<span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/projects/node-bloggy</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;"># go into some other package directory.</span></span>\n<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">link</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">redis</span><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;"># link-install the package</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/projects/node-redis</span><span style="color:#24292E;">    </span><span style="color:#6A737D;"># go into the package directory</span></span>\n<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">link</span><span style="color:#24292E;">                    </span><span style="color:#6A737D;"># creates global link</span></span>\n<span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/projects/node-bloggy</span><span style="color:#24292E;">   </span><span style="color:#6A737D;"># go into some other package directory.</span></span>\n<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">link</span><span style="color:#24292E;"> </span><span style="color:#032F62;">redis</span><span style="color:#24292E;">              </span><span style="color:#6A737D;"># link-install the package</span></span></code></pre></div><p>现在，任何更改都<code>~/projects/node-redis</code>将反映在 中<code>~/projects/node-bloggy/node_modules/node-redis/</code>。请注意，链接应该指向包名称，而不是该包的目录名称。</p><p>您也可以将这两个步骤合二为一。例如，以更短的方式执行上述用例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/projects/node-bloggy</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># go into the dir of your main project</span></span>\n<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">link</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">../node-redis</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;"># link the dir of your dependency</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/projects/node-bloggy</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># go into the dir of your main project</span></span>\n<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">link</span><span style="color:#24292E;"> </span><span style="color:#032F62;">../node-redis</span><span style="color:#24292E;">     </span><span style="color:#6A737D;"># link the dir of your dependency</span></span></code></pre></div><p>第二行相当于：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">../node-redis</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">link</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">link</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">redis</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">../node-redis</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">link</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">link</span><span style="color:#24292E;"> </span><span style="color:#032F62;">redis</span></span></code></pre></div><p>也就是说，它首先创建一个全局链接，然后将全局安装目标链接到项目的<code>node_modules</code>文件夹中。</p><p>请注意，在这种情况下，您指的是目录名称，<code>node-redis</code>而不是包名称<code>redis</code>。</p><p>如果您的链接包有范围（请参阅<code>scope</code>），您的链接命令必须包含该范围，例如</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">link</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@myorg/privatepackage</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">link</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@myorg/privatepackage</span></span></code></pre></div><h2 id="caveat" tabindex="-1"><code>caveat</code> <a class="header-anchor" href="#caveat" aria-label="Permalink to &quot;`caveat`&quot;">​</a></h2><p><em>请注意，默认情况下不会</em>保存以这种方式链接的包依赖项<code>package.json</code>，因为假设目的是用链接代替常规非链接依赖项。否则，例如，如果您依赖于<code>redis@^3.0.1</code>, 并运行<code>npm link redis</code>，它会将依赖项替换<code>^3.0.1</code>为<code>file:../path/to/node-redis</code>，这可能是您不想要的！此外，如果项目中的其他用户或开发人员的文件夹设置与您的文件夹不完全相同，他们也会遇到问题。</p><p>如果您要添加<em>新的</em>依赖项作为链接，则应通过运行将其添加到相关元数据中<code>npm install &lt;dep&gt; --package-lock-only</code>。</p><p>如果您<em>想</em>将参考保存<code>file:</code>在您的<code>package.json</code>文件中<code>package-lock.json</code>，您可以<code>npm link &lt;dep&gt; --save</code>这样做。</p><h2 id="workspace-usage" tabindex="-1"><code>workspace-usage</code> <a class="header-anchor" href="#workspace-usage" aria-label="Permalink to &quot;`workspace-usage`&quot;">​</a></h2><p><code>npm link &lt;pkg&gt; --workspace &lt;name&gt;</code>将链接相关包作为指定工作空间的依赖项。<code>node_modules</code>请注意，如果不存在冲突的依赖项，它实际上可能链接到父项目的文件夹中。</p><p><code>npm link --workspace &lt;name&gt;</code>将创建到指定工作区的全局链接。</p><h2 id="configuration" tabindex="-1"><code>configuration</code> <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;`configuration`&quot;">​</a></h2><h2 id="save" tabindex="-1"><code>save</code> <a class="header-anchor" href="#save" aria-label="Permalink to &quot;`save`&quot;">​</a></h2><ul><li>Default: true</li><li>Type: Boolean</li></ul><p>将已安装的包作为依赖项保存到 package.json 文件中。</p><p>与该<code>npm rm</code>命令一起使用时，从 package.json 中删除依赖项。</p><h2 id="save-exact" tabindex="-1"><code>save-exact</code> <a class="header-anchor" href="#save-exact" aria-label="Permalink to &quot;`save-exact`&quot;">​</a></h2><ul><li>Default: false</li><li>Type: Boolean</li></ul><p>保存到 package.json 的依赖项将使用精确的版本进行配置，而不是使用 npm 的默认 semver 范围运算符。</p><h2 id="global" tabindex="-1"><code>global</code> <a class="header-anchor" href="#global" aria-label="Permalink to &quot;`global`&quot;">​</a></h2><ul><li>Default: false</li><li>Type: Boolean</li></ul><p>在“全局”模式下运行，以便将包安装到该<code>prefix</code>文件夹而不是当前工作目录中。有关行为差异的更多信息，请参阅<a href="https://docs.npmjs.com/cli/v7/configuring-npm/folders" target="_blank" rel="noreferrer">文件夹。</a></p><ul><li>软件包将安装到该<code>{prefix}/lib/node_modules</code>文件夹中，而不是当前工作目录中。</li><li>bin 文件链接到<code>{prefix}/bin</code></li><li>手册页链接到<code>{prefix}/share/man</code></li></ul><h2 id="global-style" tabindex="-1"><code>global-style</code> <a class="header-anchor" href="#global-style" aria-label="Permalink to &quot;`global-style`&quot;">​</a></h2><ul><li>Default: false</li><li>Type: Boolean</li></ul><p>使 npm 将包安装到本地<code>node_modules</code>文件夹中，其布局与全局文件夹使用的布局相同<code>node_modules</code>。只有您的直接依赖项才会显示，<code>node_modules</code>并且它们依赖的所有内容都将在其<code>node_modules</code>文件夹中展平。这显然会消除一些重复数据删除。如果与 一起使用<code>legacy-bundling</code>，<code>legacy-bundling</code>将是首选。</p><h2 id="legacy-bundling" tabindex="-1"><code>legacy-bundling</code> <a class="header-anchor" href="#legacy-bundling" aria-label="Permalink to &quot;`legacy-bundling`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>使 npm 安装该软件包，以便 1.4 之前的 npm 版本（例如 Node 0.8 中包含的版本）可以安装该软件包。这消除了所有自动重复数据删除。如果与<code>global-style</code>此选项一起使用将是首选。</p><h2 id="strict-peer-deps" tabindex="-1"><code>strict-peer-deps</code> <a class="header-anchor" href="#strict-peer-deps" aria-label="Permalink to &quot;`strict-peer-deps`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>如果设置为<code>true</code>，并且<code>--legacy-peer-deps</code>未设置，则<em>任何</em>冲突<code>peerDependencies</code>都将被视为安装失败，即使 npm 可以根据非对等依赖关系合理猜测适当的解决方案。</p><p>默认情况下，<code>peerDependencies</code>依赖关系图中深层的冲突将使用最近的非对等依赖关系规范来解决，即使这样做会导致某些包接收超出其包<code>peerDependencies</code>对象中设置的范围的对等依赖关系。</p><p>当执行此类和覆盖时，会打印一条警告，解释冲突和涉及的包。如果<code>--strict-peer-deps</code>设置了，则此警告将被视为失败。</p><h2 id="package-lock" tabindex="-1"><code>package-lock</code> <a class="header-anchor" href="#package-lock" aria-label="Permalink to &quot;`package-lock`&quot;">​</a></h2><ul><li>Default: true</li><li>Type: Boolean</li></ul><p>如果设置为 false，则<code>package-lock.json</code>安装时忽略文件。这也会阻止<em>写入</em> <code>package-lock.json</code>if<code>save</code>为 true。</p><p>当包包锁被禁用时，无关模块的自动修剪也将被禁用。要删除禁用包锁的无关模块，请使用<code>npm prune</code>.</p><h2 id="omit" tabindex="-1"><code>omit</code> <a class="header-anchor" href="#omit" aria-label="Permalink to &quot;`omit`&quot;">​</a></h2><ul><li>默认值：如果<code>NODE_ENV</code>环境变量设置为“生产”，则为“dev”，否则为空。</li><li>类型：“dev”、“可选”或“peer”（可以设置多次）</li></ul><p>要从磁盘上的安装树中省略的依赖项类型。</p><p>请注意，这些依赖项<em>仍会被</em>解析并添加到<code>package-lock.json</code>或<code>npm-shrinkwrap.json</code>文件中。它们只是没有物理安装在磁盘上。</p><p>如果包类型同时出现在<code>--include</code>和<code>--omit</code>列表中，那么它将被包含在内。</p><p>如果生成的省略列表包含<code>&#39;dev&#39;</code>，则所有生命周期脚本的<code>NODE_ENV</code>环境变量将设置为。<code>&#39;production&#39;</code></p><h2 id="ignore-scripts" tabindex="-1"><code>ignore-scripts</code> <a class="header-anchor" href="#ignore-scripts" aria-label="Permalink to &quot;`ignore-scripts`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>如果为 true，npm 不会运行 package.json 文件中指定的脚本。</p><p>请注意，明确旨在运行特定脚本的命令，例如<code>npm start</code>、<code>npm stop</code>、<code>npm restart</code>、<code>npm test</code>、 和如果设置了，<code>npm run-script</code>仍将运行其预期脚本，但它们<em>不会</em>运行任何前置或后置脚本。<code>ignore-scripts</code></p><h2 id="audit" tabindex="-1"><code>audit</code> <a class="header-anchor" href="#audit" aria-label="Permalink to &quot;`audit`&quot;">​</a></h2><ul><li>默认值：true</li><li>类型：布尔值</li></ul><p>当“true”时，将审核报告与当前 npm 命令一起提交到默认注册表和为范围配置的所有注册表。<code>npm audit</code>有关提交内容的详细信息，请参阅文档。</p><h2 id="bin-links" tabindex="-1"><code>bin-links</code> <a class="header-anchor" href="#bin-links" aria-label="Permalink to &quot;`bin-links`&quot;">​</a></h2><ul><li>默认值：true</li><li>类型：布尔值</li></ul><p>告诉 npm 为包可执行文件创建符号链接（或<code>.cmd</code>Windows 上的垫片）。</p><p>设置为 false 以使其不执行此操作。这可以用来解决某些文件系统不支持符号链接的问题，即使在表面上的 Unix 系统上也是如此。</p><h2 id="fund" tabindex="-1"><code>fund</code> <a class="header-anchor" href="#fund" aria-label="Permalink to &quot;`fund`&quot;">​</a></h2><ul><li>默认值：true</li><li>类型：布尔值</li></ul><p>当“true”时，会在每个消息末尾显示消息<code>npm install</code>，确认寻求资金的依赖项的数量。<code>npm fund</code>详情请参阅。</p><h2 id="dry-run" tabindex="-1"><code>dry-run</code> <a class="header-anchor" href="#dry-run" aria-label="Permalink to &quot;`dry-run`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p>表示您不希望 npm 进行任何更改，并且它应该只报告它会执行的操作。这可以传递到任何修改本地安装的命令中，例如<code>install</code>、<code>update</code>、<code>dedupe</code>、<code>uninstall</code>以及<code>pack</code>和<code>publish</code>。</p><p>注意：其他网络相关命令不支持这一点，例如<code>dist-tags</code>、<code>owner</code>等。</p><h2 id="workspace" tabindex="-1"><code>workspace</code> <a class="header-anchor" href="#workspace" aria-label="Permalink to &quot;`workspace`&quot;">​</a></h2><ul><li>默认：</li><li>类型：String（可设置多次）</li></ul><p>允许在当前项目的已配置工作区上下文中运行命令，同时通过仅运行此配置选项定义的工作区进行过滤。</p><p>配置的有效值为<code>workspace</code>：</p><ul><li>工作区名称</li><li>工作区目录的路径</li><li>父工作区目录的路径（将导致选择所有嵌套工作区）</li></ul><p>当设置该<code>npm init</code>命令时，可以将其设置为尚不存在的工作空间的文件夹，以创建该文件夹并将其设置为项目中的全新工作空间。</p><p>该值不会导出到子进程的环境中。</p><h2 id="workspaces" tabindex="-1"><code>workspaces</code> <a class="header-anchor" href="#workspaces" aria-label="Permalink to &quot;`workspaces`&quot;">​</a></h2><ul><li>默认值：假</li><li>类型：布尔值</li></ul><p><strong>允许在所有</strong>已配置工作区的上下文中运行命令。</p><p>该值不会导出到子进程的环境中。</p>',90),p=[n];function c(t,d,r,i,y,u){return a(),s("div",null,p)}const m=e(l,[["render",c]]);export{E as __pageData,m as default};
