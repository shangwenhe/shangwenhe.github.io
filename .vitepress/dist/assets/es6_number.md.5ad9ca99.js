import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.681fc4ae.js";const h=JSON.parse('{"title":"数值的扩展","description":"","frontmatter":{},"headers":[],"relativePath":"es6/number.md","filePath":"es6/number.md"}'),l={name:"es6/number.md"},o=p(`<h1 id="数值的扩展" tabindex="-1">数值的扩展 <a class="header-anchor" href="#数值的扩展" aria-label="Permalink to &quot;数值的扩展&quot;">​</a></h1><h2 id="二进制和八进制表示法" tabindex="-1">二进制和八进制表示法 <a class="header-anchor" href="#二进制和八进制表示法" aria-label="Permalink to &quot;二进制和八进制表示法&quot;">​</a></h2><p>ES6 提供了二进制和八进制数值的新的写法，分别用前缀<code>0b</code>（或<code>0B</code>）和<code>0o</code>（或<code>0O</code>）表示。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">0b111110111</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">503</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">0o767</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">503</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">0b111110111</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">503</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#005CC5;">0o767</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">503</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>从 ES5 开始，在严格模式之中，八进制就不再允许使用前缀<code>0</code>表示，ES6 进一步明确，要使用前缀<code>0o</code>表示。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 非严格模式</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0o11</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">011</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">})() </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 严格模式</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;use strict&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0o11</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">011</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">})() </span><span style="color:#6A737D;">// Uncaught SyntaxError: Octal literals are not allowed in strict mode.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 非严格模式</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0o11</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">011</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">})() </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 严格模式</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;use strict&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0o11</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">011</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">})() </span><span style="color:#6A737D;">// Uncaught SyntaxError: Octal literals are not allowed in strict mode.</span></span></code></pre></div><p>如果要将<code>0b</code>和<code>0o</code>前缀的字符串数值转为十进制，要使用<code>Number</code>方法。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;0b111&#39;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 7</span></span>
<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;0o10&#39;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 8</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;0b111&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// 7</span></span>
<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;0o10&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// 8</span></span></code></pre></div><h2 id="数值分隔符" tabindex="-1">数值分隔符 <a class="header-anchor" href="#数值分隔符" aria-label="Permalink to &quot;数值分隔符&quot;">​</a></h2><p>欧美语言中，较长的数值允许每三位添加一个分隔符（通常是一个逗号），增加数值的可读性。比如，<code>1000</code>可以写作<code>1,000</code>。</p><p><a href="https://github.com/tc39/proposal-numeric-separator" target="_blank" rel="noreferrer">ES2021</a>，允许 JavaScript 的数值使用下划线（<code>_</code>）作为分隔符。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> budget </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1_000_000_000_000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">budget </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> budget </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1_000_000_000_000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">budget </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>这个数值分隔符没有指定间隔的位数，也就是说，可以每三位添加一个分隔符，也可以每一位、每两位、每四位添加一个。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">123_00</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12_300</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">12345_00</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">123_4500</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">12345_00</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1_234_500</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">123_00</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12_300</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">12345_00</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">123_4500</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#005CC5;">12345_00</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1_234_500</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>小数和科学计数法也可以使用数值分隔符。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 小数</span></span>
<span class="line"><span style="color:#79B8FF;">0.000_001</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 科学计数法</span></span>
<span class="line"><span style="color:#79B8FF;">1e10_000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 小数</span></span>
<span class="line"><span style="color:#005CC5;">0.000_001</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 科学计数法</span></span>
<span class="line"><span style="color:#005CC5;">1e10_000</span></span></code></pre></div><p>数值分隔符有几个使用注意点。</p><ul><li>不能放在数值的最前面（leading）或最后面（trailing）。</li><li>不能两个或两个以上的分隔符连在一起。</li><li>小数点的前后不能有分隔符。</li><li>科学计数法里面，表示指数的<code>e</code>或<code>E</code>前后不能有分隔符。</li></ul><p>下面的写法都会报错。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 全部报错</span></span>
<span class="line"><span style="color:#79B8FF;">3_.141</span></span>
<span class="line"><span style="color:#E1E4E8;">3._141</span></span>
<span class="line"><span style="color:#79B8FF;">1_e12</span></span>
<span class="line"><span style="color:#E1E4E8;">1e_12</span></span>
<span class="line"><span style="color:#79B8FF;">123__456</span></span>
<span class="line"><span style="color:#E1E4E8;">_1464301</span></span>
<span class="line"><span style="color:#79B8FF;">1464301_</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 全部报错</span></span>
<span class="line"><span style="color:#005CC5;">3_.141</span></span>
<span class="line"><span style="color:#24292E;">3._141</span></span>
<span class="line"><span style="color:#005CC5;">1_e12</span></span>
<span class="line"><span style="color:#24292E;">1e_12</span></span>
<span class="line"><span style="color:#005CC5;">123__456</span></span>
<span class="line"><span style="color:#24292E;">_1464301</span></span>
<span class="line"><span style="color:#005CC5;">1464301_</span></span></code></pre></div><p>除了十进制，其他进制的数值也可以使用分隔符。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 二进制</span></span>
<span class="line"><span style="color:#79B8FF;">0b1010_0001_1000_0101</span></span>
<span class="line"><span style="color:#6A737D;">// 十六进制</span></span>
<span class="line"><span style="color:#79B8FF;">0xA0_B0_C0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 二进制</span></span>
<span class="line"><span style="color:#005CC5;">0b1010_0001_1000_0101</span></span>
<span class="line"><span style="color:#6A737D;">// 十六进制</span></span>
<span class="line"><span style="color:#005CC5;">0xA0_B0_C0</span></span></code></pre></div><p>可以看到，数值分隔符可以按字节顺序分隔数值，这在操作二进制位时，非常有用。</p><p>注意，分隔符不能紧跟着进制的前缀<code>0b</code>、<code>0B</code>、<code>0o</code>、<code>0O</code>、<code>0x</code>、<code>0X</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#E1E4E8;">0_b111111000</span></span>
<span class="line"><span style="color:#E1E4E8;">0b_111111000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#24292E;">0_b111111000</span></span>
<span class="line"><span style="color:#24292E;">0b_111111000</span></span></code></pre></div><p>数值分隔符只是一种书写便利，对于 JavaScript 内部数值的存储和输出，并没有影响。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12_345</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">num </span><span style="color:#6A737D;">// 12345</span></span>
<span class="line"><span style="color:#E1E4E8;">num.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 12345</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12_345</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">num </span><span style="color:#6A737D;">// 12345</span></span>
<span class="line"><span style="color:#24292E;">num.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 12345</span></span></code></pre></div><p>上面示例中，变量<code>num</code>的值为<code>12_345</code>，但是内部存储和输出的时候，都不会有数值分隔符。</p><p>下面三个将字符串转成数值的函数，不支持数值分隔符。主要原因是语言的设计者认为，数值分隔符主要是为了编码时书写数值的方便，而不是为了处理外部输入的数据。</p><ul><li>Number()</li><li>parseInt()</li><li>parseFloat()</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;123_456&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;123_456&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 123</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;123_456&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;123_456&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 123</span></span></code></pre></div><h2 id="number-isfinite-number-isnan" tabindex="-1">Number.isFinite(), Number.isNaN() <a class="header-anchor" href="#number-isfinite-number-isnan" aria-label="Permalink to &quot;Number.isFinite(), Number.isNaN()&quot;">​</a></h2><p>ES6 在<code>Number</code>对象上，新提供了<code>Number.isFinite()</code>和<code>Number.isNaN()</code>两个方法。</p><p><code>Number.isFinite()</code>用来检查一个数值是否为有限的（finite），即不是<code>Infinity</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isFinite</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isFinite</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.8</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isFinite</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isFinite</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isFinite</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isFinite</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isFinite</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;15&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isFinite</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isFinite</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">15</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isFinite</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isFinite</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isFinite</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isFinite</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isFinite</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isFinite</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;15&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isFinite</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span></code></pre></div><p>注意，如果参数类型不是数值，<code>Number.isFinite</code>一律返回<code>false</code>。</p><p><code>Number.isNaN()</code>用来检查一个值是否为<code>NaN</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isNaN</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isNaN</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isNaN</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;15&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isNaN</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isNaN</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">9</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isNaN</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;true&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isNaN</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;true&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;true&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isNaN</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isNaN</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">15</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isNaN</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;15&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isNaN</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isNaN</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">9</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isNaN</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;true&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isNaN</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;true&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;true&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>如果参数类型不是<code>NaN</code>，<code>Number.isNaN</code>一律返回<code>false</code>。</p><p>它们与传统的全局方法<code>isFinite()</code>和<code>isNaN()</code>的区别在于，传统方法先调用<code>Number()</code>将非数值的值转为数值，再进行判断，而这两个新方法只对数值有效，<code>Number.isFinite()</code>对于非数值一律返回<code>false</code>, <code>Number.isNaN()</code>只有对于<code>NaN</code>才返回<code>true</code>，非<code>NaN</code>一律返回<code>false</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">isFinite</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#B392F0;">isFinite</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;25&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isFinite</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isFinite</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;25&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">isNaN</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#B392F0;">isNaN</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;NaN&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isNaN</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isNaN</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;NaN&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isNaN</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">isFinite</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">25</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#6F42C1;">isFinite</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;25&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isFinite</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">25</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isFinite</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;25&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">isNaN</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#6F42C1;">isNaN</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;NaN&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isNaN</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isNaN</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;NaN&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isNaN</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span></code></pre></div><h2 id="number-parseint-number-parsefloat" tabindex="-1">Number.parseInt(), Number.parseFloat() <a class="header-anchor" href="#number-parseint-number-parsefloat" aria-label="Permalink to &quot;Number.parseInt(), Number.parseFloat()&quot;">​</a></h2><p>ES6 将全局方法<code>parseInt()</code>和<code>parseFloat()</code>，移植到<code>Number</code>对象上面，行为完全保持不变。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// ES5的写法</span></span>
<span class="line"><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;12.34&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 12</span></span>
<span class="line"><span style="color:#B392F0;">parseFloat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;123.45#&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 123.45</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ES6的写法</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;12.34&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 12</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">parseFloat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;123.45#&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 123.45</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// ES5的写法</span></span>
<span class="line"><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;12.34&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 12</span></span>
<span class="line"><span style="color:#6F42C1;">parseFloat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;123.45#&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 123.45</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ES6的写法</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;12.34&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 12</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">parseFloat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;123.45#&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 123.45</span></span></code></pre></div><p>这样做的目的，是逐步减少全局性方法，使得语言逐步模块化。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Number.parseInt </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> parseInt </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.parseFloat </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> parseFloat </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Number.parseInt </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> parseInt </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.parseFloat </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> parseFloat </span><span style="color:#6A737D;">// true</span></span></code></pre></div><h2 id="number-isinteger" tabindex="-1">Number.isInteger() <a class="header-anchor" href="#number-isinteger" aria-label="Permalink to &quot;Number.isInteger()&quot;">​</a></h2><p><code>Number.isInteger()</code>用来判断一个数值是否为整数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">25.1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">25</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">25.1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span></code></pre></div><p>JavaScript 内部，整数和浮点数采用的是同样的储存方法，所以 25 和 25.0 被视为同一个值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">25.0</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">25</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">25.0</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>如果参数不是数值，<code>Number.isInteger</code>返回<code>false</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isInteger</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;15&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;15&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span></code></pre></div><p>注意，由于 JavaScript 采用 IEEE 754 标准，数值存储为64位双精度格式，数值精度最多可以达到 53 个二进制位（1 个隐藏位与 52 个有效位）。如果数值的精度超过这个限度，第54位及后面的位就会被丢弃，这种情况下，<code>Number.isInteger</code>可能会误判。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3.0000000000000002</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3.0000000000000002</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>上面代码中，<code>Number.isInteger</code>的参数明明不是整数，但是会返回<code>true</code>。原因就是这个小数的精度达到了小数点后16个十进制位，转成二进制位超过了53个二进制位，导致最后的那个<code>2</code>被丢弃了。</p><p>类似的情况还有，如果一个数值的绝对值小于<code>Number.MIN_VALUE</code>（5E-324），即小于 JavaScript 能够分辨的最小值，会被自动转为 0。这时，<code>Number.isInteger</code>也会误判。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5E-324</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5E-325</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5E-324</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5E-325</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>上面代码中，<code>5E-325</code>由于值太小，会被自动转为0，因此返回<code>true</code>。</p><p>总之，如果对数据精度的要求较高，不建议使用<code>Number.isInteger()</code>判断一个数值是否为整数。</p><h2 id="number-epsilon" tabindex="-1">Number.EPSILON <a class="header-anchor" href="#number-epsilon" aria-label="Permalink to &quot;Number.EPSILON&quot;">​</a></h2><p>ES6 在<code>Number</code>对象上面，新增一个极小的常量<code>Number.EPSILON</code>。根据规格，它表示 1 与大于 1 的最小浮点数之间的差。</p><p>对于 64 位浮点数来说，大于 1 的最小浮点数相当于二进制的<code>1.00..001</code>，小数点后面有连续 51 个零。这个值减去 1 之后，就等于 2 的 -52 次方。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Number.EPSILON </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">pow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">52</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.EPSILON</span></span>
<span class="line"><span style="color:#6A737D;">// 2.220446049250313e-16</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.EPSILON.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;0.00000000000000022204&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Number.EPSILON </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">pow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">52</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.EPSILON</span></span>
<span class="line"><span style="color:#6A737D;">// 2.220446049250313e-16</span></span>
<span class="line"><span style="color:#24292E;">Number.EPSILON.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;0.00000000000000022204&quot;</span></span></code></pre></div><p><code>Number.EPSILON</code>实际上是 JavaScript 能够表示的最小精度。误差如果小于这个值，就可以认为已经没有意义了，即不存在误差了。</p><p>引入一个这么小的量的目的，在于为浮点数计算，设置一个误差范围。我们知道浮点数计算是不精确的。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.2</span></span>
<span class="line"><span style="color:#6A737D;">// 0.30000000000000004</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.3</span></span>
<span class="line"><span style="color:#6A737D;">// 5.551115123125783e-17</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">5.551115123125783e-17</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;0.00000000000000005551&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">0.1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.2</span></span>
<span class="line"><span style="color:#6A737D;">// 0.30000000000000004</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">0.1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.3</span></span>
<span class="line"><span style="color:#6A737D;">// 5.551115123125783e-17</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">5.551115123125783e-17</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;0.00000000000000005551&#39;</span></span></code></pre></div><p>上面代码解释了，为什么比较<code>0.1 + 0.2</code>与<code>0.3</code>得到的结果是<code>false</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.3</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">0.1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.3</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// false</span></span></code></pre></div><p><code>Number.EPSILON</code>可以用来设置“能够接受的误差范围”。比如，误差范围设为 2 的-50 次方（即<code>Number.EPSILON * Math.pow(2, 2)</code>），即如果两个浮点数的差小于这个值，我们就认为这两个浮点数相等。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">5.551115123125783e-17</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> Number.EPSILON </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">pow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">5.551115123125783e-17</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> Number.EPSILON </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">pow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre></div><p>因此，<code>Number.EPSILON</code>的实质是一个可以接受的最小误差范围。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">withinErrorMargin</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">left</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">right</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">abs</span><span style="color:#E1E4E8;">(left </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> right) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> Number.EPSILON </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">pow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.3</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#B392F0;">withinErrorMargin</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.3</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2.4</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#B392F0;">withinErrorMargin</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2.4</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">withinErrorMargin</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">left</span><span style="color:#24292E;">, </span><span style="color:#E36209;">right</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">abs</span><span style="color:#24292E;">(left </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> right) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> Number.EPSILON </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">pow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">0.1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.3</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#6F42C1;">withinErrorMargin</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.3</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">1.1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2.4</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#6F42C1;">withinErrorMargin</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2.4</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>上面的代码为浮点数运算，部署了一个误差检查函数。</p><h2 id="安全整数和-number-issafeinteger" tabindex="-1">安全整数和 Number.isSafeInteger() <a class="header-anchor" href="#安全整数和-number-issafeinteger" aria-label="Permalink to &quot;安全整数和 Number.isSafeInteger()&quot;">​</a></h2><p>JavaScript 能够准确表示的整数范围在<code>-2^53</code>到<code>2^53</code>之间（不含两个端点），超过这个范围，无法精确表示这个值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">pow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">53</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 9007199254740992</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">9007199254740992</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 9007199254740992</span></span>
<span class="line"><span style="color:#79B8FF;">9007199254740993</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 9007199254740992</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">pow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">53</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">pow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">53</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">pow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">53</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 9007199254740992</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">9007199254740992</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 9007199254740992</span></span>
<span class="line"><span style="color:#005CC5;">9007199254740993</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 9007199254740992</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">pow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">53</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">pow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">53</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre></div><p>上面代码中，超出 2 的 53 次方之后，一个数就不精确了。</p><p>ES6 引入了<code>Number.MAX_SAFE_INTEGER</code>和<code>Number.MIN_SAFE_INTEGER</code>这两个常量，用来表示这个范围的上下限。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Number.MAX_SAFE_INTEGER </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">pow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">53</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.MAX_SAFE_INTEGER </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9007199254740991</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Number.MIN_SAFE_INTEGER </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Number.MAX_SAFE_INTEGER</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.MIN_SAFE_INTEGER </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">9007199254740991</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Number.MAX_SAFE_INTEGER </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">pow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">53</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.MAX_SAFE_INTEGER </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9007199254740991</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Number.MIN_SAFE_INTEGER </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Number.MAX_SAFE_INTEGER</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.MIN_SAFE_INTEGER </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">9007199254740991</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre></div><p>上面代码中，可以看到 JavaScript 能够精确表示的极限。</p><p><code>Number.isSafeInteger()</code>则是用来判断一个整数是否落在这个范围之内。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">9007199254740990</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">9007199254740992</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(Number.MIN_SAFE_INTEGER </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(Number.MIN_SAFE_INTEGER) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(Number.MAX_SAFE_INTEGER) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(Number.MAX_SAFE_INTEGER </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">9007199254740990</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">9007199254740992</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(Number.MIN_SAFE_INTEGER </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(Number.MIN_SAFE_INTEGER) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(Number.MAX_SAFE_INTEGER) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(Number.MAX_SAFE_INTEGER </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span></code></pre></div><p>这个函数的实现很简单，就是跟安全整数的两个边界值比较一下。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;number&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Math.</span><span style="color:#B392F0;">round</span><span style="color:#E1E4E8;">(n) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Number.MIN_SAFE_INTEGER </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    n </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> Number.MAX_SAFE_INTEGER);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">n</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;number&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    Math.</span><span style="color:#6F42C1;">round</span><span style="color:#24292E;">(n) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    Number.MIN_SAFE_INTEGER </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    n </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> Number.MAX_SAFE_INTEGER);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>实际使用这个函数时，需要注意。验证运算结果是否落在安全整数的范围内，不要只验证运算结果，而要同时验证参与运算的每个值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">9007199254740993</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">990</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">9007199254740993</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">990</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">9007199254740993</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">990</span></span>
<span class="line"><span style="color:#6A737D;">// 返回结果 9007199254740002</span></span>
<span class="line"><span style="color:#6A737D;">// 正确答案应该是 9007199254740003</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">9007199254740993</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">990</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">9007199254740993</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">990</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#005CC5;">9007199254740993</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">990</span></span>
<span class="line"><span style="color:#6A737D;">// 返回结果 9007199254740002</span></span>
<span class="line"><span style="color:#6A737D;">// 正确答案应该是 9007199254740003</span></span></code></pre></div><p>上面代码中，<code>9007199254740993</code>不是一个安全整数，但是<code>Number.isSafeInteger</code>会返回结果，显示计算结果是安全的。这是因为，这个数超出了精度范围，导致在计算机内部，以<code>9007199254740992</code>的形式储存。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">9007199254740993</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9007199254740992</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">9007199254740993</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9007199254740992</span></span>
<span class="line"><span style="color:#6A737D;">// true</span></span></code></pre></div><p>所以，如果只验证运算结果是否为安全整数，很可能得到错误结果。下面的函数可以同时验证两个运算数和运算结果。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trusty</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">left</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">right</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(left) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(right) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Number.</span><span style="color:#B392F0;">isSafeInteger</span><span style="color:#E1E4E8;">(result)</span></span>
<span class="line"><span style="color:#E1E4E8;">  ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RangeError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Operation cannot be trusted!&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">trusty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">9007199254740993</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">990</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">9007199254740993</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">990</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// RangeError: Operation cannot be trusted!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">trusty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trusty</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">left</span><span style="color:#24292E;">, </span><span style="color:#E36209;">right</span><span style="color:#24292E;">, </span><span style="color:#E36209;">result</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(left) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(right) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    Number.</span><span style="color:#6F42C1;">isSafeInteger</span><span style="color:#24292E;">(result)</span></span>
<span class="line"><span style="color:#24292E;">  ) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RangeError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Operation cannot be trusted!&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">trusty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">9007199254740993</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">990</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9007199254740993</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">990</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// RangeError: Operation cannot be trusted!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">trusty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 3</span></span></code></pre></div><h2 id="math-对象的扩展" tabindex="-1">Math 对象的扩展 <a class="header-anchor" href="#math-对象的扩展" aria-label="Permalink to &quot;Math 对象的扩展&quot;">​</a></h2><p>ES6 在 Math 对象上新增了 17 个与数学相关的方法。所有这些方法都是静态方法，只能在 Math 对象上调用。</p><h3 id="math-trunc" tabindex="-1">Math.trunc() <a class="header-anchor" href="#math-trunc" aria-label="Permalink to &quot;Math.trunc()&quot;">​</a></h3><p><code>Math.trunc</code>方法用于去除一个数的小数部分，返回整数部分。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">trunc</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4.1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 4</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">trunc</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4.9</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 4</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">trunc</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">4.1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// -4</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">trunc</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">4.9</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// -4</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">trunc</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0.1234</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// -0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">trunc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4.1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 4</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">trunc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4.9</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 4</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">trunc</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">4.1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// -4</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">trunc</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">4.9</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// -4</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">trunc</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.1234</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// -0</span></span></code></pre></div><p>对于非数值，<code>Math.trunc</code>内部使用<code>Number</code>方法将其先转为数值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">trunc</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;123.456&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 123</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">trunc</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//1</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">trunc</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">trunc</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">trunc</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;123.456&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 123</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">trunc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//1</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">trunc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">trunc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0</span></span></code></pre></div><p>对于空值和无法截取整数的值，返回<code>NaN</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">trunc</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">);      </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">trunc</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">);    </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">trunc</span><span style="color:#E1E4E8;">();         </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">trunc</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// NaN</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">trunc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">);      </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">trunc</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">);    </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">trunc</span><span style="color:#24292E;">();         </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">trunc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// NaN</span></span></code></pre></div><p>对于没有部署这个方法的环境，可以用下面的代码模拟。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.trunc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.trunc </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">ceil</span><span style="color:#E1E4E8;">(x) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">floor</span><span style="color:#E1E4E8;">(x);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.trunc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.trunc </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">ceil</span><span style="color:#24292E;">(x) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="math-sign" tabindex="-1">Math.sign() <a class="header-anchor" href="#math-sign" aria-label="Permalink to &quot;Math.sign()&quot;">​</a></h3><p><code>Math.sign</code>方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。</p><p>它会返回五种值。</p><ul><li>参数为正数，返回<code>+1</code>；</li><li>参数为负数，返回<code>-1</code>；</li><li>参数为 0，返回<code>0</code>；</li><li>参数为-0，返回<code>-0</code>;</li><li>其他值，返回<code>NaN</code>。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">sign</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// -1</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">sign</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// +1</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">sign</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// +0</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">sign</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// -0</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">sign</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// NaN</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// -1</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// +1</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// +0</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// -0</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// NaN</span></span></code></pre></div><p>如果参数是非数值，会自动转为数值。对于那些无法转为数值的值，会返回<code>NaN</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">sign</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">sign</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// +1</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">sign</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">sign</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">sign</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;9&#39;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// +1</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">sign</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">sign</span><span style="color:#E1E4E8;">()  </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">sign</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// NaN</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// +1</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;9&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// +1</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">()  </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// NaN</span></span></code></pre></div><p>对于没有部署这个方法的环境，可以用下面的代码模拟。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.sign </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.sign </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">x; </span><span style="color:#6A737D;">// convert to a number</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (x </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isNaN</span><span style="color:#E1E4E8;">(x)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.sign </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.sign </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">x; </span><span style="color:#6A737D;">// convert to a number</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isNaN</span><span style="color:#24292E;">(x)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="math-cbrt" tabindex="-1">Math.cbrt() <a class="header-anchor" href="#math-cbrt" aria-label="Permalink to &quot;Math.cbrt()&quot;">​</a></h3><p><code>Math.cbrt()</code>方法用于计算一个数的立方根。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">cbrt</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// -1</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">cbrt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">cbrt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">cbrt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 1.2599210498948732</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">cbrt</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// -1</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">cbrt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">cbrt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">cbrt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// 1.2599210498948732</span></span></code></pre></div><p>对于非数值，<code>Math.cbrt()</code>方法内部也是先使用<code>Number()</code>方法将其转为数值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">cbrt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;8&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">cbrt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// NaN</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">cbrt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;8&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">cbrt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// NaN</span></span></code></pre></div><p>对于没有部署这个方法的环境，可以用下面的代码模拟。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.cbrt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.cbrt </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">pow</span><span style="color:#E1E4E8;">(Math.</span><span style="color:#B392F0;">abs</span><span style="color:#E1E4E8;">(x), </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">y </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> y;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.cbrt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.cbrt </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">pow</span><span style="color:#24292E;">(Math.</span><span style="color:#6F42C1;">abs</span><span style="color:#24292E;">(x), </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">y </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> y;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="math-clz32" tabindex="-1">Math.clz32() <a class="header-anchor" href="#math-clz32" aria-label="Permalink to &quot;Math.clz32()&quot;">​</a></h3><p><code>Math.clz32()</code>方法将参数转为 32 位无符号整数的形式，然后返回这个 32 位值里面有多少个前导 0。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">clz32</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 32</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">clz32</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 31</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">clz32</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 22</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">clz32</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0b01000000000000000000000000000000</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">clz32</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0b00100000000000000000000000000000</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">clz32</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 32</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">clz32</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 31</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">clz32</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 22</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">clz32</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0b01000000000000000000000000000000</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">clz32</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0b00100000000000000000000000000000</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 2</span></span></code></pre></div><p>上面代码中，0 的二进制形式全为 0，所以有 32 个前导 0；1 的二进制形式是<code>0b1</code>，只占 1 位，所以 32 位之中有 31 个前导 0；1000 的二进制形式是<code>0b1111101000</code>，一共有 10 位，所以 32 位之中有 22 个前导 0。</p><p><code>clz32</code>这个函数名就来自”count leading zero bits in 32-bit binary representation of a number“（计算一个数的 32 位二进制形式的前导 0 的个数）的缩写。</p><p>左移运算符（<code>&lt;&lt;</code>）与<code>Math.clz32</code>方法直接相关。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">clz32</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 32</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">clz32</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 31</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">clz32</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 30</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">clz32</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 29</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">clz32</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">29</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">clz32</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 32</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">clz32</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 31</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">clz32</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 30</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">clz32</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 29</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">clz32</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">29</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 2</span></span></code></pre></div><p>对于小数，<code>Math.clz32</code>方法只考虑整数部分。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">clz32</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3.2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 30</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">clz32</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3.9</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 30</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">clz32</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3.2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 30</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">clz32</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3.9</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 30</span></span></code></pre></div><p>对于空值或其他类型的值，<code>Math.clz32</code>方法会将它们先转为数值，然后再计算。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">clz32</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 32</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">clz32</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 32</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">clz32</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 32</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">clz32</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 32</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">clz32</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 32</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">clz32</span><span style="color:#E1E4E8;">([]) </span><span style="color:#6A737D;">// 32</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">clz32</span><span style="color:#E1E4E8;">({}) </span><span style="color:#6A737D;">// 32</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">clz32</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 31</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">clz32</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 32</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">clz32</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 32</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">clz32</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 32</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">clz32</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 32</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">clz32</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 32</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">clz32</span><span style="color:#24292E;">([]) </span><span style="color:#6A737D;">// 32</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">clz32</span><span style="color:#24292E;">({}) </span><span style="color:#6A737D;">// 32</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">clz32</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 31</span></span></code></pre></div><h3 id="math-imul" tabindex="-1">Math.imul() <a class="header-anchor" href="#math-imul" aria-label="Permalink to &quot;Math.imul()&quot;">​</a></h3><p><code>Math.imul</code>方法返回两个数以 32 位带符号整数形式相乘的结果，返回的也是一个 32 位的带符号整数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">imul</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)   </span><span style="color:#6A737D;">// 8</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">imul</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// -8</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">imul</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">imul</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)   </span><span style="color:#6A737D;">// 8</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">imul</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// -8</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">imul</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 4</span></span></code></pre></div><p>如果只考虑最后 32 位，大多数情况下，<code>Math.imul(a, b)</code>与<code>a * b</code>的结果是相同的，即该方法等同于<code>(a * b)|0</code>的效果（超过 32 位的部分溢出）。之所以需要部署这个方法，是因为 JavaScript 有精度限制，超过 2 的 53 次方的值无法精确表示。这就是说，对于那些很大的数的乘法，低位数值往往都是不精确的，<code>Math.imul</code>方法可以返回正确的低位数值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0x7fffffff</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x7fffffff</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">|</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">0x7fffffff</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x7fffffff</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">|</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 0</span></span></code></pre></div><p>上面这个乘法算式，返回结果为 0。但是由于这两个二进制数的最低位都是 1，所以这个结果肯定是不正确的，因为根据二进制乘法，计算结果的二进制最低位应该也是 1。这个错误就是因为它们的乘积超过了 2 的 53 次方，JavaScript 无法保存额外的精度，就把低位的值都变成了 0。<code>Math.imul</code>方法可以返回正确的值 1。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">imul</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0x7fffffff</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x7fffffff</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">imul</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0x7fffffff</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x7fffffff</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 1</span></span></code></pre></div><h3 id="math-fround" tabindex="-1">Math.fround() <a class="header-anchor" href="#math-fround" aria-label="Permalink to &quot;Math.fround()&quot;">​</a></h3><p><code>Math.fround</code>方法返回一个数的32位单精度浮点数形式。</p><p>对于32位单精度格式来说，数值精度是24个二进制位（1 位隐藏位与 23 位有效位），所以对于 -2<sup>24</sup> 至 2<sup>24</sup> 之间的整数（不含两个端点），返回结果与参数本身一致。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">fround</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)   </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">fround</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)   </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">fround</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)   </span><span style="color:#6A737D;">// 16777215</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">fround</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)   </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">fround</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)   </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">fround</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">24</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)   </span><span style="color:#6A737D;">// 16777215</span></span></code></pre></div><p>如果参数的绝对值大于 2<sup>24</sup>，返回的结果便开始丢失精度。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">fround</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;">)       </span><span style="color:#6A737D;">// 16777216</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">fround</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)   </span><span style="color:#6A737D;">// 16777216</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">fround</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">24</span><span style="color:#24292E;">)       </span><span style="color:#6A737D;">// 16777216</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">fround</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">24</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)   </span><span style="color:#6A737D;">// 16777216</span></span></code></pre></div><p><code>Math.fround</code>方法的主要作用，是将64位双精度浮点数转为32位单精度浮点数。如果小数的精度超过24个二进制位，返回值就会不同于原值，否则返回值不变（即与64位双精度值一致）。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 未丢失有效精度</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">fround</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.125</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 1.125</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">fround</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">7.25</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 7.25</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 丢失精度</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">fround</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.3</span><span style="color:#E1E4E8;">)   </span><span style="color:#6A737D;">// 0.30000001192092896</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">fround</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.7</span><span style="color:#E1E4E8;">)   </span><span style="color:#6A737D;">// 0.699999988079071</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">fround</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.0000000123</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 未丢失有效精度</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">fround</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.125</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 1.125</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">fround</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">7.25</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// 7.25</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 丢失精度</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">fround</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.3</span><span style="color:#24292E;">)   </span><span style="color:#6A737D;">// 0.30000001192092896</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">fround</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.7</span><span style="color:#24292E;">)   </span><span style="color:#6A737D;">// 0.699999988079071</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">fround</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.0000000123</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 1</span></span></code></pre></div><p>对于 <code>NaN</code> 和 <code>Infinity</code>，此方法返回原值。对于其它类型的非数值，<code>Math.fround</code> 方法会先将其转为数值，再返回单精度浮点数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">fround</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">)      </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">fround</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// Infinity</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">fround</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;5&#39;</span><span style="color:#E1E4E8;">)      </span><span style="color:#6A737D;">// 5</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">fround</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)     </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">fround</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)     </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">fround</span><span style="color:#E1E4E8;">([])       </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">fround</span><span style="color:#E1E4E8;">({})       </span><span style="color:#6A737D;">// NaN</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">fround</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">)      </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">fround</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// Infinity</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">fround</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;5&#39;</span><span style="color:#24292E;">)      </span><span style="color:#6A737D;">// 5</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">fround</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)     </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">fround</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)     </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">fround</span><span style="color:#24292E;">([])       </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">fround</span><span style="color:#24292E;">({})       </span><span style="color:#6A737D;">// NaN</span></span></code></pre></div><p>对于没有部署这个方法的环境，可以用下面的代码模拟。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.fround </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.fround </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Float32Array</span><span style="color:#E1E4E8;">([x])[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.fround </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.fround </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Float32Array</span><span style="color:#24292E;">([x])[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="math-hypot" tabindex="-1">Math.hypot() <a class="header-anchor" href="#math-hypot" aria-label="Permalink to &quot;Math.hypot()&quot;">​</a></h3><p><code>Math.hypot</code>方法返回所有参数的平方和的平方根。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">hypot</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);        </span><span style="color:#6A737D;">// 5</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">hypot</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">);     </span><span style="color:#6A737D;">// 7.0710678118654755</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">hypot</span><span style="color:#E1E4E8;">();            </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">hypot</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NaN</span><span style="color:#E1E4E8;">);         </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">hypot</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">hypot</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;5&#39;</span><span style="color:#E1E4E8;">);   </span><span style="color:#6A737D;">// 7.0710678118654755</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">hypot</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);          </span><span style="color:#6A737D;">// 3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">hypot</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);        </span><span style="color:#6A737D;">// 5</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">hypot</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);     </span><span style="color:#6A737D;">// 7.0710678118654755</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">hypot</span><span style="color:#24292E;">();            </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">hypot</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">);         </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">hypot</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">hypot</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;5&#39;</span><span style="color:#24292E;">);   </span><span style="color:#6A737D;">// 7.0710678118654755</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">hypot</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);          </span><span style="color:#6A737D;">// 3</span></span></code></pre></div><p>上面代码中，3 的平方加上 4 的平方，等于 5 的平方。</p><p>如果参数不是数值，<code>Math.hypot</code>方法会将其转为数值。只要有一个参数无法转为数值，就会返回 NaN。</p><h3 id="对数方法" tabindex="-1">对数方法 <a class="header-anchor" href="#对数方法" aria-label="Permalink to &quot;对数方法&quot;">​</a></h3><p>ES6 新增了 4 个对数相关方法。</p><p><strong>（1） Math.expm1()</strong></p><p><code>Math.expm1(x)</code>返回 e<sup>x</sup> - 1，即<code>Math.exp(x) - 1</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">expm1</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// -0.6321205588285577</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">expm1</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">expm1</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 1.718281828459045</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">expm1</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// -0.6321205588285577</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">expm1</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">expm1</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// 1.718281828459045</span></span></code></pre></div><p>对于没有部署这个方法的环境，可以用下面的代码模拟。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.expm1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.expm1 </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">exp</span><span style="color:#E1E4E8;">(x) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.expm1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.expm1 </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">exp</span><span style="color:#24292E;">(x) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p><strong>（2）Math.log1p()</strong></p><p><code>Math.log1p(x)</code>方法返回<code>1 + x</code>的自然对数，即<code>Math.log(1 + x)</code>。如果<code>x</code>小于-1，返回<code>NaN</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">log1p</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 0.6931471805599453</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">log1p</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">log1p</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// -Infinity</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">log1p</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// NaN</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">log1p</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// 0.6931471805599453</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">log1p</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">log1p</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// -Infinity</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">log1p</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// NaN</span></span></code></pre></div><p>对于没有部署这个方法的环境，可以用下面的代码模拟。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.log1p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.log1p </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> x);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.log1p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.log1p </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> x);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p><strong>（3）Math.log10()</strong></p><p><code>Math.log10(x)</code>返回以 10 为底的<code>x</code>的对数。如果<code>x</code>小于 0，则返回 NaN。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">log10</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)      </span><span style="color:#6A737D;">// 0.3010299956639812</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">log10</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)      </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">log10</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)      </span><span style="color:#6A737D;">// -Infinity</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">log10</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)     </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">log10</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100000</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">log10</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)      </span><span style="color:#6A737D;">// 0.3010299956639812</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">log10</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)      </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">log10</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)      </span><span style="color:#6A737D;">// -Infinity</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">log10</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)     </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">log10</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100000</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 5</span></span></code></pre></div><p>对于没有部署这个方法的环境，可以用下面的代码模拟。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.log10 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.log10 </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(x) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#79B8FF;">LN10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.log10 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.log10 </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(x) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> Math.</span><span style="color:#005CC5;">LN10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p><strong>（4）Math.log2()</strong></p><p><code>Math.log2(x)</code>返回以 2 为底的<code>x</code>的对数。如果<code>x</code>小于 0，则返回 NaN。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">log2</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)       </span><span style="color:#6A737D;">// 1.584962500721156</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">log2</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)       </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">log2</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)       </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">log2</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)       </span><span style="color:#6A737D;">// -Infinity</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">log2</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)      </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">log2</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">)    </span><span style="color:#6A737D;">// 10</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">log2</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">29</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 29</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">log2</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)       </span><span style="color:#6A737D;">// 1.584962500721156</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">log2</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)       </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">log2</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)       </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">log2</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)       </span><span style="color:#6A737D;">// -Infinity</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">log2</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)      </span><span style="color:#6A737D;">// NaN</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">log2</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">)    </span><span style="color:#6A737D;">// 10</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">log2</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">29</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 29</span></span></code></pre></div><p>对于没有部署这个方法的环境，可以用下面的代码模拟。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.log2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.log2 </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(x) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#79B8FF;">LN2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.log2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.log2 </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(x) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> Math.</span><span style="color:#005CC5;">LN2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="双曲函数方法" tabindex="-1">双曲函数方法 <a class="header-anchor" href="#双曲函数方法" aria-label="Permalink to &quot;双曲函数方法&quot;">​</a></h3><p>ES6 新增了 6 个双曲函数方法。</p><ul><li><code>Math.sinh(x)</code> 返回<code>x</code>的双曲正弦（hyperbolic sine）</li><li><code>Math.cosh(x)</code> 返回<code>x</code>的双曲余弦（hyperbolic cosine）</li><li><code>Math.tanh(x)</code> 返回<code>x</code>的双曲正切（hyperbolic tangent）</li><li><code>Math.asinh(x)</code> 返回<code>x</code>的反双曲正弦（inverse hyperbolic sine）</li><li><code>Math.acosh(x)</code> 返回<code>x</code>的反双曲余弦（inverse hyperbolic cosine）</li><li><code>Math.atanh(x)</code> 返回<code>x</code>的反双曲正切（inverse hyperbolic tangent）</li></ul><h2 id="bigint-数据类型" tabindex="-1">BigInt 数据类型 <a class="header-anchor" href="#bigint-数据类型" aria-label="Permalink to &quot;BigInt 数据类型&quot;">​</a></h2><h3 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h3><p>JavaScript 所有数字都保存成 64 位浮点数，这给数值的表示带来了两大限制。一是数值的精度只能到 53 个二进制位（相当于 16 个十进制位），大于这个范围的整数，JavaScript 是无法精确表示，这使得 JavaScript 不适合进行科学和金融方面的精确计算。二是大于或等于2的1024次方的数值，JavaScript 无法表示，会返回<code>Infinity</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 超过 53 个二进制位的数值，无法保持精度</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">pow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">53</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">pow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">53</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 超过 2 的 1024 次方的数值，无法表示</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">pow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// Infinity</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 超过 53 个二进制位的数值，无法保持精度</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">pow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">53</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">pow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">53</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 超过 2 的 1024 次方的数值，无法表示</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">pow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// Infinity</span></span></code></pre></div><p><a href="https://github.com/tc39/proposal-bigint" target="_blank" rel="noreferrer">ES2020</a> 引入了一种新的数据类型 BigInt（大整数），来解决这个问题，这是 ECMAScript 的第八种数据类型。BigInt 只用来表示整数，没有位数的限制，任何位数的整数都可以精确表示。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2172141653</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15346349309</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// BigInt 可以保持精度</span></span>
<span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> b </span><span style="color:#6A737D;">// 33334444555566667777n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 普通整数无法保持精度</span></span>
<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(a) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(b) </span><span style="color:#6A737D;">// 33334444555566670000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2172141653</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15346349309</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// BigInt 可以保持精度</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> b </span><span style="color:#6A737D;">// 33334444555566667777n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 普通整数无法保持精度</span></span>
<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(a) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(b) </span><span style="color:#6A737D;">// 33334444555566670000</span></span></code></pre></div><p>为了与 Number 类型区别，BigInt 类型的数据必须添加后缀<code>n</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">1234</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 普通整数</span></span>
<span class="line"><span style="color:#79B8FF;">1234</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// BigInt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// BigInt 的运算</span></span>
<span class="line"><span style="color:#79B8FF;">1</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 3n</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1234</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 普通整数</span></span>
<span class="line"><span style="color:#005CC5;">1234</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// BigInt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// BigInt 的运算</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 3n</span></span></code></pre></div><p>BigInt 同样可以使用各种进制表示，都要加上后缀<code>n</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">0b1101</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 二进制</span></span>
<span class="line"><span style="color:#79B8FF;">0o777</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 八进制</span></span>
<span class="line"><span style="color:#79B8FF;">0xFF</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 十六进制</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">0b1101</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 二进制</span></span>
<span class="line"><span style="color:#005CC5;">0o777</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 八进制</span></span>
<span class="line"><span style="color:#005CC5;">0xFF</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 十六进制</span></span></code></pre></div><p>BigInt 与普通整数是两种值，它们之间并不相等。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">42</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">42</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// false</span></span></code></pre></div><p><code>typeof</code>运算符对于 BigInt 类型的数据返回<code>bigint</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">123</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// &#39;bigint&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">123</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// &#39;bigint&#39;</span></span></code></pre></div><p>BigInt 可以使用负号（<code>-</code>），但是不能使用正号（<code>+</code>），因为会与 asm.js 冲突。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">42</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 正确</span></span>
<span class="line"><span style="color:#F97583;">+</span><span style="color:#79B8FF;">42</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 报错</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">42</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 正确</span></span>
<span class="line"><span style="color:#D73A49;">+</span><span style="color:#005CC5;">42</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 报错</span></span></code></pre></div><p>JavaScript 以前不能计算70的阶乘（即<code>70!</code>），因为超出了可以表示的精度。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">70</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  p </span><span style="color:#F97583;">*=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(p); </span><span style="color:#6A737D;">// 1.197857166996989e+100</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">70</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  p </span><span style="color:#D73A49;">*=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(p); </span><span style="color:#6A737D;">// 1.197857166996989e+100</span></span></code></pre></div><p>现在支持大整数了，就可以算了，浏览器的开发者工具运行下面代码，就OK。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">70</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  p </span><span style="color:#F97583;">*=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(p); </span><span style="color:#6A737D;">// 11978571...00000000n</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">70</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  p </span><span style="color:#D73A49;">*=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(p); </span><span style="color:#6A737D;">// 11978571...00000000n</span></span></code></pre></div><h3 id="bigint-函数" tabindex="-1">BigInt 函数 <a class="header-anchor" href="#bigint-函数" aria-label="Permalink to &quot;BigInt 函数&quot;">​</a></h3><p>JavaScript 原生提供<code>BigInt</code>函数，可以用它生成 BigInt 类型的数值。转换规则基本与<code>Number()</code>一致，将其他类型的值转为 BigInt。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">BigInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 123n</span></span>
<span class="line"><span style="color:#B392F0;">BigInt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;123&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 123n</span></span>
<span class="line"><span style="color:#B392F0;">BigInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0n</span></span>
<span class="line"><span style="color:#B392F0;">BigInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 1n</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">BigInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 123n</span></span>
<span class="line"><span style="color:#6F42C1;">BigInt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;123&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 123n</span></span>
<span class="line"><span style="color:#6F42C1;">BigInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0n</span></span>
<span class="line"><span style="color:#6F42C1;">BigInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 1n</span></span></code></pre></div><p><code>BigInt()</code>函数必须有参数，而且参数必须可以正常转为数值，下面的用法都会报错。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BigInt</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// TypeError</span></span>
<span class="line"><span style="color:#B392F0;">BigInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//TypeError</span></span>
<span class="line"><span style="color:#B392F0;">BigInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// TypeError</span></span>
<span class="line"><span style="color:#B392F0;">BigInt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;123n&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// SyntaxError</span></span>
<span class="line"><span style="color:#B392F0;">BigInt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;abc&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// SyntaxError</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BigInt</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// TypeError</span></span>
<span class="line"><span style="color:#6F42C1;">BigInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//TypeError</span></span>
<span class="line"><span style="color:#6F42C1;">BigInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// TypeError</span></span>
<span class="line"><span style="color:#6F42C1;">BigInt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;123n&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// SyntaxError</span></span>
<span class="line"><span style="color:#6F42C1;">BigInt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;abc&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// SyntaxError</span></span></code></pre></div><p>上面代码中，尤其值得注意字符串<code>123n</code>无法解析成 Number 类型，所以会报错。</p><p>参数如果是小数，也会报错。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">BigInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.5</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// RangeError</span></span>
<span class="line"><span style="color:#B392F0;">BigInt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;1.5&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// SyntaxError</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">BigInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.5</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// RangeError</span></span>
<span class="line"><span style="color:#6F42C1;">BigInt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;1.5&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// SyntaxError</span></span></code></pre></div><p>BigInt 继承了 Object 对象的两个实例方法。</p><ul><li><code>BigInt.prototype.toString()</code></li><li><code>BigInt.prototype.valueOf()</code></li></ul><p>它还继承了 Number 对象的一个实例方法。</p><ul><li><code>BigInt.prototype.toLocaleString()</code></li></ul><p>此外，还提供了三个静态方法。</p><ul><li><code>BigInt.asUintN(width, BigInt)</code>： 给定的 BigInt 转为 0 到 2<sup>width</sup> - 1 之间对应的值。</li><li><code>BigInt.asIntN(width, BigInt)</code>：给定的 BigInt 转为 -2<sup>width - 1</sup> 到 2<sup>width - 1</sup> - 1 之间对应的值。</li><li><code>BigInt.parseInt(string[, radix])</code>：近似于<code>Number.parseInt()</code>，将一个字符串转换成指定进制的 BigInt。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">max</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">64</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">BigInt.</span><span style="color:#B392F0;">asIntN</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">64</span><span style="color:#E1E4E8;">, max)</span></span>
<span class="line"><span style="color:#6A737D;">// 9223372036854775807n</span></span>
<span class="line"><span style="color:#E1E4E8;">BigInt.</span><span style="color:#B392F0;">asIntN</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">64</span><span style="color:#E1E4E8;">, max </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// -9223372036854775808n</span></span>
<span class="line"><span style="color:#E1E4E8;">BigInt.</span><span style="color:#B392F0;">asUintN</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">64</span><span style="color:#E1E4E8;">, max </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 9223372036854775808n</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">max</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">64</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">BigInt.</span><span style="color:#6F42C1;">asIntN</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">64</span><span style="color:#24292E;">, max)</span></span>
<span class="line"><span style="color:#6A737D;">// 9223372036854775807n</span></span>
<span class="line"><span style="color:#24292E;">BigInt.</span><span style="color:#6F42C1;">asIntN</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">64</span><span style="color:#24292E;">, max </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// -9223372036854775808n</span></span>
<span class="line"><span style="color:#24292E;">BigInt.</span><span style="color:#6F42C1;">asUintN</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">64</span><span style="color:#24292E;">, max </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 9223372036854775808n</span></span></code></pre></div><p>上面代码中，<code>max</code>是64位带符号的 BigInt 所能表示的最大值。如果对这个值加<code>1n</code>，<code>BigInt.asIntN()</code>将会返回一个负值，因为这时新增的一位将被解释为符号位。而<code>BigInt.asUintN()</code>方法由于不存在符号位，所以可以正确返回结果。</p><p>如果<code>BigInt.asIntN()</code>和<code>BigInt.asUintN()</code>指定的位数，小于数值本身的位数，那么头部的位将被舍弃。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">max</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">64</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">BigInt.</span><span style="color:#B392F0;">asIntN</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">, max) </span><span style="color:#6A737D;">// -1n</span></span>
<span class="line"><span style="color:#E1E4E8;">BigInt.</span><span style="color:#B392F0;">asUintN</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">, max) </span><span style="color:#6A737D;">// 4294967295n</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">max</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">64</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">BigInt.</span><span style="color:#6F42C1;">asIntN</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">, max) </span><span style="color:#6A737D;">// -1n</span></span>
<span class="line"><span style="color:#24292E;">BigInt.</span><span style="color:#6F42C1;">asUintN</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">, max) </span><span style="color:#6A737D;">// 4294967295n</span></span></code></pre></div><p>上面代码中，<code>max</code>是一个64位的 BigInt，如果转为32位，前面的32位都会被舍弃。</p><p>下面是<code>BigInt.parseInt()</code>的例子。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Number.parseInt() 与 BigInt.parseInt() 的对比</span></span>
<span class="line"><span style="color:#E1E4E8;">Number.</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;9007199254740993&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 9007199254740992</span></span>
<span class="line"><span style="color:#E1E4E8;">BigInt.</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;9007199254740993&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 9007199254740993n</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Number.parseInt() 与 BigInt.parseInt() 的对比</span></span>
<span class="line"><span style="color:#24292E;">Number.</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;9007199254740993&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 9007199254740992</span></span>
<span class="line"><span style="color:#24292E;">BigInt.</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;9007199254740993&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 9007199254740993n</span></span></code></pre></div><p>上面代码中，由于有效数字超出了最大限度，<code>Number.parseInt</code>方法返回的结果是不精确的，而<code>BigInt.parseInt</code>方法正确返回了对应的 BigInt。</p><p>对于二进制数组，BigInt 新增了两个类型<code>BigUint64Array</code>和<code>BigInt64Array</code>，这两种数据类型返回的都是64位 BigInt。<code>DataView</code>对象的实例方法<code>DataView.prototype.getBigInt64()</code>和<code>DataView.prototype.getBigUint64()</code>，返回的也是 BigInt。</p><h3 id="转换规则" tabindex="-1">转换规则 <a class="header-anchor" href="#转换规则" aria-label="Permalink to &quot;转换规则&quot;">​</a></h3><p>可以使用<code>Boolean()</code>、<code>Number()</code>和<code>String()</code>这三个方法，将 BigInt 可以转为布尔值、数值和字符串类型。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Boolean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#B392F0;">Boolean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// &quot;1&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Boolean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#6F42C1;">Boolean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// &quot;1&quot;</span></span></code></pre></div><p>上面代码中，注意最后一个例子，转为字符串时后缀<code>n</code>会消失。</p><p>另外，取反运算符（<code>!</code>）也可以将 BigInt 转为布尔值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">!</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#F97583;">!</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">!</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#D73A49;">!</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// false</span></span></code></pre></div><h3 id="数学运算" tabindex="-1">数学运算 <a class="header-anchor" href="#数学运算" aria-label="Permalink to &quot;数学运算&quot;">​</a></h3><p>数学运算方面，BigInt 类型的<code>+</code>、<code>-</code>、<code>*</code>和<code>**</code>这四个二元运算符，与 Number 类型的行为一致。除法运算<code>/</code>会舍去小数部分，返回一个整数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">9</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">n</span></span>
<span class="line"><span style="color:#6A737D;">// 1n</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">9</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">n</span></span>
<span class="line"><span style="color:#6A737D;">// 1n</span></span></code></pre></div><p>几乎所有的数值运算符都可以用在 BigInt，但是有两个例外。</p><ul><li>不带符号的右移位运算符<code>&gt;&gt;&gt;</code></li><li>一元的求正运算符<code>+</code></li></ul><p>上面两个运算符用在 BigInt 会报错。前者是因为<code>&gt;&gt;&gt;</code>运算符是不带符号的，但是 BigInt 总是带有符号的，导致该运算无意义，完全等同于右移运算符<code>&gt;&gt;</code>。后者是因为一元运算符<code>+</code>在 asm.js 里面总是返回 Number 类型，为了不破坏 asm.js 就规定<code>+1n</code>会报错。</p><p>BigInt 不能与普通数值进行混合运算。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">1</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.3</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 报错</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.3</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 报错</span></span></code></pre></div><p>上面代码报错是因为无论返回的是 BigInt 或 Number，都会导致丢失精度信息。比如<code>(2n**53n + 1n) + 0.5</code>这个表达式，如果返回 BigInt 类型，<code>0.5</code>这个小数部分会丢失；如果返回 Number 类型，有效精度只能保持 53 位，导致精度下降。</p><p>同样的原因，如果一个标准库函数的参数预期是 Number 类型，但是得到的是一个 BigInt，就会报错。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 错误的写法</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">sqrt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 正确的写法</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">sqrt</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// 2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 错误的写法</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">sqrt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 正确的写法</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">sqrt</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// 2</span></span></code></pre></div><p>上面代码中，<code>Math.sqrt</code>的参数预期是 Number 类型，如果是 BigInt 就会报错，必须先用<code>Number</code>方法转一下类型，才能进行计算。</p><p>asm.js 里面，<code>|0</code>跟在一个数值的后面会返回一个32位整数。根据不能与 Number 类型混合运算的规则，BigInt 如果与<code>|0</code>进行运算会报错。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">1</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 报错</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 报错</span></span></code></pre></div><h3 id="其他运算" tabindex="-1">其他运算 <a class="header-anchor" href="#其他运算" aria-label="Permalink to &quot;其他运算&quot;">​</a></h3><p>BigInt 对应的布尔值，与 Number 类型一致，即<code>0n</code>会转为<code>false</code>，其他值转为<code>true</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;if&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;else&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// else</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;if&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;else&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// else</span></span></code></pre></div><p>上面代码中，<code>0n</code>对应<code>false</code>，所以会进入<code>else</code>子句。</p><p>比较运算符（比如<code>&gt;</code>）和相等运算符（<code>==</code>）允许 BigInt 与其他类型的值混合计算，因为这样做不会损失精度。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">0</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">0</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">0</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">0</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">0</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">0</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#005CC5;">0</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#005CC5;">0</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#005CC5;">0</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#005CC5;">0</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// false</span></span></code></pre></div><p>BigInt 与字符串混合运算时，会先转为字符串，再进行运算。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">123</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// &quot;123&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">123</span><span style="color:#D73A49;">n</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// &quot;123&quot;</span></span></code></pre></div>`,249),e=[o];function c(t,r,y,E,i,d){return a(),n("div",null,e)}const u=s(l,[["render",c]]);export{h as __pageData,u as default};
