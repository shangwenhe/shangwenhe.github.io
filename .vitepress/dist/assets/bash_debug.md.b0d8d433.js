import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.681fc4ae.js";const C=JSON.parse('{"title":"脚本除错","description":"","frontmatter":{},"headers":[],"relativePath":"bash/debug.md","filePath":"bash/debug.md"}'),l={name:"bash/debug.md"},o=p(`<h1 id="脚本除错" tabindex="-1">脚本除错 <a class="header-anchor" href="#脚本除错" aria-label="Permalink to &quot;脚本除错&quot;">​</a></h1><p>本章介绍如何对 Shell 脚本除错。</p><h2 id="常见错误" tabindex="-1">常见错误 <a class="header-anchor" href="#常见错误" aria-label="Permalink to &quot;常见错误&quot;">​</a></h2><p>编写 Shell 脚本的时候，一定要考虑到命令失败的情况，否则很容易出错。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#! /bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">dir_name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">/path/not/exist</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> $dir_name</span></span>
<span class="line"><span style="color:#B392F0;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#! /bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">dir_name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">/path/not/exist</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> $dir_name</span></span>
<span class="line"><span style="color:#6F42C1;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span></span></code></pre></div><p>上面脚本中，如果目录<code>$dir_name</code>不存在，<code>cd $dir_name</code>命令就会执行失败。这时，就不会改变当前目录，脚本会继续执行下去，导致<code>rm *</code>命令删光当前目录的文件。</p><p>如果改成下面的样子，也会有问题。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> $dir_name &amp;&amp; </span><span style="color:#B392F0;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> $dir_name &amp;&amp; </span><span style="color:#6F42C1;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span></span></code></pre></div><p>上面脚本中，只有<code>cd $dir_name</code>执行成功，才会执行<code>rm *</code>。但是，如果变量<code>$dir_name</code>为空，<code>cd</code>就会进入用户主目录，从而删光用户主目录的文件。</p><p>下面的写法才是正确的。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[[ </span><span style="color:#F97583;">-d</span><span style="color:#E1E4E8;"> $dir_name ]] &amp;&amp; </span><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> $dir_name &amp;&amp; </span><span style="color:#B392F0;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[[ </span><span style="color:#D73A49;">-d</span><span style="color:#24292E;"> $dir_name ]] &amp;&amp; </span><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> $dir_name &amp;&amp; </span><span style="color:#6F42C1;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span></span></code></pre></div><p>上面代码中，先判断目录<code>$dir_name</code>是否存在，然后才执行其他操作。</p><p>如果不放心删除什么文件，可以先打印出来看一下。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[[ </span><span style="color:#F97583;">-d</span><span style="color:#E1E4E8;"> $dir_name ]] &amp;&amp; </span><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> $dir_name &amp;&amp; </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[[ </span><span style="color:#D73A49;">-d</span><span style="color:#24292E;"> $dir_name ]] &amp;&amp; </span><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> $dir_name &amp;&amp; </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span></span></code></pre></div><p>上面命令中，<code>echo rm *</code>不会删除文件，只会打印出来要删除的文件。</p><h2 id="bash的-x参数" tabindex="-1"><code>bash</code>的<code>-x</code>参数 <a class="header-anchor" href="#bash的-x参数" aria-label="Permalink to &quot;\`bash\`的\`-x\`参数&quot;">​</a></h2><p><code>bash</code>的<code>-x</code>参数可以在执行每一行命令之前，打印该命令。一旦出错，这样就比较容易追查。</p><p>下面是一个脚本<code>script.sh</code>。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># script.sh</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">world</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># script.sh</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello</span><span style="color:#24292E;"> </span><span style="color:#032F62;">world</span></span></code></pre></div><p>加上<code>-x</code>参数，执行每条命令之前，都会显示该命令。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bash</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-x</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">script.sh</span></span>
<span class="line"><span style="color:#B392F0;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">world</span></span>
<span class="line"><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">world</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bash</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-x</span><span style="color:#24292E;"> </span><span style="color:#032F62;">script.sh</span></span>
<span class="line"><span style="color:#6F42C1;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello</span><span style="color:#24292E;"> </span><span style="color:#032F62;">world</span></span>
<span class="line"><span style="color:#6F42C1;">hello</span><span style="color:#24292E;"> </span><span style="color:#032F62;">world</span></span></code></pre></div><p>上面例子中，行首为<code>+</code>的行，显示该行是所要执行的命令，下一行才是该命令的执行结果。</p><p>下面再看一个<code>-x</code>写在脚本内部的例子。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#! /bin/bash -x</span></span>
<span class="line"><span style="color:#6A737D;"># trouble: script to demonstrate common errors</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">number</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [ $number </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> ]; </span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Number is equal to 1.&quot;</span></span>
<span class="line"><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Number is not equal to 1.&quot;</span></span>
<span class="line"><span style="color:#F97583;">fi</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#! /bin/bash -x</span></span>
<span class="line"><span style="color:#6A737D;"># trouble: script to demonstrate common errors</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">number</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> [ $number </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> ]; </span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Number is equal to 1.&quot;</span></span>
<span class="line"><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Number is not equal to 1.&quot;</span></span>
<span class="line"><span style="color:#D73A49;">fi</span></span></code></pre></div><p>上面的脚本执行之后，会输出每一行命令。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">trouble</span></span>
<span class="line"><span style="color:#B392F0;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">number=</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#B392F0;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;[&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;]&#39;</span></span>
<span class="line"><span style="color:#B392F0;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Number is equal to 1.&#39;</span></span>
<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">equal</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">trouble</span></span>
<span class="line"><span style="color:#6F42C1;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">number=</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#6F42C1;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;[&#39;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;]&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Number is equal to 1.&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">equal</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">.</span></span></code></pre></div><p>输出的命令之前的<code>+</code>号，是由系统变量<code>PS4</code>决定，可以修改这个变量。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PS4=&#39;$LINENO + &#39;</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">trouble</span></span>
<span class="line"><span style="color:#B392F0;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">number=</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#B392F0;">7</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;[&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;]&#39;</span></span>
<span class="line"><span style="color:#B392F0;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Number is equal to 1.&#39;</span></span>
<span class="line"><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">equal</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">export</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PS4=&#39;$LINENO + &#39;</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">trouble</span></span>
<span class="line"><span style="color:#6F42C1;">5</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">number=</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#6F42C1;">7</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;[&#39;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;]&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">8</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Number is equal to 1.&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">Number</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">equal</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">.</span></span></code></pre></div><p>另外，<code>set</code>命令也可以设置 Shell 的行为参数，有利于脚本除错，详见《set 命令》一章。</p><h2 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h2><p>有一些环境变量常用于除错。</p><h3 id="lineno" tabindex="-1">LINENO <a class="header-anchor" href="#lineno" aria-label="Permalink to &quot;LINENO&quot;">​</a></h3><p>变量<code>LINENO</code>返回它在脚本里面的行号。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;This is line </span><span style="color:#E1E4E8;">$LINENO</span><span style="color:#9ECBFF;">&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;This is line </span><span style="color:#24292E;">$LINENO</span><span style="color:#032F62;">&quot;</span></span></code></pre></div><p>执行上面的脚本<code>test.sh</code>，<code>$LINENO</code>会返回<code>3</code>。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./test.sh</span></span>
<span class="line"><span style="color:#B392F0;">This</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">line</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./test.sh</span></span>
<span class="line"><span style="color:#6F42C1;">This</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">line</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span></code></pre></div><h3 id="funcname" tabindex="-1">FUNCNAME <a class="header-anchor" href="#funcname" aria-label="Permalink to &quot;FUNCNAME&quot;">​</a></h3><p>变量<code>FUNCNAME</code>返回一个数组，内容是当前的函数调用堆栈。该数组的0号成员是当前调用的函数，1号成员是调用当前函数的函数，以此类推。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func1</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;func1: FUNCNAME0 is \${</span><span style="color:#E1E4E8;">FUNCNAME</span><span style="color:#9ECBFF;">[0]}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;func1: FUNCNAME1 is \${</span><span style="color:#E1E4E8;">FUNCNAME</span><span style="color:#9ECBFF;">[1]}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;func1: FUNCNAME2 is \${</span><span style="color:#E1E4E8;">FUNCNAME</span><span style="color:#9ECBFF;">[2]}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">func2</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func2</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;func2: FUNCNAME0 is \${</span><span style="color:#E1E4E8;">FUNCNAME</span><span style="color:#9ECBFF;">[0]}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;func2: FUNCNAME1 is \${</span><span style="color:#E1E4E8;">FUNCNAME</span><span style="color:#9ECBFF;">[1]}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;func2: FUNCNAME2 is \${</span><span style="color:#E1E4E8;">FUNCNAME</span><span style="color:#9ECBFF;">[2]}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">func1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func1</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;func1: FUNCNAME0 is \${</span><span style="color:#24292E;">FUNCNAME</span><span style="color:#032F62;">[0]}&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;func1: FUNCNAME1 is \${</span><span style="color:#24292E;">FUNCNAME</span><span style="color:#032F62;">[1]}&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;func1: FUNCNAME2 is \${</span><span style="color:#24292E;">FUNCNAME</span><span style="color:#032F62;">[2]}&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">func2</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func2</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;func2: FUNCNAME0 is \${</span><span style="color:#24292E;">FUNCNAME</span><span style="color:#032F62;">[0]}&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;func2: FUNCNAME1 is \${</span><span style="color:#24292E;">FUNCNAME</span><span style="color:#032F62;">[1]}&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;func2: FUNCNAME2 is \${</span><span style="color:#24292E;">FUNCNAME</span><span style="color:#032F62;">[2]}&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">func1</span></span></code></pre></div><p>执行上面的脚本<code>test.sh</code>，结果如下。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./test.sh</span></span>
<span class="line"><span style="color:#B392F0;">func1:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">FUNCNAME0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">func1</span></span>
<span class="line"><span style="color:#B392F0;">func1:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">FUNCNAME1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main</span></span>
<span class="line"><span style="color:#B392F0;">func1:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">FUNCNAME2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span></span>
<span class="line"><span style="color:#B392F0;">func2:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">FUNCNAME0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">func2</span></span>
<span class="line"><span style="color:#B392F0;">func2:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">FUNCNAME1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">func1</span></span>
<span class="line"><span style="color:#B392F0;">func2:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">FUNCNAME2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./test.sh</span></span>
<span class="line"><span style="color:#6F42C1;">func1:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">FUNCNAME0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">func1</span></span>
<span class="line"><span style="color:#6F42C1;">func1:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">FUNCNAME1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main</span></span>
<span class="line"><span style="color:#6F42C1;">func1:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">FUNCNAME2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span></span>
<span class="line"><span style="color:#6F42C1;">func2:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">FUNCNAME0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">func2</span></span>
<span class="line"><span style="color:#6F42C1;">func2:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">FUNCNAME1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">func1</span></span>
<span class="line"><span style="color:#6F42C1;">func2:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">FUNCNAME2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main</span></span></code></pre></div><p>上面例子中，执行<code>func1</code>时，变量<code>FUNCNAME</code>的0号成员是<code>func1</code>，1号成员是调用<code>func1</code>的主脚本<code>main</code>。执行<code>func2</code>时，变量<code>FUNCNAME</code>的0号成员是<code>func2</code>，1号成员是调用<code>func2</code>的<code>func1</code>。</p><h3 id="bash-source" tabindex="-1">BASH_SOURCE <a class="header-anchor" href="#bash-source" aria-label="Permalink to &quot;BASH_SOURCE&quot;">​</a></h3><p>变量<code>BASH_SOURCE</code>返回一个数组，内容是当前的脚本调用堆栈。该数组的0号成员是当前执行的脚本，1号成员是调用当前脚本的脚本，以此类推，跟变量<code>FUNCNAME</code>是一一对应关系。</p><p>下面有两个子脚本<code>lib1.sh</code>和<code>lib2.sh</code>。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># lib1.sh</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func1</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;func1: BASH_SOURCE0 is \${</span><span style="color:#E1E4E8;">BASH_SOURCE</span><span style="color:#9ECBFF;">[0]}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;func1: BASH_SOURCE1 is \${</span><span style="color:#E1E4E8;">BASH_SOURCE</span><span style="color:#9ECBFF;">[1]}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;func1: BASH_SOURCE2 is \${</span><span style="color:#E1E4E8;">BASH_SOURCE</span><span style="color:#9ECBFF;">[2]}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">func2</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># lib1.sh</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func1</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;func1: BASH_SOURCE0 is \${</span><span style="color:#24292E;">BASH_SOURCE</span><span style="color:#032F62;">[0]}&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;func1: BASH_SOURCE1 is \${</span><span style="color:#24292E;">BASH_SOURCE</span><span style="color:#032F62;">[1]}&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;func1: BASH_SOURCE2 is \${</span><span style="color:#24292E;">BASH_SOURCE</span><span style="color:#032F62;">[2]}&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">func2</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># lib2.sh</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func2</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;func2: BASH_SOURCE0 is \${</span><span style="color:#E1E4E8;">BASH_SOURCE</span><span style="color:#9ECBFF;">[0]}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;func2: BASH_SOURCE1 is \${</span><span style="color:#E1E4E8;">BASH_SOURCE</span><span style="color:#9ECBFF;">[1]}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;func2: BASH_SOURCE2 is \${</span><span style="color:#E1E4E8;">BASH_SOURCE</span><span style="color:#9ECBFF;">[2]}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># lib2.sh</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func2</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;func2: BASH_SOURCE0 is \${</span><span style="color:#24292E;">BASH_SOURCE</span><span style="color:#032F62;">[0]}&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;func2: BASH_SOURCE1 is \${</span><span style="color:#24292E;">BASH_SOURCE</span><span style="color:#032F62;">[1]}&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;func2: BASH_SOURCE2 is \${</span><span style="color:#24292E;">BASH_SOURCE</span><span style="color:#032F62;">[2]}&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，主脚本<code>main.sh</code>调用上面两个子脚本。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="color:#6A737D;"># main.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">source</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lib1.sh</span></span>
<span class="line"><span style="color:#79B8FF;">source</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lib2.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">func1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="color:#6A737D;"># main.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">source</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lib1.sh</span></span>
<span class="line"><span style="color:#005CC5;">source</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lib2.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">func1</span></span></code></pre></div><p>执行主脚本<code>main.sh</code>，会得到下面的结果。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./main.sh</span></span>
<span class="line"><span style="color:#B392F0;">func1:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">BASH_SOURCE0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lib1.sh</span></span>
<span class="line"><span style="color:#B392F0;">func1:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">BASH_SOURCE1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./main.sh</span></span>
<span class="line"><span style="color:#B392F0;">func1:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">BASH_SOURCE2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span></span>
<span class="line"><span style="color:#B392F0;">func2:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">BASH_SOURCE0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lib2.sh</span></span>
<span class="line"><span style="color:#B392F0;">func2:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">BASH_SOURCE1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lib1.sh</span></span>
<span class="line"><span style="color:#B392F0;">func2:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">BASH_SOURCE2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./main.sh</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./main.sh</span></span>
<span class="line"><span style="color:#6F42C1;">func1:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">BASH_SOURCE0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lib1.sh</span></span>
<span class="line"><span style="color:#6F42C1;">func1:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">BASH_SOURCE1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./main.sh</span></span>
<span class="line"><span style="color:#6F42C1;">func1:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">BASH_SOURCE2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span></span>
<span class="line"><span style="color:#6F42C1;">func2:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">BASH_SOURCE0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lib2.sh</span></span>
<span class="line"><span style="color:#6F42C1;">func2:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">BASH_SOURCE1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lib1.sh</span></span>
<span class="line"><span style="color:#6F42C1;">func2:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">BASH_SOURCE2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./main.sh</span></span></code></pre></div><p>上面例子中，执行函数<code>func1</code>时，变量<code>BASH_SOURCE</code>的0号成员是<code>func1</code>所在的脚本<code>lib1.sh</code>，1号成员是主脚本<code>main.sh</code>；执行函数<code>func2</code>时，变量<code>BASH_SOURCE</code>的0号成员是<code>func2</code>所在的脚本<code>lib2.sh</code>，1号成员是调用<code>func2</code>的脚本<code>lib1.sh</code>。</p><h3 id="bash-lineno" tabindex="-1">BASH_LINENO <a class="header-anchor" href="#bash-lineno" aria-label="Permalink to &quot;BASH_LINENO&quot;">​</a></h3><p>变量<code>BASH_LINENO</code>返回一个数组，内容是每一轮调用对应的行号。<code>\${BASH_LINENO[$i]}</code>跟<code>\${FUNCNAME[$i]}</code>是一一对应关系，表示<code>\${FUNCNAME[$i]}</code>在调用它的脚本文件<code>\${BASH_SOURCE[$i+1]}</code>里面的行号。</p><p>下面有两个子脚本<code>lib1.sh</code>和<code>lib2.sh</code>。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># lib1.sh</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func1</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;func1: BASH_LINENO is \${</span><span style="color:#E1E4E8;">BASH_LINENO</span><span style="color:#9ECBFF;">[0]}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;func1: FUNCNAME is \${</span><span style="color:#E1E4E8;">FUNCNAME</span><span style="color:#9ECBFF;">[0]}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;func1: BASH_SOURCE is \${</span><span style="color:#E1E4E8;">BASH_SOURCE</span><span style="color:#9ECBFF;">[1]}&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">func2</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># lib1.sh</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func1</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;func1: BASH_LINENO is \${</span><span style="color:#24292E;">BASH_LINENO</span><span style="color:#032F62;">[0]}&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;func1: FUNCNAME is \${</span><span style="color:#24292E;">FUNCNAME</span><span style="color:#032F62;">[0]}&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;func1: BASH_SOURCE is \${</span><span style="color:#24292E;">BASH_SOURCE</span><span style="color:#032F62;">[1]}&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">func2</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># lib2.sh</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func2</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;func2: BASH_LINENO is \${</span><span style="color:#E1E4E8;">BASH_LINENO</span><span style="color:#9ECBFF;">[0]}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;func2: FUNCNAME is \${</span><span style="color:#E1E4E8;">FUNCNAME</span><span style="color:#9ECBFF;">[0]}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;func2: BASH_SOURCE is \${</span><span style="color:#E1E4E8;">BASH_SOURCE</span><span style="color:#9ECBFF;">[1]}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># lib2.sh</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func2</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;func2: BASH_LINENO is \${</span><span style="color:#24292E;">BASH_LINENO</span><span style="color:#032F62;">[0]}&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;func2: FUNCNAME is \${</span><span style="color:#24292E;">FUNCNAME</span><span style="color:#032F62;">[0]}&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;func2: BASH_SOURCE is \${</span><span style="color:#24292E;">BASH_SOURCE</span><span style="color:#032F62;">[1]}&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，主脚本<code>main.sh</code>调用上面两个子脚本。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="color:#6A737D;"># main.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">source</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lib1.sh</span></span>
<span class="line"><span style="color:#79B8FF;">source</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lib2.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">func1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="color:#6A737D;"># main.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">source</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lib1.sh</span></span>
<span class="line"><span style="color:#005CC5;">source</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lib2.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">func1</span></span></code></pre></div><p>执行主脚本<code>main.sh</code>，会得到下面的结果。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./main.sh</span></span>
<span class="line"><span style="color:#B392F0;">func1:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">BASH_LINENO</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span></span>
<span class="line"><span style="color:#B392F0;">func1:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">FUNCNAME</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">func1</span></span>
<span class="line"><span style="color:#B392F0;">func1:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">BASH_SOURCE</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main.sh</span></span>
<span class="line"><span style="color:#B392F0;">func2:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">BASH_LINENO</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span></span>
<span class="line"><span style="color:#B392F0;">func2:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">FUNCNAME</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">func2</span></span>
<span class="line"><span style="color:#B392F0;">func2:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">BASH_SOURCE</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lib1.sh</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./main.sh</span></span>
<span class="line"><span style="color:#6F42C1;">func1:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">BASH_LINENO</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span></span>
<span class="line"><span style="color:#6F42C1;">func1:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">FUNCNAME</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">func1</span></span>
<span class="line"><span style="color:#6F42C1;">func1:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">BASH_SOURCE</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main.sh</span></span>
<span class="line"><span style="color:#6F42C1;">func2:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">BASH_LINENO</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span></span>
<span class="line"><span style="color:#6F42C1;">func2:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">FUNCNAME</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">func2</span></span>
<span class="line"><span style="color:#6F42C1;">func2:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">BASH_SOURCE</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lib1.sh</span></span></code></pre></div><p>上面例子中，函数<code>func1</code>是在<code>main.sh</code>的第7行调用，函数<code>func2</code>是在<code>lib1.sh</code>的第8行调用的。</p>`,62),e=[o];function c(t,r,E,y,i,F){return n(),a("div",null,e)}const u=s(l,[["render",c]]);export{C as __pageData,u as default};
