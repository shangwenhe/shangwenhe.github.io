import{_ as e,o,c as a,Q as n}from"./chunks/framework.681fc4ae.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"npm/command/npm.md","filePath":"npm/command/npm.md"}'),r={name:"npm/command/npm.md"},t=n('<h2 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">comman</span><span style="color:#E1E4E8;">d</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> [args]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">comman</span><span style="color:#24292E;">d</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> [args]</span></span></code></pre></div><h2 id="version" tabindex="-1"><code>version</code> <a class="header-anchor" href="#version" aria-label="Permalink to &quot;`version`&quot;">​</a></h2><p>7.24.2</p><h2 id="描述" tabindex="-1">描述 <a class="header-anchor" href="#描述" aria-label="Permalink to &quot;描述&quot;">​</a></h2><p>npm 是 Node JavaScript 平台的包管理器。它将模块放置到位，以便节点可以找到它们，并智能地管理依赖冲突。</p><p>它的可配置性极强，可以支持各种用例。最常见的是，您使用它来发布、发现、安装和开发节点程序。</p><p>运行<code>npm help</code>以获取可用命令的列表。</p><h2 id="important" tabindex="-1"><code>important</code> <a class="header-anchor" href="#important" aria-label="Permalink to &quot;`important`&quot;">​</a></h2><p><a href="https://registry.npmjs.org/" target="_blank" rel="noreferrer">默认情况下，npm 已预先配置为使用https://registry.npmjs.org</a>上的 npm 公共注册表。使用 npm 公共注册表须遵守<a href="https://docs.npmjs.com/policies/terms%E4%B8%8A%E6%8F%90%E4%BE%9B%E7%9A%84%E4%BD%BF%E7%94%A8%E6%9D%A1%E6%AC%BE%E3%80%82" target="_blank" rel="noreferrer">https://docs.npmjs.com/policies/terms上提供的使用条款。</a></p><p>您可以将 npm 配置为使用您喜欢的任何兼容注册表，甚至运行您自己的注册表。使用他人的注册表受其使用条款的约束。</p><h2 id="introduction" tabindex="-1"><code>introduction</code> <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;`introduction`&quot;">​</a></h2><p>你可能因为想要安装东西而使用了 npm。</p><p>您最有可能想要在任何节点程序中运行的第一件事就是<code>npm install</code>安装其依赖项。</p><p>您还可以运行<code>npm install blerg</code>安装最新版本的“blerg”。查看<code>npm install</code>更多信息。它可以做很多事情。</p><p>使用该<code>npm search</code>命令显示公共注册表中可用的所有内容。用于<code>npm ls</code>显示您已安装的所有内容。</p><h2 id="dependencies" tabindex="-1"><code>dependencies</code> <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;`dependencies`&quot;">​</a></h2><p>如果包使用 git URL 列出依赖项，npm 将使用该<code>git</code>命令安装该依赖项，如果未安装，则会生成错误。</p><p>如果 npm 尝试安装的包之一是本机节点模块并且需要编译 C++ 代码，则 npm 将使用<a href="https://github.com/nodejs/node-gyp" target="_blank" rel="noreferrer">node-gyp</a>来完成该任务。对于 Unix 系统，<a href="https://github.com/nodejs/node-gyp" target="_blank" rel="noreferrer">node-gyp</a>需要 Python、make 和像 GCC 这样的构建链。在 Windows 上，需要 Python 和 Microsoft Visual Studio C++。有关更多信息，请访问<a href="https://github.com/nodejs/node-gyp" target="_blank" rel="noreferrer">node-gyp 存储库</a>和<a href="https://github.com/nodejs/node-gyp/wiki" target="_blank" rel="noreferrer">node-gyp Wiki</a>。</p><h2 id="directories" tabindex="-1"><code>directories</code> <a class="header-anchor" href="#directories" aria-label="Permalink to &quot;`directories`&quot;">​</a></h2><p>请参阅<code>folders</code>以了解 npm 将内容放在哪里。</p><p>特别地，npm 有两种运行模式：</p><ul><li>本地模式：npm 将包安装到当前项目目录中，默认为当前工作目录。软件包安装到<code>./node_modules</code>，垃圾箱安装到<code>./node_modules/.bin</code>。</li><li>全局模式：npm 将软件包安装到安装前缀 at<code>$npm_config_prefix/lib/node_modules</code>和 bin 中<code>$npm_config_prefix/bin</code>。</li></ul><p>本地模式是默认模式。在任何命令上使用<code>-g</code>或<code>--global</code>即可改为在全局模式下运行。</p><h2 id="developer-usage" tabindex="-1"><code>developer-usage</code> <a class="header-anchor" href="#developer-usage" aria-label="Permalink to &quot;`developer-usage`&quot;">​</a></h2><p>如果您使用 npm 开发和发布代码，请查看以下帮助主题：</p><ul><li>json：创建一个 package.json 文件。看<code>package.json</code>。</li><li>link：将当前工作代码链接到 Node 的路径中，这样您就不必每次进行更改时都重新安装。用于<code>npm link</code>执行此操作。</li><li>安装：如果不需要符号链接，最好安装一些东西。特别是，从注册表安装其他人的代码是通过<code>npm install</code></li><li>adduser：创建帐户或登录。当您执行此操作时，npm 会将凭据存储在用户配置文件中。</li><li>发布：使用该<code>npm publish</code>命令将代码上传到注册表。</li></ul><h2 id="configuration" tabindex="-1"><code>configuration</code> <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;`configuration`&quot;">​</a></h2><p>npm 的可配置性非常强。它从 5 个位置读取其配置选项。</p><ul><li>命令行开关：使用<code>--key val</code>. 所有键都带有一个值，即使它们是布尔值（配置解析器在解析时不知道选项是什么）。如果您不提供值 ( <code>--key</code>)，则该选项将设置为布尔值<code>true</code>。</li><li>环境变量：通过在环境变量中的名称前加上 . 来设置任何配置<code>npm_config_</code>。例如，<code>export npm_config_key=val</code>。</li><li>用户配置：该文件<code>$HOME/.npmrc</code>是 ini 格式的配置列表。如果存在，则对其进行解析。如果<code>userconfig</code>在 cli 或 env 中设置了该选项，则将使用该文件。</li><li>全局配置：找到的文件<code>./etc/npmrc</code>（相对于全局前缀，如果找到的话将被解析。<code>npm prefix</code>有关全局前缀的更多信息，请参阅 参考资料。如果<code>globalconfig</code>在 cli、env 或用户配置中设置了该选项，则解析该文件反而。</li><li>默认值：npm 的默认配置选项在 lib/utils/config-defs.js 中定义。这些不得更改。</li></ul><p>请参阅<code>config</code>参考资料 了解更多信息。</p><h2 id="contributions" tabindex="-1"><code>contributions</code> <a class="header-anchor" href="#contributions" aria-label="Permalink to &quot;`contributions`&quot;">​</a></h2><p>欢迎补丁！</p><p>如果您想提供帮助，但不知道该做什么，请阅读<a href="https://github.com/npm/cli/blob/latest/CONTRIBUTING.md" target="_blank" rel="noreferrer">贡献指南</a>并检查问题列表。</p><h2 id="bugs" tabindex="-1"><code>bugs</code> <a class="header-anchor" href="#bugs" aria-label="Permalink to &quot;`bugs`&quot;">​</a></h2><p>当您发现问题时，请报告它们：<a href="https://github.com/npm/cli/issues" target="_blank" rel="noreferrer">https://github.com/npm/cli/issues</a></p><p>请务必遵循模板和错误报告指南。</p>',37),c=[t];function i(s,p,d,l,h,m){return o(),a("div",null,c)}const b=e(r,[["render",i]]);export{g as __pageData,b as default};
