import{_ as s,o as n,c as o,Q as l}from"./chunks/framework.681fc4ae.js";const v=JSON.parse('{"title":"GlobalEventHandlers 接口","description":"","frontmatter":{},"headers":[],"relativePath":"js/events/globaleventhandlers.md","filePath":"js/events/globaleventhandlers.md"}'),a={name:"js/events/globaleventhandlers.md"},e=l(`<h1 id="globaleventhandlers-接口" tabindex="-1">GlobalEventHandlers 接口 <a class="header-anchor" href="#globaleventhandlers-接口" aria-label="Permalink to &quot;GlobalEventHandlers 接口&quot;">​</a></h1><p>指定事件的回调函数，推荐使用的方法是元素的<code>addEventListener</code>方法。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">div.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;click&#39;</span><span style="color:#E1E4E8;">, clickHandler, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">div.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">, clickHandler, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span></code></pre></div><p>除了之外，还有一种方法可以直接指定事件的回调函数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">div.onclick </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clickHandler;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">div.onclick </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clickHandler;</span></span></code></pre></div><p>这个接口是由<code>GlobalEventHandlers</code>接口提供的。它的优点是使用比较方便，缺点是只能为每个事件指定一个回调函数，并且无法指定事件触发的阶段（捕获阶段还是冒泡阶段）。</p><p><code>HTMLElement</code>、<code>Document</code>和<code>Window</code>都继承了这个接口，也就是说，各种 HTML 元素、<code>document</code>对象、<code>window</code>对象上面都可以使用<code>GlobalEventHandlers</code>接口提供的属性。下面就列出这个接口提供的主要的事件属性。</p><h2 id="globaleventhandlers-onabort" tabindex="-1">GlobalEventHandlers.onabort <a class="header-anchor" href="#globaleventhandlers-onabort" aria-label="Permalink to &quot;GlobalEventHandlers.onabort&quot;">​</a></h2><p>某个对象的<code>abort</code>事件（停止加载）发生时，就会调用<code>onabort</code>属性指定的回调函数。</p><p>各种元素的停止加载事件，到底如何触发，目前并没有统一的规定。因此实际上，这个属性现在一般只用在<code>&lt;img&gt;</code>元素上面。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// HTML 代码如下</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;img src=&quot;example.jpg&quot; id=&quot;img&quot;&gt;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> img </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;img&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">img.</span><span style="color:#B392F0;">onabort</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;image load aborted.&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// HTML 代码如下</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;img src=&quot;example.jpg&quot; id=&quot;img&quot;&gt;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> img </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;img&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">img.</span><span style="color:#6F42C1;">onabort</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;image load aborted.&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="globaleventhandlers-onerror" tabindex="-1">GlobalEventHandlers.onerror <a class="header-anchor" href="#globaleventhandlers-onerror" aria-label="Permalink to &quot;GlobalEventHandlers.onerror&quot;">​</a></h2><p><code>error</code>事件发生时，就会调用<code>onerror</code>属性指定的回调函数。</p><p><code>error</code>事件分成两种。</p><p>一种是 JavaScript 的运行时错误，这会传到<code>window</code>对象，导致<code>window.onerror()</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">onerror</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">lineno</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">colno</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">onerror</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">message</span><span style="color:#24292E;">, </span><span style="color:#E36209;">source</span><span style="color:#24292E;">, </span><span style="color:#E36209;">lineno</span><span style="color:#24292E;">, </span><span style="color:#E36209;">colno</span><span style="color:#24292E;">, </span><span style="color:#E36209;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>window.onerror</code>的处理函数共接受五个参数，含义如下。</p><ul><li>message：错误信息字符串</li><li>source：报错脚本的 URL</li><li>lineno：报错的行号，是一个整数</li><li>colno：报错的列号，是一个整数</li><li>error： 错误对象</li></ul><p>另一种是资源加载错误，比如<code>&lt;img&gt;</code>或<code>&lt;script&gt;</code>加载的资源出现加载错误。这时，Error 对象会传到对应的元素，导致该元素的<code>onerror</code>属性开始执行。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">element.</span><span style="color:#B392F0;">onerror</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">element.</span><span style="color:#6F42C1;">onerror</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意，一般来说，资源的加载错误不会触发<code>window.onerror</code>。</p><h2 id="globaleventhandlers-onload、globaleventhandlers-onloadstart" tabindex="-1">GlobalEventHandlers.onload、GlobalEventHandlers.onloadstart <a class="header-anchor" href="#globaleventhandlers-onload、globaleventhandlers-onloadstart" aria-label="Permalink to &quot;GlobalEventHandlers.onload、GlobalEventHandlers.onloadstart&quot;">​</a></h2><p>元素完成加载时，会触发<code>load</code>事件，执行<code>onload()</code>。它的典型使用场景是<code>window</code>对象和<code>&lt;img&gt;</code>元素。对于<code>window</code>对象来说，只有页面的所有资源加载完成（包括图片、脚本、样式表、字体等所有外部资源），才会触发<code>load</code>事件。</p><p>对于<code>&lt;img&gt;</code>和<code>&lt;video&gt;</code>等元素，加载开始时还会触发<code>loadstart</code>事件，导致执行<code>onloadstart</code>。</p><h2 id="globaleventhandlers-onfocus-globaleventhandlers-onblur" tabindex="-1">GlobalEventHandlers.onfocus，GlobalEventHandlers.onblur <a class="header-anchor" href="#globaleventhandlers-onfocus-globaleventhandlers-onblur" aria-label="Permalink to &quot;GlobalEventHandlers.onfocus，GlobalEventHandlers.onblur&quot;">​</a></h2><p>当前元素获得焦点时，会触发<code>element.onfocus</code>；失去焦点时，会触发<code>element.onblur</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">element.</span><span style="color:#B392F0;">onfocus</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;onfocus event detected!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">element.</span><span style="color:#B392F0;">onblur</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;onblur event detected!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">element.</span><span style="color:#6F42C1;">onfocus</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;onfocus event detected!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">element.</span><span style="color:#6F42C1;">onblur</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;onblur event detected!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>注意，如果不是可以接受用户输入的元素，要触发<code>onfocus</code>，该元素必须有<code>tabindex</code>属性。</p><h2 id="globaleventhandlers-onscroll" tabindex="-1">GlobalEventHandlers.onscroll <a class="header-anchor" href="#globaleventhandlers-onscroll" aria-label="Permalink to &quot;GlobalEventHandlers.onscroll&quot;">​</a></h2><p>页面或元素滚动时，会触发<code>scroll</code>事件，导致执行<code>onscroll()</code>。</p><h2 id="globaleventhandlers-oncontextmenu-globaleventhandlers-onshow" tabindex="-1">GlobalEventHandlers.oncontextmenu，GlobalEventHandlers.onshow <a class="header-anchor" href="#globaleventhandlers-oncontextmenu-globaleventhandlers-onshow" aria-label="Permalink to &quot;GlobalEventHandlers.oncontextmenu，GlobalEventHandlers.onshow&quot;">​</a></h2><p>用户在页面上按下鼠标的右键，会触发<code>contextmenu</code>事件，导致执行<code>oncontextmenu()</code>。如果该属性执行后返回<code>false</code>，就等于禁止了右键菜单。<code>document.oncontextmenu</code>与<code>window.oncontextmenu</code>效果一样。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">oncontextmenu</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">oncontextmenu</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>上面代码中，<code>oncontextmenu</code>属性执行后返回<code>false</code>，右键菜单就不会出现。</p><p>元素的右键菜单显示时，会触发该元素的<code>onshow</code>监听函数。</p><h2 id="其他的事件属性" tabindex="-1">其他的事件属性 <a class="header-anchor" href="#其他的事件属性" aria-label="Permalink to &quot;其他的事件属性&quot;">​</a></h2><p>鼠标的事件属性。</p><ul><li>onclick</li><li>ondblclick</li><li>onmousedown</li><li>onmouseenter</li><li>onmouseleave</li><li>onmousemove</li><li>onmouseout</li><li>onmouseover</li><li>onmouseup</li><li>onwheel</li></ul><p>键盘的事件属性。</p><ul><li>onkeydown</li><li>onkeypress</li><li>onkeyup</li></ul><p>焦点的事件属性。</p><ul><li>onblur</li><li>onfocus</li></ul><p>表单的事件属性。</p><ul><li>oninput</li><li>onchange</li><li>onsubmit</li><li>onreset</li><li>oninvalid</li><li>onselect</li></ul><p>触摸的事件属性。</p><ul><li>ontouchcancel</li><li>ontouchend</li><li>ontouchmove</li><li>ontouchstart</li></ul><p>拖动的事件属性分成两类：一类与被拖动元素相关，另一类与接收被拖动元素的容器元素相关。</p><p>被拖动元素的事件属性。</p><ul><li>ondragstart：拖动开始</li><li>ondrag：拖动过程中，每隔几百毫秒触发一次</li><li>ondragend：拖动结束</li></ul><p>接收被拖动元素的容器元素的事件属性。</p><ul><li>ondragenter：被拖动元素进入容器元素。</li><li>ondragleave：被拖动元素离开容器元素。</li><li>ondragover：被拖动元素在容器元素上方，每隔几百毫秒触发一次。</li><li>ondrop：松开鼠标后，被拖动元素放入容器元素。</li></ul><p><code>&lt;dialog&gt;</code>对话框元素的事件属性。</p><ul><li>oncancel</li><li>onclose</li></ul>`,53),p=[e];function c(t,r,i,d,E,y){return n(),o("div",null,p)}const h=s(a,[["render",c]]);export{v as __pageData,h as default};
