import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.681fc4ae.js";const F=JSON.parse('{"title":"字符串操作","description":"","frontmatter":{},"headers":[],"relativePath":"bash/string.md","filePath":"bash/string.md"}'),l={name:"bash/string.md"},o=p(`<h1 id="字符串操作" tabindex="-1">字符串操作 <a class="header-anchor" href="#字符串操作" aria-label="Permalink to &quot;字符串操作&quot;">​</a></h1><p>本章介绍 Bash 字符串操作的语法。</p><h2 id="字符串的长度" tabindex="-1">字符串的长度 <a class="header-anchor" href="#字符串的长度" aria-label="Permalink to &quot;字符串的长度&quot;">​</a></h2><p>获取字符串长度的语法如下。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">\${</span><span style="color:#F97583;">#</span><span style="color:#E1E4E8;">varname}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">\${</span><span style="color:#D73A49;">#</span><span style="color:#24292E;">varname}</span></span></code></pre></div><p>下面是一个例子。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">myPath=/home/cam/book/long.file.name</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${</span><span style="color:#F97583;">#</span><span style="color:#E1E4E8;">myPath}</span></span>
<span class="line"><span style="color:#B392F0;">29</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">myPath=/home/cam/book/long.file.name</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${</span><span style="color:#D73A49;">#</span><span style="color:#24292E;">myPath}</span></span>
<span class="line"><span style="color:#6F42C1;">29</span></span></code></pre></div><p>大括号<code>{}</code>是必需的，否则 Bash 会将<code>$#</code>理解成脚本的参数个数，将变量名理解成文本。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> $</span><span style="color:#9ECBFF;">#myvar</span></span>
<span class="line"><span style="color:#B392F0;">0myvar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> $</span><span style="color:#032F62;">#myvar</span></span>
<span class="line"><span style="color:#6F42C1;">0myvar</span></span></code></pre></div><p>上面例子中，Bash 将<code>$#</code>和<code>myvar</code>分开解释了。</p><h2 id="子字符串" tabindex="-1">子字符串 <a class="header-anchor" href="#子字符串" aria-label="Permalink to &quot;子字符串&quot;">​</a></h2><p>字符串提取子串的语法如下。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">\${varname</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">offset</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">length}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">\${varname</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">offset</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">length}</span></span></code></pre></div><p>上面语法的含义是返回变量<code>$varname</code>的子字符串，从位置<code>offset</code>开始（从<code>0</code>开始计算），长度为<code>length</code>。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">count=frogfootman</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">4</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">4}</span></span>
<span class="line"><span style="color:#B392F0;">foot</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">count=frogfootman</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">4</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">4}</span></span>
<span class="line"><span style="color:#6F42C1;">foot</span></span></code></pre></div><p>上面例子返回字符串<code>frogfootman</code>从4号位置开始的长度为4的子字符串<code>foot</code>。</p><p>这种语法不能直接操作字符串，只能通过变量来读取字符串，并且不会改变原始字符串。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 报错</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">3}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 报错</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">3}</span></span></code></pre></div><p>上面例子中，<code>&quot;hello&quot;</code>不是变量名，导致 Bash 报错。</p><p>如果省略<code>length</code>，则从位置<code>offset</code>开始，一直返回到字符串的结尾。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">count=frogfootman</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">4}</span></span>
<span class="line"><span style="color:#B392F0;">footman</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">count=frogfootman</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">4}</span></span>
<span class="line"><span style="color:#6F42C1;">footman</span></span></code></pre></div><p>上面例子是返回变量<code>count</code>从4号位置一直到结尾的子字符串。</p><p>如果<code>offset</code>为负值，表示从字符串的末尾开始算起。注意，负数前面必须有一个空格， 以防止与<code>\${variable:-word}</code>的变量的设置默认值语法混淆。这时还可以指定<code>length</code>，<code>length</code>可以是正值，也可以是负值（负值不能超过<code>offset</code>的长度）。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo=&quot;This string is long.&quot;</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${foo</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> -5}</span></span>
<span class="line"><span style="color:#B392F0;">long.</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${foo</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> -5</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">2}</span></span>
<span class="line"><span style="color:#B392F0;">lo</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${foo</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> -5</span><span style="color:#F97583;">:-</span><span style="color:#E1E4E8;">2}</span></span>
<span class="line"><span style="color:#B392F0;">lon</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo=&quot;This string is long.&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${foo</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> -5}</span></span>
<span class="line"><span style="color:#6F42C1;">long.</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${foo</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> -5</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">2}</span></span>
<span class="line"><span style="color:#6F42C1;">lo</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${foo</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> -5</span><span style="color:#D73A49;">:-</span><span style="color:#24292E;">2}</span></span>
<span class="line"><span style="color:#6F42C1;">lon</span></span></code></pre></div><p>上面例子中，<code>offset</code>为<code>-5</code>，表示从倒数第5个字符开始截取，所以返回<code>long.</code>。如果指定长度<code>length</code>为<code>2</code>，则返回<code>lo</code>；如果<code>length</code>为<code>-2</code>，表示要排除从字符串末尾开始的2个字符，所以返回<code>lon</code>。</p><h2 id="搜索和替换" tabindex="-1">搜索和替换 <a class="header-anchor" href="#搜索和替换" aria-label="Permalink to &quot;搜索和替换&quot;">​</a></h2><p>Bash 提供字符串搜索和替换的多种方法。</p><p><strong>（1）字符串头部的模式匹配。</strong></p><p>以下两种语法可以检查字符串开头，是否匹配给定的模式。如果匹配成功，就删除匹配的部分，返回剩下的部分。原始变量不会发生变化。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 如果 pattern 匹配变量 variable 的开头，</span></span>
<span class="line"><span style="color:#6A737D;"># 删除最短匹配（非贪婪匹配）的部分，返回剩余部分</span></span>
<span class="line"><span style="color:#E1E4E8;">\${variable</span><span style="color:#F97583;">#</span><span style="color:#E1E4E8;">pattern}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 如果 pattern 匹配变量 variable 的开头，</span></span>
<span class="line"><span style="color:#6A737D;"># 删除最长匹配（贪婪匹配）的部分，返回剩余部分</span></span>
<span class="line"><span style="color:#E1E4E8;">\${variable</span><span style="color:#F97583;">##</span><span style="color:#E1E4E8;">pattern}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 如果 pattern 匹配变量 variable 的开头，</span></span>
<span class="line"><span style="color:#6A737D;"># 删除最短匹配（非贪婪匹配）的部分，返回剩余部分</span></span>
<span class="line"><span style="color:#24292E;">\${variable</span><span style="color:#D73A49;">#</span><span style="color:#24292E;">pattern}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 如果 pattern 匹配变量 variable 的开头，</span></span>
<span class="line"><span style="color:#6A737D;"># 删除最长匹配（贪婪匹配）的部分，返回剩余部分</span></span>
<span class="line"><span style="color:#24292E;">\${variable</span><span style="color:#D73A49;">##</span><span style="color:#24292E;">pattern}</span></span></code></pre></div><p>上面两种语法会删除变量字符串开头的匹配部分（将其替换为空），返回剩下的部分。区别是一个是最短匹配（又称非贪婪匹配），另一个是最长匹配（又称贪婪匹配）。</p><p>匹配模式<code>pattern</code>可以使用<code>*</code>、<code>?</code>、<code>[]</code>等通配符。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">myPath=/home/cam/book/long.file.name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${myPath</span><span style="color:#F97583;">#/*/</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">cam/book/long.file.name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${myPath</span><span style="color:#F97583;">##/*/</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">long.file.name</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">myPath=/home/cam/book/long.file.name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${myPath</span><span style="color:#D73A49;">#/*/</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">cam/book/long.file.name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${myPath</span><span style="color:#D73A49;">##/*/</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">long.file.name</span></span></code></pre></div><p>上面例子中，匹配的模式是<code>/*/</code>，其中<code>*</code>可以匹配任意数量的字符，所以最短匹配是<code>/home/</code>，最长匹配是<code>/home/cam/book/</code>。</p><p>下面写法可以删除文件路径的目录部分，只留下文件名。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">path=/home/cam/book/long.file.name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${path</span><span style="color:#F97583;">##*/</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">long.file.name</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">path=/home/cam/book/long.file.name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${path</span><span style="color:#D73A49;">##*/</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">long.file.name</span></span></code></pre></div><p>上面例子中，模式<code>*/</code>匹配目录部分，所以只返回文件名。</p><p>下面再看一个例子。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">phone=&quot;555-456-1414&quot;</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${phone</span><span style="color:#F97583;">#*</span><span style="color:#E1E4E8;">-}</span></span>
<span class="line"><span style="color:#B392F0;">456-1414</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${phone</span><span style="color:#F97583;">##*</span><span style="color:#E1E4E8;">-}</span></span>
<span class="line"><span style="color:#B392F0;">1414</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">phone=&quot;555-456-1414&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${phone</span><span style="color:#D73A49;">#*</span><span style="color:#24292E;">-}</span></span>
<span class="line"><span style="color:#6F42C1;">456-1414</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${phone</span><span style="color:#D73A49;">##*</span><span style="color:#24292E;">-}</span></span>
<span class="line"><span style="color:#6F42C1;">1414</span></span></code></pre></div><p>如果匹配不成功，则返回原始字符串。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">phone=&quot;555-456-1414&quot;</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${phone</span><span style="color:#F97583;">#</span><span style="color:#E1E4E8;">444}</span></span>
<span class="line"><span style="color:#B392F0;">555-456-1414</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">phone=&quot;555-456-1414&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${phone</span><span style="color:#D73A49;">#</span><span style="color:#24292E;">444}</span></span>
<span class="line"><span style="color:#6F42C1;">555-456-1414</span></span></code></pre></div><p>上面例子中，原始字符串里面无法匹配模式<code>444</code>，所以原样返回。</p><p>如果要将头部匹配的部分，替换成其他内容，采用下面的写法。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 模式必须出现在字符串的开头</span></span>
<span class="line"><span style="color:#E1E4E8;">\${variable</span><span style="color:#F97583;">/#</span><span style="color:#E1E4E8;">pattern</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">string}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 示例</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo=JPG.JPG</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${foo</span><span style="color:#F97583;">/#</span><span style="color:#E1E4E8;">JPG</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">jpg}</span></span>
<span class="line"><span style="color:#B392F0;">jpg.JPG</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 模式必须出现在字符串的开头</span></span>
<span class="line"><span style="color:#24292E;">\${variable</span><span style="color:#D73A49;">/#</span><span style="color:#24292E;">pattern</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">string}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 示例</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo=JPG.JPG</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${foo</span><span style="color:#D73A49;">/#</span><span style="color:#24292E;">JPG</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">jpg}</span></span>
<span class="line"><span style="color:#6F42C1;">jpg.JPG</span></span></code></pre></div><p>上面例子中，被替换的<code>JPG</code>必须出现在字符串头部，所以返回<code>jpg.JPG</code>。</p><p><strong>（2）字符串尾部的模式匹配。</strong></p><p>以下两种语法可以检查字符串结尾，是否匹配给定的模式。如果匹配成功，就删除匹配的部分，返回剩下的部分。原始变量不会发生变化。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 如果 pattern 匹配变量 variable 的结尾，</span></span>
<span class="line"><span style="color:#6A737D;"># 删除最短匹配（非贪婪匹配）的部分，返回剩余部分</span></span>
<span class="line"><span style="color:#E1E4E8;">\${variable</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">pattern}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 如果 pattern 匹配变量 variable 的结尾，</span></span>
<span class="line"><span style="color:#6A737D;"># 删除最长匹配（贪婪匹配）的部分，返回剩余部分</span></span>
<span class="line"><span style="color:#E1E4E8;">\${variable</span><span style="color:#F97583;">%%</span><span style="color:#E1E4E8;">pattern}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 如果 pattern 匹配变量 variable 的结尾，</span></span>
<span class="line"><span style="color:#6A737D;"># 删除最短匹配（非贪婪匹配）的部分，返回剩余部分</span></span>
<span class="line"><span style="color:#24292E;">\${variable</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">pattern}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 如果 pattern 匹配变量 variable 的结尾，</span></span>
<span class="line"><span style="color:#6A737D;"># 删除最长匹配（贪婪匹配）的部分，返回剩余部分</span></span>
<span class="line"><span style="color:#24292E;">\${variable</span><span style="color:#D73A49;">%%</span><span style="color:#24292E;">pattern}</span></span></code></pre></div><p>上面两种语法会删除变量字符串结尾的匹配部分（将其替换为空），返回剩下的部分。区别是一个是最短匹配（又称非贪婪匹配），另一个是最长匹配（又称贪婪匹配）。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">path=/home/cam/book/long.file.name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${path</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">/home/cam/book/long.file</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${path</span><span style="color:#F97583;">%%</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">/home/cam/book/long</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">path=/home/cam/book/long.file.name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${path</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">/home/cam/book/long.file</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${path</span><span style="color:#D73A49;">%%</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">/home/cam/book/long</span></span></code></pre></div><p>上面例子中，匹配模式是<code>.*</code>，其中<code>*</code>可以匹配任意数量的字符，所以最短匹配是<code>.name</code>，最长匹配是<code>.file.name</code>。</p><p>下面写法可以删除路径的文件名部分，只留下目录部分。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">path=/home/cam/book/long.file.name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${path</span><span style="color:#F97583;">%/*</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">/home/cam/book</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">path=/home/cam/book/long.file.name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${path</span><span style="color:#D73A49;">%/*</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">/home/cam/book</span></span></code></pre></div><p>上面例子中，模式<code>/*</code>匹配文件名部分，所以只返回目录部分。</p><p>下面的写法可以替换文件的后缀名。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file=foo.png</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${file</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">.png}</span><span style="color:#9ECBFF;">.jpg</span></span>
<span class="line"><span style="color:#B392F0;">foo.jpg</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file=foo.png</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${file</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">.png}</span><span style="color:#032F62;">.jpg</span></span>
<span class="line"><span style="color:#6F42C1;">foo.jpg</span></span></code></pre></div><p>上面的例子将文件的后缀名，从<code>.png</code>改成了<code>.jpg</code>。</p><p>下面再看一个例子。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">phone=&quot;555-456-1414&quot;</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${phone</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">-</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">555-456</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${phone</span><span style="color:#F97583;">%%</span><span style="color:#E1E4E8;">-</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">555</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">phone=&quot;555-456-1414&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${phone</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">-</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">555-456</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${phone</span><span style="color:#D73A49;">%%</span><span style="color:#24292E;">-</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">555</span></span></code></pre></div><p>如果匹配不成功，则返回原始字符串。</p><p>如果要将尾部匹配的部分，替换成其他内容，采用下面的写法。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 模式必须出现在字符串的结尾</span></span>
<span class="line"><span style="color:#E1E4E8;">\${variable</span><span style="color:#F97583;">/%</span><span style="color:#E1E4E8;">pattern</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">string}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 示例</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo=JPG.JPG</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${foo</span><span style="color:#F97583;">/%</span><span style="color:#E1E4E8;">JPG</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">jpg}</span></span>
<span class="line"><span style="color:#B392F0;">JPG.jpg</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 模式必须出现在字符串的结尾</span></span>
<span class="line"><span style="color:#24292E;">\${variable</span><span style="color:#D73A49;">/%</span><span style="color:#24292E;">pattern</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">string}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 示例</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo=JPG.JPG</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${foo</span><span style="color:#D73A49;">/%</span><span style="color:#24292E;">JPG</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">jpg}</span></span>
<span class="line"><span style="color:#6F42C1;">JPG.jpg</span></span></code></pre></div><p>上面例子中，被替换的<code>JPG</code>必须出现在字符串尾部，所以返回<code>JPG.jpg</code>。</p><p><strong>（3）任意位置的模式匹配。</strong></p><p>以下两种语法可以检查字符串内部，是否匹配给定的模式。如果匹配成功，就删除匹配的部分，换成其他的字符串返回。原始变量不会发生变化。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 如果 pattern 匹配变量 variable 的一部分，</span></span>
<span class="line"><span style="color:#6A737D;"># 最长匹配（贪婪匹配）的那部分被 string 替换，但仅替换第一个匹配</span></span>
<span class="line"><span style="color:#E1E4E8;">\${variable</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">pattern</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">string}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 如果 pattern 匹配变量 variable 的一部分，</span></span>
<span class="line"><span style="color:#6A737D;"># 最长匹配（贪婪匹配）的那部分被 string 替换，所有匹配都替换</span></span>
<span class="line"><span style="color:#E1E4E8;">\${variable</span><span style="color:#F97583;">//</span><span style="color:#E1E4E8;">pattern</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">string}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 如果 pattern 匹配变量 variable 的一部分，</span></span>
<span class="line"><span style="color:#6A737D;"># 最长匹配（贪婪匹配）的那部分被 string 替换，但仅替换第一个匹配</span></span>
<span class="line"><span style="color:#24292E;">\${variable</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">pattern</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">string}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 如果 pattern 匹配变量 variable 的一部分，</span></span>
<span class="line"><span style="color:#6A737D;"># 最长匹配（贪婪匹配）的那部分被 string 替换，所有匹配都替换</span></span>
<span class="line"><span style="color:#24292E;">\${variable</span><span style="color:#D73A49;">//</span><span style="color:#24292E;">pattern</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">string}</span></span></code></pre></div><p>上面两种语法都是最长匹配（贪婪匹配）下的替换，区别是前一个语法仅仅替换第一个匹配，后一个语法替换所有匹配。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">path=/home/cam/foo/foo.name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${path</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">foo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bar}</span></span>
<span class="line"><span style="color:#B392F0;">/home/cam/bar/foo.name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${path</span><span style="color:#F97583;">//</span><span style="color:#E1E4E8;">foo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bar}</span></span>
<span class="line"><span style="color:#B392F0;">/home/cam/bar/bar.name</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">path=/home/cam/foo/foo.name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${path</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">foo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bar}</span></span>
<span class="line"><span style="color:#6F42C1;">/home/cam/bar/foo.name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${path</span><span style="color:#D73A49;">//</span><span style="color:#24292E;">foo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bar}</span></span>
<span class="line"><span style="color:#6F42C1;">/home/cam/bar/bar.name</span></span></code></pre></div><p>上面例子中，前一个命令只替换了第一个<code>foo</code>，后一个命令将两个<code>foo</code>都替换了。</p><p>下面的例子将分隔符从<code>:</code>换成换行符。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> \${PATH</span><span style="color:#F97583;">//:/</span><span style="color:#9ECBFF;">&#39;\\n&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">/usr/local/bin</span></span>
<span class="line"><span style="color:#B392F0;">/usr/bin</span></span>
<span class="line"><span style="color:#B392F0;">/bin</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> \${PATH</span><span style="color:#D73A49;">//:/</span><span style="color:#032F62;">&#39;\\n&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">/usr/local/bin</span></span>
<span class="line"><span style="color:#6F42C1;">/usr/bin</span></span>
<span class="line"><span style="color:#6F42C1;">/bin</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span></code></pre></div><p>上面例子中，<code>echo</code>命令的<code>-e</code>参数，表示将替换后的字符串的<code>\\n</code>字符，解释为换行符。</p><p>模式部分可以使用通配符。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">phone=&quot;555-456-1414&quot;</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${phone</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">5?4</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">-}</span></span>
<span class="line"><span style="color:#B392F0;">55-56-1414</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">phone=&quot;555-456-1414&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${phone</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">5?4</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">-}</span></span>
<span class="line"><span style="color:#6F42C1;">55-56-1414</span></span></code></pre></div><p>上面的例子将<code>5-4</code>替换成<code>-</code>。</p><p>如果省略了<code>string</code>部分，那么就相当于匹配的部分替换成空字符串，即删除匹配的部分。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">path=/home/cam/foo/foo.name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${path</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">*/</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">/home/cam/foo/foo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">path=/home/cam/foo/foo.name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${path</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">*/</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">/home/cam/foo/foo</span></span></code></pre></div><p>上面例子中，第二个斜杠后面的<code>string</code>部分省略了，所以模式<code>.*</code>匹配的部分<code>.name</code>被删除后返回。</p><p>前面提到过，这个语法还有两种扩展形式。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 模式必须出现在字符串的开头</span></span>
<span class="line"><span style="color:#E1E4E8;">\${variable</span><span style="color:#F97583;">/#</span><span style="color:#E1E4E8;">pattern</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">string}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 模式必须出现在字符串的结尾</span></span>
<span class="line"><span style="color:#E1E4E8;">\${variable</span><span style="color:#F97583;">/%</span><span style="color:#E1E4E8;">pattern</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">string}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 模式必须出现在字符串的开头</span></span>
<span class="line"><span style="color:#24292E;">\${variable</span><span style="color:#D73A49;">/#</span><span style="color:#24292E;">pattern</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">string}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 模式必须出现在字符串的结尾</span></span>
<span class="line"><span style="color:#24292E;">\${variable</span><span style="color:#D73A49;">/%</span><span style="color:#24292E;">pattern</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">string}</span></span></code></pre></div><h2 id="改变大小写" tabindex="-1">改变大小写 <a class="header-anchor" href="#改变大小写" aria-label="Permalink to &quot;改变大小写&quot;">​</a></h2><p>下面的语法可以改变变量的大小写。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 转为大写</span></span>
<span class="line"><span style="color:#E1E4E8;">\${varname^^}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 转为小写</span></span>
<span class="line"><span style="color:#E1E4E8;">\${varname,,}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 转为大写</span></span>
<span class="line"><span style="color:#24292E;">\${varname^^}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 转为小写</span></span>
<span class="line"><span style="color:#24292E;">\${varname,,}</span></span></code></pre></div><p>下面是一个例子。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo=heLLo</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${foo^^}</span></span>
<span class="line"><span style="color:#B392F0;">HELLO</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> \${foo,,}</span></span>
<span class="line"><span style="color:#B392F0;">hello</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo=heLLo</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${foo^^}</span></span>
<span class="line"><span style="color:#6F42C1;">HELLO</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> \${foo,,}</span></span>
<span class="line"><span style="color:#6F42C1;">hello</span></span></code></pre></div>`,85),e=[o];function c(t,r,y,i,E,d){return a(),n("div",null,e)}const g=s(l,[["render",c]]);export{F as __pageData,g as default};
