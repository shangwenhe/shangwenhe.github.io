import{_ as s,o as a,c as l,Q as p}from"./chunks/framework.681fc4ae.js";const h=JSON.parse('{"title":"Shell 的命令","description":"","frontmatter":{},"headers":[],"relativePath":"bash/archives/command.md","filePath":"bash/archives/command.md"}'),n={name:"bash/archives/command.md"},o=p(`<h1 id="shell-的命令" tabindex="-1">Shell 的命令 <a class="header-anchor" href="#shell-的命令" aria-label="Permalink to &quot;Shell 的命令&quot;">​</a></h1><h2 id="命令的类别" tabindex="-1">命令的类别 <a class="header-anchor" href="#命令的类别" aria-label="Permalink to &quot;命令的类别&quot;">​</a></h2><p>Bash可以使用的命令分成四类。</p><ul><li>可执行程序</li><li>Shell 提供的命令</li><li>Shell 函数</li><li>前三类命令的别名</li></ul><h2 id="type-whatis" tabindex="-1">type, whatis <a class="header-anchor" href="#type-whatis" aria-label="Permalink to &quot;type, whatis&quot;">​</a></h2><p><code>type</code>命令可以显示命令类型。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">command</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">type</span><span style="color:#24292E;"> </span><span style="color:#032F62;">command</span></span></code></pre></div><p>下面是几个例子。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">type</span></span>
<span class="line"><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">shell</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">builtin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls</span></span>
<span class="line"><span style="color:#B392F0;">ls</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">aliased</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">ls</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">--color=tty</span><span style="color:#9ECBFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">$ type cp</span></span>
<span class="line"><span style="color:#9ECBFF;">cp is /bin/cp</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">type</span><span style="color:#24292E;"> </span><span style="color:#032F62;">type</span></span>
<span class="line"><span style="color:#005CC5;">type</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">shell</span><span style="color:#24292E;"> </span><span style="color:#032F62;">builtin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">type</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span></span>
<span class="line"><span style="color:#6F42C1;">ls</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">aliased</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">ls</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">--color=tty</span><span style="color:#032F62;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">$ type cp</span></span>
<span class="line"><span style="color:#032F62;">cp is /bin/cp</span></span></code></pre></div><p><code>whatis</code>命令显示指定命令的描述。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">whatis</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls</span></span>
<span class="line"><span style="color:#B392F0;">ls</span><span style="color:#E1E4E8;"> (1) - list directory contents</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">whatis</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span></span>
<span class="line"><span style="color:#6F42C1;">ls</span><span style="color:#24292E;"> (1) - list directory contents</span></span></code></pre></div><h2 id="apropos" tabindex="-1">apropos <a class="header-anchor" href="#apropos" aria-label="Permalink to &quot;apropos&quot;">​</a></h2><p><code>apropos</code>命令返回符合搜索条件的命令列表。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apropos</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">floppy</span></span>
<span class="line"><span style="color:#B392F0;">create_floppy_devices</span><span style="color:#E1E4E8;"> (8) - udev callout to create all possible</span></span>
<span class="line"><span style="color:#B392F0;">fdformat</span><span style="color:#E1E4E8;"> (8) - Low-level formats a floppy disk</span></span>
<span class="line"><span style="color:#B392F0;">floppy</span><span style="color:#E1E4E8;"> (8) - format floppy disks</span></span>
<span class="line"><span style="color:#B392F0;">gfloppy</span><span style="color:#E1E4E8;"> (1) - a simple floppy formatter </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> the GNOME</span></span>
<span class="line"><span style="color:#B392F0;">mbadblocks</span><span style="color:#E1E4E8;"> (1) - tests a floppy disk, and marks the bad</span></span>
<span class="line"><span style="color:#B392F0;">mformat</span><span style="color:#E1E4E8;"> (1) - add an MSDOS filesystem to a low-level</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apropos</span><span style="color:#24292E;"> </span><span style="color:#032F62;">floppy</span></span>
<span class="line"><span style="color:#6F42C1;">create_floppy_devices</span><span style="color:#24292E;"> (8) - udev callout to create all possible</span></span>
<span class="line"><span style="color:#6F42C1;">fdformat</span><span style="color:#24292E;"> (8) - Low-level formats a floppy disk</span></span>
<span class="line"><span style="color:#6F42C1;">floppy</span><span style="color:#24292E;"> (8) - format floppy disks</span></span>
<span class="line"><span style="color:#6F42C1;">gfloppy</span><span style="color:#24292E;"> (1) - a simple floppy formatter </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> the GNOME</span></span>
<span class="line"><span style="color:#6F42C1;">mbadblocks</span><span style="color:#24292E;"> (1) - tests a floppy disk, and marks the bad</span></span>
<span class="line"><span style="color:#6F42C1;">mformat</span><span style="color:#24292E;"> (1) - add an MSDOS filesystem to a low-level</span></span></code></pre></div><h2 id="alias-unalias" tabindex="-1">alias, unalias <a class="header-anchor" href="#alias-unalias" aria-label="Permalink to &quot;alias, unalias&quot;">​</a></h2><p><code>alias</code>命令用来为命令起别名。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">alias</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo=&#39;cd /usr; ls; cd -&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo</span></span>
<span class="line"><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">aliased</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span><span style="color:#79B8FF;">cd</span><span style="color:#9ECBFF;"> /usr; </span><span style="color:#B392F0;">ls</span><span style="color:#9ECBFF;"> ; </span><span style="color:#79B8FF;">cd</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-</span><span style="color:#9ECBFF;">&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">alias</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo=&#39;cd /usr; ls; cd -&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">type</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo</span></span>
<span class="line"><span style="color:#6F42C1;">foo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">aliased</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span><span style="color:#005CC5;">cd</span><span style="color:#032F62;"> /usr; </span><span style="color:#6F42C1;">ls</span><span style="color:#032F62;"> ; </span><span style="color:#005CC5;">cd</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-</span><span style="color:#032F62;">&#39;</span></span></code></pre></div><p>上面命令指定<code>foo</code>为三个命令的别名。以后，执行<code>foo</code>就相当于一起执行这三条命令。</p><p>注意，默认情况下，别名只在当前Session有效。当前Session结束时，这些别名就会消失。</p><p><code>alias</code>命令不加参数时，显示所有有效的别名。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">alias</span></span>
<span class="line"><span style="color:#79B8FF;">alias</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">l.=&#39;ls -d .* --color=tty&#39;</span></span>
<span class="line"><span style="color:#F97583;">alias</span><span style="color:#E1E4E8;"> ll</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;ls -l --color=tty&#39;</span></span>
<span class="line"><span style="color:#F97583;">alias</span><span style="color:#E1E4E8;"> ls</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;ls --color=tty&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">alias</span></span>
<span class="line"><span style="color:#005CC5;">alias</span><span style="color:#24292E;"> </span><span style="color:#032F62;">l.=&#39;ls -d .* --color=tty&#39;</span></span>
<span class="line"><span style="color:#D73A49;">alias</span><span style="color:#24292E;"> ll</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;ls -l --color=tty&#39;</span></span>
<span class="line"><span style="color:#D73A49;">alias</span><span style="color:#24292E;"> ls</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;ls --color=tty&#39;</span></span></code></pre></div><p><code>unalias</code>命令用来取消别名。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">unalias</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo</span></span>
<span class="line"><span style="color:#B392F0;">bash:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">type:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">found</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unalias</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">type</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo</span></span>
<span class="line"><span style="color:#6F42C1;">bash:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">type:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">not</span><span style="color:#24292E;"> </span><span style="color:#032F62;">found</span></span></code></pre></div><h2 id="which" tabindex="-1">which <a class="header-anchor" href="#which" aria-label="Permalink to &quot;which&quot;">​</a></h2><p><code>which</code>命令显示可执行程序的路径。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">which</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls</span></span>
<span class="line"><span style="color:#B392F0;">/bin/ls</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">which</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span></span>
<span class="line"><span style="color:#6F42C1;">/bin/ls</span></span></code></pre></div><p><code>which</code>命令用于Shell内置命令时（比如<code>cd</code>），将没有任何输出。</p><h2 id="help-man" tabindex="-1">help，man <a class="header-anchor" href="#help-man" aria-label="Permalink to &quot;help，man&quot;">​</a></h2><p><code>help</code>命令用于查看Shell内置命令的帮助信息，<code>man</code>命令用于查看可执行命令的帮助信息。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">help</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cd</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">man</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">help</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cd</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">man</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span></span></code></pre></div><p><code>man</code>里面的文档一共有8类，如果同一个命令，匹配多个文档，<code>man</code>命令总是返回第一个匹配。如果想看指定类型的文档，命令可以采用下面的形式。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">man</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passwd</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">man</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passwd</span></span></code></pre></div><h2 id="script" tabindex="-1">script <a class="header-anchor" href="#script" aria-label="Permalink to &quot;script&quot;">​</a></h2><p><code>script</code>命令会将输入的命令和它的输出，都保存进一个文件。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">script</span><span style="color:#E1E4E8;"> [file]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">script</span><span style="color:#24292E;"> [file]</span></span></code></pre></div><p>如果没有指定文件名，则所有结果会保存进当前目录下<code>typescript</code>文件。结束录制的时候，可以按下<code>Ctrl + d</code>。</p><h2 id="export" tabindex="-1">export <a class="header-anchor" href="#export" aria-label="Permalink to &quot;export&quot;">​</a></h2><p><code>export</code>命令用于将当前进程的变量，输出到所有子进程。</p><h2 id="命令的连续执行" tabindex="-1">命令的连续执行 <a class="header-anchor" href="#命令的连续执行" aria-label="Permalink to &quot;命令的连续执行&quot;">​</a></h2><p>多个命令可以写在一起。</p><p>Bash 提供三种方式，定义它们如何执行。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 第一个命令执行完，执行第二个命令</span></span>
<span class="line"><span style="color:#B392F0;">command1</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">command2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 只有第一个命令成功执行完（退出码0），才会执行第二个命令</span></span>
<span class="line"><span style="color:#B392F0;">command1</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#B392F0;">command2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 只有第一个命令执行失败（退出码非0），才会执行第二个命令</span></span>
<span class="line"><span style="color:#B392F0;">command1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">command2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 第一个命令执行完，执行第二个命令</span></span>
<span class="line"><span style="color:#6F42C1;">command1</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">command2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 只有第一个命令成功执行完（退出码0），才会执行第二个命令</span></span>
<span class="line"><span style="color:#6F42C1;">command1</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#6F42C1;">command2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 只有第一个命令执行失败（退出码非0），才会执行第二个命令</span></span>
<span class="line"><span style="color:#6F42C1;">command1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">command2</span></span></code></pre></div><p>上面三种执行方法的退出码，都是最后一条执行的命令的退出码。</p><p>bash 允许把命令组合在一起。可以通过两种方式完成；要么用一个 group 命令，要么用一个子 shell。 这里是每种方式的语法示例：</p><p>组命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{ </span><span style="color:#B392F0;">command1</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">command2</span><span style="color:#E1E4E8;">; [command3; ...] }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{ </span><span style="color:#6F42C1;">command1</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">command2</span><span style="color:#24292E;">; [command3; ...] }</span></span></code></pre></div><p>子 shell</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">command1</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">command2</span><span style="color:#E1E4E8;">; [command3;...])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">command1</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">command2</span><span style="color:#24292E;">; [command3;...])</span></span></code></pre></div><p>这两种形式的不同之处在于，组命令用花括号把它的命令包裹起来，而子 shell 用括号。值得注意的是，鉴于 bash 实现组命令的方式， 花括号与命令之间必须有一个空格，并且最后一个命令必须用一个分号或者一个换行符终止。</p><p>那么组命令和子 shell 命令对什么有好处呢？ 它们都是用来管理重定向的。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{ </span><span style="color:#B392F0;">ls</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-l</span><span style="color:#E1E4E8;">; </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Listing of foo.txt&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo.txt</span><span style="color:#E1E4E8;">; } </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> output.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{ </span><span style="color:#6F42C1;">ls</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-l</span><span style="color:#24292E;">; </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Listing of foo.txt&quot;</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">cat</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo.txt</span><span style="color:#24292E;">; } </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> output.txt</span></span></code></pre></div><p>使用一个子 shell 是相似的。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">ls</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-l</span><span style="color:#E1E4E8;">; </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Listing of foo.txt&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo.txt</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> output.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">ls</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-l</span><span style="color:#24292E;">; </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Listing of foo.txt&quot;</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">cat</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo.txt</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> output.txt</span></span></code></pre></div><p>组命令和子 shell 真正闪光的地方是与管道线相结合。 当构建一个管道线命令的时候，通常把几个命令的输出结果合并成一个流是很有用的。 组命令和子 shell 使这种操作变得很简单。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{ </span><span style="color:#B392F0;">ls</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-l</span><span style="color:#E1E4E8;">; </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Listing of foo.txt&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo.txt</span><span style="color:#E1E4E8;">; } </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lpr</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{ </span><span style="color:#6F42C1;">ls</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-l</span><span style="color:#24292E;">; </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Listing of foo.txt&quot;</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">cat</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo.txt</span><span style="color:#24292E;">; } </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lpr</span></span></code></pre></div><p>这里我们已经把我们的三个命令的输出结果合并在一起，并把它们用管道输送给命令 lpr 的输入，以便产生一个打印报告。</p><p>虽然组命令和子 shell 看起来相似，并且它们都能用来在重定向中合并流，但是两者之间有一个很重要的不同。 然而，一个组命令在当前 shell 中执行它的所有命令，而一个子 shell（顾名思义）在当前 shell 的一个 子副本中执行它的命令。这意味着运行环境被复制给了一个新的 shell 实例。当这个子 shell 退出时，环境副本会消失， 所以在子 shell 环境（包括变量赋值）中的任何更改也会消失。因此，在大多数情况下，除非脚本要求一个子 shell， 组命令比子 shell 更受欢迎。组命令运行很快并且占用的内存也少。</p><p>当我们发现管道线中的一个 read 命令 不按我们所期望的那样工作的时候。为了重现问题，我们构建一个像这样的管道线：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">read</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> $REPLY</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">read</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> $REPLY</span></span></code></pre></div><p>该 REPLY 变量的内容总是为空，是因为这个 read 命令在一个子 shell 中执行，所以它的 REPLY 副本会被毁掉， 当该子 shell 终止的时候。因为管道线中的命令总是在子 shell 中执行，任何给变量赋值的命令都会遭遇这样的问题。 幸运地是，shell 提供了一种奇异的展开方式，叫做进程替换，它可以用来解决这种麻烦。进程替换有两种表达方式：</p><p>一种适用于产生标准输出的进程：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&lt;(</span><span style="color:#B392F0;">list</span><span style="color:#9ECBFF;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&lt;(</span><span style="color:#6F42C1;">list</span><span style="color:#032F62;">)</span></span></code></pre></div><p>另一种适用于接受标准输入的进程：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&gt;(</span><span style="color:#B392F0;">list</span><span style="color:#9ECBFF;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&gt;(</span><span style="color:#6F42C1;">list</span><span style="color:#032F62;">)</span></span></code></pre></div><p>这里的 list 是一串命令列表：</p><p>为了解决我们的 read 命令问题，我们可以雇佣进程替换，像这样。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">read</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;(</span><span style="color:#79B8FF;">echo</span><span style="color:#9ECBFF;"> &quot;foo&quot;)</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> $REPLY</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">read</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;(</span><span style="color:#005CC5;">echo</span><span style="color:#032F62;"> &quot;foo&quot;)</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> $REPLY</span></span></code></pre></div><p>进程替换允许我们把一个子 shell 的输出结果当作一个用于重定向的普通文件。事实上，因为它是一种展开形式，我们可以检验它的真实值：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[me@linuxbox </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]$ echo </span><span style="color:#9ECBFF;">&lt;(</span><span style="color:#79B8FF;">echo</span><span style="color:#9ECBFF;"> &quot;foo&quot;)</span></span>
<span class="line"><span style="color:#B392F0;">/dev/fd/63</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[me@linuxbox </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]$ echo </span><span style="color:#032F62;">&lt;(</span><span style="color:#005CC5;">echo</span><span style="color:#032F62;"> &quot;foo&quot;)</span></span>
<span class="line"><span style="color:#6F42C1;">/dev/fd/63</span></span></code></pre></div><p>通过使用 echo 命令，查看展开结果，我们看到子 shell 的输出结果，由一个名为 /dev/fd/63 的文件提供。</p>`,70),e=[o];function c(t,r,y,i,E,d){return a(),l("div",null,e)}const C=s(n,[["render",c]]);export{h as __pageData,C as default};
