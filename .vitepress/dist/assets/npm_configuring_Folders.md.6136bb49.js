import{_ as s,o as a,c as o,Q as n}from"./chunks/framework.681fc4ae.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"npm/configuring/Folders.md","filePath":"npm/configuring/Folders.md"}'),l={name:"npm/configuring/Folders.md"},e=n('<h2 id="描述" tabindex="-1">描述 <a class="header-anchor" href="#描述" aria-label="Permalink to &quot;描述&quot;">​</a></h2><p>npm 将各种东西放在你的计算机上。这就是它的工作。</p><p>该文档将告诉您它把什么放在哪里。</p><h2 id="tl-dr" tabindex="-1"><code>tl;dr</code> <a class="header-anchor" href="#tl-dr" aria-label="Permalink to &quot;`tl;dr`&quot;">​</a></h2><ul><li>本地安装（默认）：将内容放入<code>./node_modules</code>当前包根目录中。</li><li>全局安装（使用<code>-g</code>）：将内容放入 /usr/local 或安装节点的任何位置。</li><li>如果要的话，请<strong>在本地</strong>安装<code>require()</code>。</li><li>如果要在命令行上运行它，请<strong>全局</strong>安装它。</li><li>如果您需要两者，则将其安装在两个位置，或使用<code>npm link</code>.</li></ul><h2 id="prefix-configuration" tabindex="-1"><code>prefix-configuration</code> <a class="header-anchor" href="#prefix-configuration" aria-label="Permalink to &quot;`prefix-configuration`&quot;">​</a></h2><p>该<code>prefix</code>配置默认为安装节点的位置。在大多数系统上，这是<code>/usr/local</code>. 在 Windows 上，它是<code>%AppData%\\npm</code>. 在 Unix 系统上，它是上一级，因为节点通常安装在<code>{prefix}/bin/node</code>而不是<code>{prefix}/node.exe</code>.</p><p>设置该<code>global</code>标志后，npm 会将内容安装到此前缀中。如果未设置，它将使用当前包的根目录，或者当前工作目录（如果不在包中）。</p><h2 id="node-modules" tabindex="-1"><code>node-modules</code> <a class="header-anchor" href="#node-modules" aria-label="Permalink to &quot;`node-modules`&quot;">​</a></h2><p><code>node_modules</code>包被放入<code>prefix</code>. 当本地安装时，这意味着您可以<code>require(&quot;packagename&quot;)</code>加载其主模块，或<code>require(&quot;packagename/lib/path/to/sub/module&quot;)</code>加载其他模块。</p><p>Unix 系统上的全局安装转到<code>{prefix}/lib/node_modules</code>. Windows 上的全局安装转到<code>{prefix}/node_modules</code>（即没有<code>lib</code>文件夹。）</p><p>作用域包的安装方式相同，只不过它们被分组到相关<code>node_modules</code>文件夹的子文件夹中，并使用 @ 符号来命名该作用域前缀，例如<code>npm install @myorg/package</code>将包放在<code>{prefix}/node_modules/@myorg/package</code>. 请参阅<code>scope</code>了解更多详情。</p><p>如果您想要<code>require()</code>一个软件包，请在本地安装它。</p><h2 id="executables" tabindex="-1"><code>executables</code> <a class="header-anchor" href="#executables" aria-label="Permalink to &quot;`executables`&quot;">​</a></h2><p><code>{prefix}/bin</code>在全局模式下，可执行文件在 Unix 上链接到，或<code>{prefix}</code>在 Windows 上直接链接到。确保该路径位于您的终端<code>PATH</code>环境中才能运行它们。</p><p>在本地模式下，可执行文件被链接到<code>./node_modules/.bin</code>，以便它们可以供通过 npm 运行的脚本使用。（例如，这样当您运行时，测试运行程序将位于路径中<code>npm test</code>。）</p><h2 id="man-pages" tabindex="-1"><code>man-pages</code> <a class="header-anchor" href="#man-pages" aria-label="Permalink to &quot;`man-pages`&quot;">​</a></h2><p>在全局模式下，手册页链接到<code>{prefix}/share/man</code>.</p><p>在本地模式下，不会安装手册页。</p><p>Windows 系统上未安装手册页。</p><h2 id="cache" tabindex="-1"><code>cache</code> <a class="header-anchor" href="#cache" aria-label="Permalink to &quot;`cache`&quot;">​</a></h2><p>看<code>npm cache</code>。缓存文件存储<code>~/.npm</code>在 Posix 或<code>%AppData%/npm-cache</code>Windows 上。</p><p>这是由<code>cache</code>配置参数控制的。</p><h2 id="temp-files" tabindex="-1"><code>temp-files</code> <a class="header-anchor" href="#temp-files" aria-label="Permalink to &quot;`temp-files`&quot;">​</a></h2><p>临时文件默认存储在<code>tmp</code>配置指定的文件夹中，默认为 TMPDIR、TMP 或 TEMP 环境变量，或者<code>/tmp</code>在 Unix 和<code>c:\\windows\\temp</code>Windows 上。</p><p>每次运行程序时，临时文件都会在此根目录下获得一个唯一的文件夹，并在成功退出后被删除。</p><h2 id="more-information" tabindex="-1"><code>more-information</code> <a class="header-anchor" href="#more-information" aria-label="Permalink to &quot;`more-information`&quot;">​</a></h2><p>在本地安装时，npm 首先尝试找到合适的<code>prefix</code>文件夹。这样<code>npm install foo@1.2.3</code>即使您碰巧已经进入<code>cd</code>了其他文件夹，它也会安装到软件包的合理根目录中。</p><p>从 $PWD 开始，npm 将沿着文件夹树向上查找包含<code>package.json</code>文件或<code>node_modules</code>文件夹的文件夹。如果找到这样的东西，那么它将被视为有效的“当前目录”，以便运行 npm 命令。（此行为受到并类似于在工作目录中运行 git 命令时 git 的 .git-folder 搜索逻辑的启发。）</p><p>如果未找到包根目录，则使用当前文件夹。</p><p>当您运行时<code>npm install foo@1.2.3</code>，包将加载到缓存中，然后解压到<code>./node_modules/foo</code>. 然后，任何 foo 的依赖项都会类似地解压到<code>./node_modules/foo/node_modules/...</code>.</p><p>任何 bin 文件都符号链接到<code>./node_modules/.bin/</code>，以便 npm 脚本在必要时可以找到它们。</p><h2 id="global-installation" tabindex="-1"><code>global-installation</code> <a class="header-anchor" href="#global-installation" aria-label="Permalink to &quot;`global-installation`&quot;">​</a></h2><p>如果<code>global</code>配置设置为 true，则 npm 将“全局”安装软件包。</p><p>对于全局安装，软件包的安装方式大致相同，但使用上述文件夹。</p><h2 id="cycles-conflicts-and-folder-parsimony" tabindex="-1"><code>cycles-conflicts-and-folder-parsimony</code> <a class="header-anchor" href="#cycles-conflicts-and-folder-parsimony" aria-label="Permalink to &quot;`cycles-conflicts-and-folder-parsimony`&quot;">​</a></h2><p>循环是使用节点模块系统的属性来处理的，它会在目录中查找<code>node_modules</code>文件夹。因此，在每个阶段，如果包已安装在祖先<code>node_modules</code>文件夹中，则它不会安装在当前位置。</p><p>考虑上面的情况，其中<code>foo -&gt; bar -&gt; baz</code>. 想象一下，除此之外，baz 还依赖于 bar，那么你就会有：<code>foo -&gt; bar -&gt; baz -&gt; bar -&gt; baz ...</code>。但是，由于文件夹结构是：<code>foo/node_modules/bar/node_modules/baz</code>，因此无需将 bar 的另一个副本放入<code>.../baz/node_modules</code>，因为当它调用 require(&quot;bar&quot;) 时，它将获取安装在 中的副本<code>foo/node_modules/bar</code>。</p><p>仅当完全相同的版本安装在多个嵌套<code>node_modules</code>文件夹中时才使用此快捷方式。<code>a/node_modules/b/node_modules/a</code>如果两个“a”包是不同版本，仍然有可能。然而，如果不多次重复完全相同的包，总是可以防止无限倒退。</p><p>另一种优化可以通过在本地化的“目标”文件夹下方的尽可能最高级别安装依赖项来进行。</p><h2 id="example" tabindex="-1"><code>example</code> <a class="header-anchor" href="#example" aria-label="Permalink to &quot;`example`&quot;">​</a></h2><p>考虑这个依赖图：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">foo</span></span>\n<span class="line"><span style="color:#B392F0;">+--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">blerg@1.2.5</span></span>\n<span class="line"><span style="color:#B392F0;">+--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bar@1.2.3</span></span>\n<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">+--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">blerg@1.x</span><span style="color:#E1E4E8;"> (latest=1.3.7)</span></span>\n<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">+--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">baz@2.x</span></span>\n<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">`</span><span style="color:#B392F0;">--</span><span style="color:#9ECBFF;"> quux@3.x</span></span>\n<span class="line"><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">   </span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">       `</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bar@1.2.3</span><span style="color:#E1E4E8;"> (cycle)</span></span>\n<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">`</span><span style="color:#B392F0;">--</span><span style="color:#9ECBFF;"> asdf@</span><span style="color:#79B8FF;">*</span></span>\n<span class="line"><span style="color:#9ECBFF;">`</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">baz@1.2.3</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">`</span><span style="color:#B392F0;">--</span><span style="color:#9ECBFF;"> quux@3.x</span></span>\n<span class="line"><span style="color:#9ECBFF;">        `</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">foo</span></span>\n<span class="line"><span style="color:#6F42C1;">+--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">blerg@1.2.5</span></span>\n<span class="line"><span style="color:#6F42C1;">+--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bar@1.2.3</span></span>\n<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;">   </span><span style="color:#6F42C1;">+--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">blerg@1.x</span><span style="color:#24292E;"> (latest=1.3.7)</span></span>\n<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;">   </span><span style="color:#6F42C1;">+--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">baz@2.x</span></span>\n<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;">   </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">   </span><span style="color:#032F62;">`</span><span style="color:#6F42C1;">--</span><span style="color:#032F62;"> quux@3.x</span></span>\n<span class="line"><span style="color:#D73A49;">|</span><span style="color:#032F62;">   </span><span style="color:#D73A49;">|</span><span style="color:#032F62;">       `</span><span style="color:#6F42C1;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bar@1.2.3</span><span style="color:#24292E;"> (cycle)</span></span>\n<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;">   </span><span style="color:#032F62;">`</span><span style="color:#6F42C1;">--</span><span style="color:#032F62;"> asdf@</span><span style="color:#005CC5;">*</span></span>\n<span class="line"><span style="color:#032F62;">`</span><span style="color:#6F42C1;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">baz@1.2.3</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">`</span><span style="color:#6F42C1;">--</span><span style="color:#032F62;"> quux@3.x</span></span>\n<span class="line"><span style="color:#032F62;">        `</span><span style="color:#6F42C1;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bar</span></span></code></pre></div><p>在这种情况下，我们可能期望这样的文件夹结构：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">foo</span></span>\n<span class="line"><span style="color:#B392F0;">+--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node_modules</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">+--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">blerg</span><span style="color:#E1E4E8;"> (1.2.5) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">---[A]</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">+--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bar</span><span style="color:#E1E4E8;"> (1.2.3) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">---[B]</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">`</span><span style="color:#B392F0;">--</span><span style="color:#9ECBFF;"> node_modules</span></span>\n<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">       </span><span style="color:#B392F0;">+--</span><span style="color:#9ECBFF;"> baz (2.0.2) </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">---[C]</span></span>\n<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">       </span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">   `</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node_modules</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">`</span><span style="color:#B392F0;">--</span><span style="color:#9ECBFF;"> quux (3.2.0)</span></span>\n<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">       `</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">asdf</span><span style="color:#E1E4E8;"> (2.3.4)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">`</span><span style="color:#B392F0;">--</span><span style="color:#9ECBFF;"> baz (1.2.3) </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">---[D]</span></span>\n<span class="line"><span style="color:#9ECBFF;">        `</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node_modules</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">`</span><span style="color:#B392F0;">--</span><span style="color:#9ECBFF;"> quux (3.2.0) </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">---[E]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">foo</span></span>\n<span class="line"><span style="color:#6F42C1;">+--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node_modules</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">+--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">blerg</span><span style="color:#24292E;"> (1.2.5) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">---[A]</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">+--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bar</span><span style="color:#24292E;"> (1.2.3) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">---[B]</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">   </span><span style="color:#032F62;">`</span><span style="color:#6F42C1;">--</span><span style="color:#032F62;"> node_modules</span></span>\n<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">|</span><span style="color:#032F62;">       </span><span style="color:#6F42C1;">+--</span><span style="color:#032F62;"> baz (2.0.2) </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">---[C]</span></span>\n<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">|</span><span style="color:#032F62;">       </span><span style="color:#D73A49;">|</span><span style="color:#032F62;">   `</span><span style="color:#6F42C1;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node_modules</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">       </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">       </span><span style="color:#032F62;">`</span><span style="color:#6F42C1;">--</span><span style="color:#032F62;"> quux (3.2.0)</span></span>\n<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">|</span><span style="color:#032F62;">       `</span><span style="color:#6F42C1;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">asdf</span><span style="color:#24292E;"> (2.3.4)</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">`</span><span style="color:#6F42C1;">--</span><span style="color:#032F62;"> baz (1.2.3) </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">---[D]</span></span>\n<span class="line"><span style="color:#032F62;">        `</span><span style="color:#6F42C1;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node_modules</span></span>\n<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">`</span><span style="color:#6F42C1;">--</span><span style="color:#032F62;"> quux (3.2.0) </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">---[E]</span></span></code></pre></div><p>由于 foo 直接依赖于<code>bar@1.2.3</code>和<code>baz@1.2.3</code>，因此它们安装在 foo 的<code>node_modules</code>文件夹中。</p><p>尽管 blerg 的最新副本是 1.3.7，但 foo 对版本 1.2.5 有特定的依赖性。因此，它被安装在[A]。由于 blerg 的父安装满足 bar 对 的依赖性<code>blerg@1.x</code>，因此它不会在 [B] 下安装另一个副本。</p><p>Bar [B] 还依赖于 baz 和 asdf，因此它们安装在 bar 的<code>node_modules</code>文件夹中。因为它依赖于<code>baz@2.x</code>，所以它不能重新使用<code>baz@1.2.3</code>父<code>node_modules</code>文件夹 [D] 中安装的，而必须安装它自己的副本 [C]。</p><p>在条形图下方，<code>baz -&gt; quux -&gt; bar</code>依赖关系创建了一个循环。然而，因为 bar 已经在 quux 的祖先 [B] 中，所以它不会将 bar 的另一个副本解压到该文件夹中。</p><p>在 [D]下<code>foo -&gt; baz</code>，quux 的 [E] 文件夹树是空的，因为它对 bar 的依赖性由安装在 [B] 的父文件夹副本满足。</p><p>要以图形方式显示安装内容的位置，请使用<code>npm ls</code>。</p><h2 id="publishing" tabindex="-1"><code>publishing</code> <a class="header-anchor" href="#publishing" aria-label="Permalink to &quot;`publishing`&quot;">​</a></h2><p>发布后，npm 将在文件夹中查找<code>node_modules</code>。如果数组中没有任何项目<code>bundledDependencies</code>，那么它们将不会包含在包 tarball 中。</p><p>这允许包维护者在本地安装所有依赖项（和开发依赖项），但仅重新发布那些在其他地方找不到的项目。请参阅<code>package.json</code>获取更多信息。</p>',54),p=[e];function c(r,t,d,y,i,F){return a(),o("div",null,p)}const b=s(l,[["render",c]]);export{u as __pageData,b as default};
