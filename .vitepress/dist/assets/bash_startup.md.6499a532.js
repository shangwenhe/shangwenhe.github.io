import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.681fc4ae.js";const b=JSON.parse('{"title":"Bash 启动环境","description":"","frontmatter":{},"headers":[],"relativePath":"bash/startup.md","filePath":"bash/startup.md"}'),l={name:"bash/startup.md"},p=o(`<h1 id="bash-启动环境" tabindex="-1">Bash 启动环境 <a class="header-anchor" href="#bash-启动环境" aria-label="Permalink to &quot;Bash 启动环境&quot;">​</a></h1><h2 id="session" tabindex="-1">Session <a class="header-anchor" href="#session" aria-label="Permalink to &quot;Session&quot;">​</a></h2><p>用户每次使用 Shell，都会开启一个与 Shell 的 Session（对话）。</p><p>Session 有两种类型：登录 Session 和非登录 Session，也可以叫做 login shell 和 non-login shell。</p><h3 id="登录-session" tabindex="-1">登录 Session <a class="header-anchor" href="#登录-session" aria-label="Permalink to &quot;登录 Session&quot;">​</a></h3><p>登录 Session 是用户登录系统以后，系统为用户开启的原始 Session，通常需要用户输入用户名和密码进行登录。</p><p>登录 Session 一般进行整个系统环境的初始化，启动的初始化脚本依次如下。</p><ul><li><code>/etc/profile</code>：所有用户的全局配置脚本。</li><li><code>/etc/profile.d</code>目录里面所有<code>.sh</code>文件</li><li><code>~/.bash_profile</code>：用户的个人配置脚本。如果该脚本存在，则执行完就不再往下执行。</li><li><code>~/.bash_login</code>：如果<code>~/.bash_profile</code>没找到，则尝试执行这个脚本（C shell 的初始化脚本）。如果该脚本存在，则执行完就不再往下执行。</li><li><code>~/.profile</code>：如果<code>~/.bash_profile</code>和<code>~/.bash_login</code>都没找到，则尝试读取这个脚本（Bourne shell 和 Korn shell 的初始化脚本）。</li></ul><p>Linux 发行版更新的时候，会更新<code>/etc</code>里面的文件，比如<code>/etc/profile</code>，因此不要直接修改这个文件。如果想修改所有用户的登陆环境，就在<code>/etc/profile.d</code>目录里面新建<code>.sh</code>脚本。</p><p>如果想修改你个人的登录环境，一般是写在<code>~/.bash_profile</code>里面。下面是一个典型的<code>.bash_profile</code>文件。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># .bash_profile</span></span>
<span class="line"><span style="color:#E1E4E8;">PATH</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin</span></span>
<span class="line"><span style="color:#E1E4E8;">PATH</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">$PATH</span><span style="color:#9ECBFF;">:</span><span style="color:#E1E4E8;">$HOME</span><span style="color:#9ECBFF;">/bin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">SHELL</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">/bin/bash</span></span>
<span class="line"><span style="color:#E1E4E8;">MANPATH</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">/usr/man:/usr/X11/man</span></span>
<span class="line"><span style="color:#E1E4E8;">EDITOR</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">/usr/bin/vi</span></span>
<span class="line"><span style="color:#E1E4E8;">PS1</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;\\h:\\w\\$ &#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">PS2</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;&gt; &#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [ </span><span style="color:#F97583;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">/.bashrc ]; </span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#79B8FF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/.bashrc</span></span>
<span class="line"><span style="color:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PATH</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">EDITOR</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># .bash_profile</span></span>
<span class="line"><span style="color:#24292E;">PATH</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin</span></span>
<span class="line"><span style="color:#24292E;">PATH</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">$PATH</span><span style="color:#032F62;">:</span><span style="color:#24292E;">$HOME</span><span style="color:#032F62;">/bin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">SHELL</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">/bin/bash</span></span>
<span class="line"><span style="color:#24292E;">MANPATH</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">/usr/man:/usr/X11/man</span></span>
<span class="line"><span style="color:#24292E;">EDITOR</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">/usr/bin/vi</span></span>
<span class="line"><span style="color:#24292E;">PS1</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;\\h:\\w\\$ &#39;</span></span>
<span class="line"><span style="color:#24292E;">PS2</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;&gt; &#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> [ </span><span style="color:#D73A49;">-f</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">/.bashrc ]; </span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#005CC5;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/.bashrc</span></span>
<span class="line"><span style="color:#D73A49;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PATH</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#032F62;">EDITOR</span></span></code></pre></div><p>可以看到，这个脚本定义了一些最基本的环境变量，然后执行了<code>~/.bashrc</code>。</p><p><code>bash</code>命令的<code>--login</code>参数，会强制执行登录 Session 会执行的脚本。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bash</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--login</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bash</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--login</span></span></code></pre></div><p><code>bash</code>命令的<code>--noprofile</code>参数，会跳过上面这些 Profile 脚本。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bash</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--noprofile</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bash</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--noprofile</span></span></code></pre></div><h3 id="非登录-session" tabindex="-1">非登录 Session <a class="header-anchor" href="#非登录-session" aria-label="Permalink to &quot;非登录 Session&quot;">​</a></h3><p>非登录 Session 是用户进入系统以后，手动新建的 Session，这时不会进行环境初始化。比如，在命令行执行<code>bash</code>命令，就会新建一个非登录 Session。</p><p>非登录 Session 的初始化脚本依次如下。</p><ul><li><code>/etc/bash.bashrc</code>：对全体用户有效。</li><li><code>~/.bashrc</code>：仅对当前用户有效。</li></ul><p>对用户来说，<code>~/.bashrc</code>通常是最重要的脚本。非登录 Session 默认会执行它，而登录 Session 一般也会通过调用执行它。每次新建一个 Bash 窗口，就相当于新建一个非登录 Session，所以<code>~/.bashrc</code>每次都会执行。注意，执行脚本相当于新建一个非互动的 Bash 环境，但是这种情况不会调用<code>~/.bashrc</code>。</p><p><code>bash</code>命令的<code>--norc</code>参数，可以禁止在非登录 Session 执行<code>~/.bashrc</code>脚本。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bash</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--norc</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bash</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--norc</span></span></code></pre></div><p><code>bash</code>命令的<code>--rcfile</code>参数，指定另一个脚本代替<code>.bashrc</code>。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bash</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--rcfile</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">testrc</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bash</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--rcfile</span><span style="color:#24292E;"> </span><span style="color:#032F62;">testrc</span></span></code></pre></div><h3 id="bash-logout" tabindex="-1">.bash_logout <a class="header-anchor" href="#bash-logout" aria-label="Permalink to &quot;.bash_logout&quot;">​</a></h3><p><code>~/.bash_logout</code>脚本在每次退出 Session 时执行，通常用来做一些清理工作和记录工作，比如删除临时文件，记录用户在本次 Session 花费的时间。</p><p>如果没有退出时要执行的命令，这个文件也可以不存在。</p><h2 id="启动选项" tabindex="-1">启动选项 <a class="header-anchor" href="#启动选项" aria-label="Permalink to &quot;启动选项&quot;">​</a></h2><p>为了方便 Debug，有时在启动 Bash 的时候，可以加上启动参数。</p><ul><li><code>-n</code>：不运行脚本，只检查是否有语法错误。</li><li><code>-v</code>：输出每一行语句运行结果前，会先输出该行语句。</li><li><code>-x</code>：每一个命令处理之前，先输出该命令，再执行该命令。</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bash</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">scriptname</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bash</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">scriptname</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bash</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-x</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">scriptname</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bash</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">scriptname</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bash</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">scriptname</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bash</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-x</span><span style="color:#24292E;"> </span><span style="color:#032F62;">scriptname</span></span></code></pre></div><h2 id="键盘绑定" tabindex="-1">键盘绑定 <a class="header-anchor" href="#键盘绑定" aria-label="Permalink to &quot;键盘绑定&quot;">​</a></h2><p>Bash 允许用户定义自己的快捷键。全局的键盘绑定文件默认为<code>/etc/inputrc</code>，你可以在主目录创建自己的键盘绑定文件<code>.inputrc</code>文件。如果定义了这个文件，需要在其中加入下面这行，保证全局绑定不会被遗漏。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$include /etc/inputrc</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$include /etc/inputrc</span></span></code></pre></div><p><code>.inputrc</code>文件里面的快捷键，可以像这样定义，<code>&quot;\\C-t&quot;:&quot;pwd\\n&quot;</code>表示将<code>Ctrl + t</code>绑定为运行<code>pwd</code>命令。</p>`,36),e=[p];function c(t,r,i,d,y,h){return a(),n("div",null,e)}const F=s(l,[["render",c]]);export{b as __pageData,F as default};
