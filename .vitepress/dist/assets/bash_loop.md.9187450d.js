import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.681fc4ae.js";const h=JSON.parse('{"title":"循环","description":"","frontmatter":{},"headers":[],"relativePath":"bash/loop.md","filePath":"bash/loop.md"}'),p={name:"bash/loop.md"},o=l(`<h1 id="循环" tabindex="-1">循环 <a class="header-anchor" href="#循环" aria-label="Permalink to &quot;循环&quot;">​</a></h1><p>Bash 提供三种循环语法<code>for</code>、<code>while</code>和<code>until</code>。</p><h2 id="while-循环" tabindex="-1">while 循环 <a class="header-anchor" href="#while-循环" aria-label="Permalink to &quot;while 循环&quot;">​</a></h2><p><code>while</code>循环有一个判断条件，只要符合条件，就不断循环执行指定的语句。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">condition</span><span style="color:#E1E4E8;">; </span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">commands</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">condition</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">commands</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>上面代码中，只要满足条件<code>condition</code>，就会执行命令<code>commands</code>。然后，再次判断是否满足条件<code>condition</code>，只要满足，就会一直执行下去。只有不满足条件，才会退出循环。</p><p>循环条件<code>condition</code>可以使用<code>test</code>命令，跟<code>if</code>结构的判断条件写法一致。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">number</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">$number</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-lt</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> ]; </span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Number = </span><span style="color:#E1E4E8;">$number</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  number</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$((number </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">))</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">number</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">$number</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-lt</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> ]; </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Number = </span><span style="color:#24292E;">$number</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">  number</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$((number </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">))</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>上面例子中，只要变量<code>$number</code>小于10，就会不断加1，直到<code>$number</code>等于10，然后退出循环。</p><p>关键字<code>do</code>可以跟<code>while</code>不在同一行，这时两者之间不需要使用分号分隔。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Hi, while looping ...&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Hi, while looping ...&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>上面的例子会无限循环，可以按下 Ctrl + c 停止。</p><p><code>while</code>循环写成一行，也是可以的。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">while</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Hi, while looping ...&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">while</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">do</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Hi, while looping ...&#39;</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">done</span></span></code></pre></div><p><code>while</code>的条件部分也可以是执行一个命令。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">while</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ECHO&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Hi, while looping ...&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">while</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ECHO&#39;</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">do</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Hi, while looping ...&#39;</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">done</span></span></code></pre></div><p>上面例子中，判断条件是<code>echo &#39;ECHO&#39;</code>。由于这个命令总是执行成功，所以上面命令会产生无限循环。</p><p><code>while</code>的条件部分可以执行任意数量的命令，但是执行结果的真伪只看最后一个命令的执行结果。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">while</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">; </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Hi, looping ...&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">while</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">do</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Hi, looping ...&#39;</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">done</span></span></code></pre></div><p>上面代码运行后，不会有任何输出，因为<code>while</code>的最后一个命令是<code>false</code>。</p><h2 id="until-循环" tabindex="-1">until 循环 <a class="header-anchor" href="#until-循环" aria-label="Permalink to &quot;until 循环&quot;">​</a></h2><p><code>until</code>循环与<code>while</code>循环恰好相反，只要不符合判断条件（判断条件失败），就不断循环执行指定的语句。一旦符合判断条件，就退出循环。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">until</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">condition</span><span style="color:#E1E4E8;">; </span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">commands</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">until</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">condition</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">commands</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>关键字<code>do</code>可以与<code>until</code>不写在同一行，这时两者之间不需要分号分隔。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">until</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">condition</span></span>
<span class="line"><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">commands</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">until</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">condition</span></span>
<span class="line"><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">commands</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>下面是一个例子。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">until</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">; </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Hi, until looping ...&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#F97583;">done</span></span>
<span class="line"><span style="color:#B392F0;">Hi,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">until</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">looping</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span></span>
<span class="line"><span style="color:#B392F0;">Hi,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">until</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">looping</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span></span>
<span class="line"><span style="color:#B392F0;">Hi,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">until</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">looping</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span></span>
<span class="line"><span style="color:#B392F0;">^C</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">until</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">do</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Hi, until looping ...&#39;</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">done</span></span>
<span class="line"><span style="color:#6F42C1;">Hi,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">until</span><span style="color:#24292E;"> </span><span style="color:#032F62;">looping</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span></span>
<span class="line"><span style="color:#6F42C1;">Hi,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">until</span><span style="color:#24292E;"> </span><span style="color:#032F62;">looping</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span></span>
<span class="line"><span style="color:#6F42C1;">Hi,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">until</span><span style="color:#24292E;"> </span><span style="color:#032F62;">looping</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span></span>
<span class="line"><span style="color:#6F42C1;">^C</span></span></code></pre></div><p>上面代码中，<code>until</code>的部分一直为<code>false</code>，导致命令无限运行，必须按下 Ctrl + c 终止。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">number</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">until</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">$number</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-ge</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> ]; </span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Number = </span><span style="color:#E1E4E8;">$number</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  number</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$((number </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">))</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">number</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">until</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">$number</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-ge</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> ]; </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Number = </span><span style="color:#24292E;">$number</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">  number</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$((number </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">))</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>上面例子中，只要变量<code>number</code>小于10，就会不断加1，直到<code>number</code>大于等于10，就退出循环。</p><p><code>until</code>的条件部分也可以是一个命令，表示在这个命令执行成功之前，不断重复尝试。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">until</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cp</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">$1</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">$2</span><span style="color:#E1E4E8;">; </span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Attempt to copy failed. waiting...&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">until</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cp</span><span style="color:#24292E;"> </span><span style="color:#E36209;">$1</span><span style="color:#24292E;"> </span><span style="color:#E36209;">$2</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Attempt to copy failed. waiting...&#39;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>上面例子表示，只要<code>cp $1 $2</code>这个命令执行不成功，就5秒钟后再尝试一次，直到成功为止。</p><p><code>until</code>循环都可以转为<code>while</code>循环，只要把条件设为否定即可。上面这个例子可以改写如下。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cp</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">$1</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">$2</span><span style="color:#E1E4E8;">; </span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Attempt to copy failed. waiting...&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cp</span><span style="color:#24292E;"> </span><span style="color:#E36209;">$1</span><span style="color:#24292E;"> </span><span style="color:#E36209;">$2</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Attempt to copy failed. waiting...&#39;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>一般来说，<code>until</code>用得比较少，完全可以统一都使用<code>while</code>。</p><h2 id="for-in-循环" tabindex="-1">for...in 循环 <a class="header-anchor" href="#for-in-循环" aria-label="Permalink to &quot;for...in 循环&quot;">​</a></h2><p><code>for...in</code>循环用于遍历列表的每一项。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> variable </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> list</span></span>
<span class="line"><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">commands</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> variable </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> list</span></span>
<span class="line"><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">commands</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>上面语法中，<code>for</code>循环会依次从<code>list</code>列表中取出一项，作为变量<code>variable</code>，然后在循环体中进行处理。</p><p>关键词<code>do</code>可以跟<code>for</code>写在同一行，两者使用分号分隔。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> variable </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> list; </span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">commands</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> variable </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> list; </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">commands</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>下面是一个例子。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> word1 word2 word3; </span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> $i</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> word1 word2 word3; </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> $i</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>上面例子中，<code>word1 word2 word3</code>是一个包含三个单词的列表，变量<code>i</code>依次等于<code>word1</code>、<code>word2</code>、<code>word3</code>，命令<code>echo $i</code>则会相应地执行三次。</p><p>列表可以由通配符产生。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">.png; </span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ls</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-l</span><span style="color:#E1E4E8;"> $i</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">.png; </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ls</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-l</span><span style="color:#24292E;"> $i</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>上面例子中，<code>*.png</code>会替换成当前目录中所有 PNG 图片文件，变量<code>i</code>会依次等于每一个文件。</p><p>列表也可以通过子命令产生。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">count</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">cat</span><span style="color:#9ECBFF;"> ~/.bash_profile)</span><span style="color:#E1E4E8;">; </span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  count</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$((count </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Word </span><span style="color:#E1E4E8;">$count</span><span style="color:#9ECBFF;"> (</span><span style="color:#E1E4E8;">$i</span><span style="color:#9ECBFF;">) contains $(</span><span style="color:#79B8FF;">echo</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">$i</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;"> </span><span style="color:#B392F0;">wc</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-c</span><span style="color:#9ECBFF;">) characters&quot;</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">count</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">cat</span><span style="color:#032F62;"> ~/.bash_profile)</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  count</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$((count </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">))</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Word </span><span style="color:#24292E;">$count</span><span style="color:#032F62;"> (</span><span style="color:#24292E;">$i</span><span style="color:#032F62;">) contains $(</span><span style="color:#005CC5;">echo</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-n</span><span style="color:#032F62;"> </span><span style="color:#24292E;">$i</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">|</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">wc</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-c</span><span style="color:#032F62;">) characters&quot;</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>上面例子中，<code>cat ~/.bash_profile</code>命令会输出<code>~/.bash_profile</code>文件的内容，然后通过遍历每一个词，计算该文件一共包含多少个词，以及每个词有多少个字符。</p><p><code>in list</code>的部分可以省略，这时<code>list</code>默认等于脚本的所有参数<code>$@</code>。但是，为了可读性，最好还是不要省略，参考下面的例子。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> filename; </span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">$filename</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#F97583;">done</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 等同于</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> filename </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">$@</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> ; </span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">$filename</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> filename; </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">$filename</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 等同于</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> filename </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">$@</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> ; </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">$filename</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>在函数体中也是一样的，<code>for...in</code>循环省略<code>in list</code>的部分，则<code>list</code>默认等于函数的所有参数。</p><h2 id="for-循环" tabindex="-1">for 循环 <a class="header-anchor" href="#for-循环" aria-label="Permalink to &quot;for 循环&quot;">​</a></h2><p><code>for</code>循环还支持 C 语言的循环语法。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (( expression</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; expression</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; expression</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> )); </span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">commands</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (( expression</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; expression</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; expression</span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> )); </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">commands</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>上面代码中，<code>expression1</code>用来初始化循环条件，<code>expression2</code>用来决定循环结束的条件，<code>expression3</code>在每次循环迭代的末尾执行，用于更新值。</p><p>注意，循环条件放在双重圆括号之中。另外，圆括号之中使用变量，不必加上美元符号<code>$</code>。</p><p>它等同于下面的<code>while</code>循环。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(( expression</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> ))</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (( expression</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> )); </span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">commands</span></span>
<span class="line"><span style="color:#E1E4E8;">  (( expression</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> ))</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(( expression</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> ))</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (( expression</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> )); </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">commands</span></span>
<span class="line"><span style="color:#24292E;">  (( expression</span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> ))</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>下面是一个例子。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (( i</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">i</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> )); </span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> $i</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (( i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">i</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> )); </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> $i</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>上面代码中，初始化变量<code>i</code>的值为0，循环执行的条件是<code>i</code>小于5。每次循环迭代结束时，<code>i</code>的值加1。</p><p><code>for</code>条件部分的三个语句，都可以省略。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> ((;;))</span></span>
<span class="line"><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">read</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">var</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">$var</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;"> ]; </span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">fi</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> ((;;))</span></span>
<span class="line"><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">read</span><span style="color:#24292E;"> </span><span style="color:#032F62;">var</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">$var</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;"> ]; </span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">fi</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>上面脚本会反复读取命令行输入，直到用户输入了一个点（<code>.</code>）为止，才会跳出循环。</p><h2 id="break-continue" tabindex="-1">break，continue <a class="header-anchor" href="#break-continue" aria-label="Permalink to &quot;break，continue&quot;">​</a></h2><p>Bash 提供了两个内部命令<code>break</code>和<code>continue</code>，用来在循环内部跳出循环。</p><p><code>break</code>命令立即终止循环，程序继续执行循环块之后的语句，即不再执行剩下的循环。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> number </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> 1 2 3 4 5 6</span></span>
<span class="line"><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;number is </span><span style="color:#E1E4E8;">$number</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [ </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">$number</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;3&quot;</span><span style="color:#E1E4E8;"> ]; </span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">fi</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> number </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> 1 2 3 4 5 6</span></span>
<span class="line"><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;number is </span><span style="color:#24292E;">$number</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> [ </span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">$number</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;3&quot;</span><span style="color:#24292E;"> ]; </span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">fi</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>上面例子只会打印3行结果。一旦变量<code>$number</code>等于3，就会跳出循环，不再继续执行。</p><p><code>continue</code>命令立即终止本轮循环，开始执行下一轮循环。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">read</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;What file do you want to test?&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">filename</span></span>
<span class="line"><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [ </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">$filename</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> ]; </span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;The file does not exist.&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">continue</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;You entered a valid file..&quot;</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">read</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;What file do you want to test?&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">filename</span></span>
<span class="line"><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> [ </span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">$filename</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> ]; </span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;The file does not exist.&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">continue</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;You entered a valid file..&quot;</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>上面例子中，只要用户输入的文件不存在，<code>continue</code>命令就会生效，直接进入下一轮循环（让用户重新输入文件名），不再执行后面的打印语句。</p><h2 id="select-结构" tabindex="-1">select 结构 <a class="header-anchor" href="#select-结构" aria-label="Permalink to &quot;select 结构&quot;">​</a></h2><p><code>select</code>结构主要用来生成简单的菜单。它的语法与<code>for...in</code>循环基本一致。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> name</span></span>
<span class="line"><span style="color:#E1E4E8;">[in list]</span></span>
<span class="line"><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">commands</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> name</span></span>
<span class="line"><span style="color:#24292E;">[in list]</span></span>
<span class="line"><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">commands</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>Bash 会对<code>select</code>依次进行下面的处理。</p><ol><li><code>select</code>生成一个菜单，内容是列表<code>list</code>的每一项，并且每一项前面还有一个数字编号。</li><li>Bash 提示用户选择一项，输入它的编号。</li><li>用户输入以后，Bash 会将该项的内容存在变量<code>name</code>，该项的编号存入环境变量<code>REPLY</code>。如果用户没有输入，就按回车键，Bash 会重新输出菜单，让用户选择。</li><li>执行命令体<code>commands</code>。</li><li>执行结束后，回到第一步，重复这个过程。</li></ol><p>下面是一个例子。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="color:#6A737D;"># select.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> brand </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> Samsung Sony iphone symphony Walton</span></span>
<span class="line"><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;You have chosen </span><span style="color:#E1E4E8;">$brand</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="color:#6A737D;"># select.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> brand </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> Samsung Sony iphone symphony Walton</span></span>
<span class="line"><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;You have chosen </span><span style="color:#24292E;">$brand</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>执行上面的脚本，Bash 会输出一个品牌的列表，让用户选择。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./select.sh</span></span>
<span class="line"><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;">) Samsung</span></span>
<span class="line"><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) Sony</span></span>
<span class="line"><span style="color:#B392F0;">3</span><span style="color:#E1E4E8;">) iphone</span></span>
<span class="line"><span style="color:#B392F0;">4</span><span style="color:#E1E4E8;">) symphony</span></span>
<span class="line"><span style="color:#B392F0;">5</span><span style="color:#E1E4E8;">) Walton</span></span>
<span class="line"><span style="color:#6A737D;">#?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./select.sh</span></span>
<span class="line"><span style="color:#6F42C1;">1</span><span style="color:#24292E;">) Samsung</span></span>
<span class="line"><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) Sony</span></span>
<span class="line"><span style="color:#6F42C1;">3</span><span style="color:#24292E;">) iphone</span></span>
<span class="line"><span style="color:#6F42C1;">4</span><span style="color:#24292E;">) symphony</span></span>
<span class="line"><span style="color:#6F42C1;">5</span><span style="color:#24292E;">) Walton</span></span>
<span class="line"><span style="color:#6A737D;">#?</span></span></code></pre></div><p>如果用户没有输入编号，直接按回车键。Bash 就会重新输出一遍这个菜单，直到用户按下<code>Ctrl + c</code>，退出执行。</p><p><code>select</code>可以与<code>case</code>结合，针对不同项，执行不同的命令。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Which Operating System do you like?&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> os </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> Ubuntu LinuxMint Windows8 Windows10 WindowsXP</span></span>
<span class="line"><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> $os </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;Ubuntu&quot;</span><span style="color:#E1E4E8;">|</span><span style="color:#9ECBFF;">&quot;LinuxMint&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;I also use </span><span style="color:#E1E4E8;">$os</span><span style="color:#9ECBFF;">.&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ;;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;Windows8&quot;</span><span style="color:#E1E4E8;"> | </span><span style="color:#9ECBFF;">&quot;Windows10&quot;</span><span style="color:#E1E4E8;"> | </span><span style="color:#9ECBFF;">&quot;WindowsXP&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Why don&#39;t you try Linux?&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ;;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Invalid entry.&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">    ;;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">esac</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Which Operating System do you like?&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> os </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> Ubuntu LinuxMint Windows8 Windows10 WindowsXP</span></span>
<span class="line"><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> $os </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;Ubuntu&quot;</span><span style="color:#24292E;">|</span><span style="color:#032F62;">&quot;LinuxMint&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;I also use </span><span style="color:#24292E;">$os</span><span style="color:#032F62;">.&quot;</span></span>
<span class="line"><span style="color:#24292E;">    ;;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;Windows8&quot;</span><span style="color:#24292E;"> | </span><span style="color:#032F62;">&quot;Windows10&quot;</span><span style="color:#24292E;"> | </span><span style="color:#032F62;">&quot;WindowsXP&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Why don&#39;t you try Linux?&quot;</span></span>
<span class="line"><span style="color:#24292E;">    ;;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Invalid entry.&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">    ;;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">esac</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>上面例子中，<code>case</code>针对用户选择的不同项，执行不同的命令。</p><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ul><li><a href="https://linuxhint.com/bash_select_command/" target="_blank" rel="noreferrer">Bash Select Command</a>, Fahmida Yesmin</li></ul>`,90),e=[o];function c(t,r,y,i,E,d){return n(),a("div",null,e)}const u=s(p,[["render",c]]);export{h as __pageData,u as default};
